/**
 * Generated by @openapi-codegen
 *
 * @version 1.0.0
 */
import * as reactQuery from "@tanstack/react-query";
import { useDigestContext, DigestContext } from "./digestContext";
import type * as Fetcher from "./digestFetcher";
import { digestFetch } from "./digestFetcher";

export type AllTeamMembersError = Fetcher.ErrorWrapper<undefined>;

export type AllTeamMembersVariables = DigestContext["fetcherOptions"];

export const fetchAllTeamMembers = (
  variables: AllTeamMembersVariables,
  signal?: AbortSignal
) =>
  digestFetch<Record<string, any>, AllTeamMembersError, undefined, {}, {}, {}>({
    url: "/org/team",
    method: "get",
    ...variables,
    signal,
  });

export const useAllTeamMembers = <TData = Record<string, any>>(
  variables: AllTeamMembersVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<Record<string, any>, AllTeamMembersError, TData>,
    "queryKey" | "queryFn" | "initialData"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useDigestContext(options);
  return reactQuery.useQuery<Record<string, any>, AllTeamMembersError, TData>({
    queryKey: queryKeyFn({
      path: "/org/team",
      operationId: "allTeamMembers",
      variables,
    }),
    queryFn: ({ signal }) =>
      fetchAllTeamMembers({ ...fetcherOptions, ...variables }, signal),
    ...options,
    ...queryOptions,
  });
};

export type DeleteTeamMemberError = Fetcher.ErrorWrapper<undefined>;

export type DeleteTeamMemberVariables = DigestContext["fetcherOptions"];

export const fetchDeleteTeamMember = (
  variables: DeleteTeamMemberVariables,
  signal?: AbortSignal
) =>
  digestFetch<undefined, DeleteTeamMemberError, undefined, {}, {}, {}>({
    url: "/org/team/c718b157-4fe4-4bb1-adc4-787e95b239a2",
    method: "delete",
    ...variables,
    signal,
  });

export const useDeleteTeamMember = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      DeleteTeamMemberError,
      DeleteTeamMemberVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useDigestContext();
  return reactQuery.useMutation<
    undefined,
    DeleteTeamMemberError,
    DeleteTeamMemberVariables
  >({
    mutationFn: (variables: DeleteTeamMemberVariables) =>
      fetchDeleteTeamMember({ ...fetcherOptions, ...variables }),
    ...options,
  });
};

export type LoginOrgError = Fetcher.ErrorWrapper<undefined>;

export type LoginOrgVariables = {
  body?: Record<string, any>;
} & DigestContext["fetcherOptions"];

export const fetchLoginOrg = (
  variables: LoginOrgVariables,
  signal?: AbortSignal
) =>
  digestFetch<
    Record<string, any>,
    LoginOrgError,
    Record<string, any>,
    {},
    {},
    {}
  >({ url: "/org/auth/login", method: "post", ...variables, signal });

export const useLoginOrg = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Record<string, any>,
      LoginOrgError,
      LoginOrgVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useDigestContext();
  return reactQuery.useMutation<
    Record<string, any>,
    LoginOrgError,
    LoginOrgVariables
  >({
    mutationFn: (variables: LoginOrgVariables) =>
      fetchLoginOrg({ ...fetcherOptions, ...variables }),
    ...options,
  });
};

export type LogoutOrgError = Fetcher.ErrorWrapper<undefined>;

export type LogoutOrgVariables = DigestContext["fetcherOptions"];

export const fetchLogoutOrg = (
  variables: LogoutOrgVariables,
  signal?: AbortSignal
) =>
  digestFetch<Record<string, any>, LogoutOrgError, undefined, {}, {}, {}>({
    url: "/org/auth/logout",
    method: "post",
    ...variables,
    signal,
  });

export const useLogoutOrg = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Record<string, any>,
      LogoutOrgError,
      LogoutOrgVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useDigestContext();
  return reactQuery.useMutation<
    Record<string, any>,
    LogoutOrgError,
    LogoutOrgVariables
  >({
    mutationFn: (variables: LogoutOrgVariables) =>
      fetchLogoutOrg({ ...fetcherOptions, ...variables }),
    ...options,
  });
};

export type ProfileError = Fetcher.ErrorWrapper<undefined>;

export type ProfileVariables = DigestContext["fetcherOptions"];

export const fetchProfile = (
  variables: ProfileVariables,
  signal?: AbortSignal
) =>
  digestFetch<undefined, ProfileError, undefined, {}, {}, {}>({
    url: "/org/profile",
    method: "get",
    ...variables,
    signal,
  });

export const useProfile = <TData = undefined>(
  variables: ProfileVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<undefined, ProfileError, TData>,
    "queryKey" | "queryFn" | "initialData"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useDigestContext(options);
  return reactQuery.useQuery<undefined, ProfileError, TData>({
    queryKey: queryKeyFn({
      path: "/org/profile",
      operationId: "profile",
      variables,
    }),
    queryFn: ({ signal }) =>
      fetchProfile({ ...fetcherOptions, ...variables }, signal),
    ...options,
    ...queryOptions,
  });
};

export type GetMetricsError = Fetcher.ErrorWrapper<undefined>;

export type GetMetricsVariables = DigestContext["fetcherOptions"];

export const fetchGetMetrics = (
  variables: GetMetricsVariables,
  signal?: AbortSignal
) =>
  digestFetch<undefined, GetMetricsError, undefined, {}, {}, {}>({
    url: "/metrics",
    method: "get",
    ...variables,
    signal,
  });

export const useGetMetrics = <TData = undefined>(
  variables: GetMetricsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<undefined, GetMetricsError, TData>,
    "queryKey" | "queryFn" | "initialData"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useDigestContext(options);
  return reactQuery.useQuery<undefined, GetMetricsError, TData>({
    queryKey: queryKeyFn({
      path: "/metrics",
      operationId: "getMetrics",
      variables,
    }),
    queryFn: ({ signal }) =>
      fetchGetMetrics({ ...fetcherOptions, ...variables }, signal),
    ...options,
    ...queryOptions,
  });
};

export type CustomerGrowthMetricsQueryParams = {
  /**
   * 1wk, 1mth, 1y, all. default: 1mth
   */
  range?: string;
};

export type CustomerGrowthMetricsError = Fetcher.ErrorWrapper<undefined>;

export type CustomerGrowthMetricsVariables = {
  queryParams?: CustomerGrowthMetricsQueryParams;
} & DigestContext["fetcherOptions"];

export const fetchCustomerGrowthMetrics = (
  variables: CustomerGrowthMetricsVariables,
  signal?: AbortSignal
) =>
  digestFetch<
    undefined,
    CustomerGrowthMetricsError,
    undefined,
    {},
    CustomerGrowthMetricsQueryParams,
    {}
  >({ url: "/kpi/customers", method: "get", ...variables, signal });

export const useCustomerGrowthMetrics = <TData = undefined>(
  variables: CustomerGrowthMetricsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<undefined, CustomerGrowthMetricsError, TData>,
    "queryKey" | "queryFn" | "initialData"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useDigestContext(options);
  return reactQuery.useQuery<undefined, CustomerGrowthMetricsError, TData>({
    queryKey: queryKeyFn({
      path: "/kpi/customers",
      operationId: "customerGrowthMetrics",
      variables,
    }),
    queryFn: ({ signal }) =>
      fetchCustomerGrowthMetrics({ ...fetcherOptions, ...variables }, signal),
    ...options,
    ...queryOptions,
  });
};

export type CreateAMealCategoryError = Fetcher.ErrorWrapper<undefined>;

export type CreateAMealCategoryVariables = {
  body?: Record<string, any>;
} & DigestContext["fetcherOptions"];

export const fetchCreateAMealCategory = (
  variables: CreateAMealCategoryVariables,
  signal?: AbortSignal
) =>
  digestFetch<
    undefined,
    CreateAMealCategoryError,
    Record<string, any>,
    {},
    {},
    {}
  >({ url: "/categories/meals", method: "post", ...variables, signal });

export const useCreateAMealCategory = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      CreateAMealCategoryError,
      CreateAMealCategoryVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useDigestContext();
  return reactQuery.useMutation<
    undefined,
    CreateAMealCategoryError,
    CreateAMealCategoryVariables
  >({
    mutationFn: (variables: CreateAMealCategoryVariables) =>
      fetchCreateAMealCategory({ ...fetcherOptions, ...variables }),
    ...options,
  });
};

export type GetAllCategoriesError = Fetcher.ErrorWrapper<undefined>;

export type GetAllCategoriesVariables = DigestContext["fetcherOptions"];

export const fetchGetAllCategories = (
  variables: GetAllCategoriesVariables,
  signal?: AbortSignal
) =>
  digestFetch<undefined, GetAllCategoriesError, undefined, {}, {}, {}>({
    url: "/categories/meals",
    method: "get",
    ...variables,
    signal,
  });

export const useGetAllCategories = <TData = undefined>(
  variables: GetAllCategoriesVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<undefined, GetAllCategoriesError, TData>,
    "queryKey" | "queryFn" | "initialData"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useDigestContext(options);
  return reactQuery.useQuery<undefined, GetAllCategoriesError, TData>({
    queryKey: queryKeyFn({
      path: "/categories/meals",
      operationId: "getAllCategories",
      variables,
    }),
    queryFn: ({ signal }) =>
      fetchGetAllCategories({ ...fetcherOptions, ...variables }, signal),
    ...options,
    ...queryOptions,
  });
};

export type DeleteCategoryError = Fetcher.ErrorWrapper<undefined>;

export type DeleteCategoryVariables = DigestContext["fetcherOptions"];

export const fetchDeleteCategory = (
  variables: DeleteCategoryVariables,
  signal?: AbortSignal
) =>
  digestFetch<undefined, DeleteCategoryError, undefined, {}, {}, {}>({
    url: "/categories/05fa9976-2366-479b-8854-21727fb78152",
    method: "delete",
    ...variables,
    signal,
  });

export const useDeleteCategory = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      DeleteCategoryError,
      DeleteCategoryVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useDigestContext();
  return reactQuery.useMutation<
    undefined,
    DeleteCategoryError,
    DeleteCategoryVariables
  >({
    mutationFn: (variables: DeleteCategoryVariables) =>
      fetchDeleteCategory({ ...fetcherOptions, ...variables }),
    ...options,
  });
};

export type GetIngredientsQueryParams = {
  page?: number;
  limit?: number;
};

export type GetIngredientsError = Fetcher.ErrorWrapper<undefined>;

export type GetIngredientsVariables = {
  queryParams?: GetIngredientsQueryParams;
} & DigestContext["fetcherOptions"];

export const fetchGetIngredients = (
  variables: GetIngredientsVariables,
  signal?: AbortSignal
) =>
  digestFetch<
    undefined,
    GetIngredientsError,
    undefined,
    {},
    GetIngredientsQueryParams,
    {}
  >({ url: "/ingredients", method: "get", ...variables, signal });

export const useGetIngredients = <TData = undefined>(
  variables: GetIngredientsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<undefined, GetIngredientsError, TData>,
    "queryKey" | "queryFn" | "initialData"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useDigestContext(options);
  return reactQuery.useQuery<undefined, GetIngredientsError, TData>({
    queryKey: queryKeyFn({
      path: "/ingredients",
      operationId: "getIngredients",
      variables,
    }),
    queryFn: ({ signal }) =>
      fetchGetIngredients({ ...fetcherOptions, ...variables }, signal),
    ...options,
    ...queryOptions,
  });
};

export type CreateMeasurementError = Fetcher.ErrorWrapper<undefined>;

export type CreateMeasurementVariables = {
  body?: Record<string, any>;
} & DigestContext["fetcherOptions"];

export const fetchCreateMeasurement = (
  variables: CreateMeasurementVariables,
  signal?: AbortSignal
) =>
  digestFetch<
    undefined,
    CreateMeasurementError,
    Record<string, any>,
    {},
    {},
    {}
  >({ url: "/ingredients", method: "post", ...variables, signal });

export const useCreateMeasurement = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      CreateMeasurementError,
      CreateMeasurementVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useDigestContext();
  return reactQuery.useMutation<
    undefined,
    CreateMeasurementError,
    CreateMeasurementVariables
  >({
    mutationFn: (variables: CreateMeasurementVariables) =>
      fetchCreateMeasurement({ ...fetcherOptions, ...variables }),
    ...options,
  });
};

export type CreateMealError = Fetcher.ErrorWrapper<undefined>;

export type CreateMealVariables = {
  body?: Record<string, any>;
} & DigestContext["fetcherOptions"];

export const fetchCreateMeal = (
  variables: CreateMealVariables,
  signal?: AbortSignal
) =>
  digestFetch<undefined, CreateMealError, Record<string, any>, {}, {}, {}>({
    url: "/dishes",
    method: "post",
    ...variables,
    signal,
  });

export const useCreateMeal = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      CreateMealError,
      CreateMealVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useDigestContext();
  return reactQuery.useMutation<
    undefined,
    CreateMealError,
    CreateMealVariables
  >({
    mutationFn: (variables: CreateMealVariables) =>
      fetchCreateMeal({ ...fetcherOptions, ...variables }),
    ...options,
  });
};

export type GetMealsError = Fetcher.ErrorWrapper<undefined>;

export type GetMealsVariables = DigestContext["fetcherOptions"];

export const fetchGetMeals = (
  variables: GetMealsVariables,
  signal?: AbortSignal
) =>
  digestFetch<undefined, GetMealsError, undefined, {}, {}, {}>({
    url: "/dishes",
    method: "get",
    ...variables,
    signal,
  });

export const useGetMeals = <TData = undefined>(
  variables: GetMealsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<undefined, GetMealsError, TData>,
    "queryKey" | "queryFn" | "initialData"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useDigestContext(options);
  return reactQuery.useQuery<undefined, GetMealsError, TData>({
    queryKey: queryKeyFn({
      path: "/dishes",
      operationId: "getMeals",
      variables,
    }),
    queryFn: ({ signal }) =>
      fetchGetMeals({ ...fetcherOptions, ...variables }, signal),
    ...options,
    ...queryOptions,
  });
};

export type CreateARecipeError = Fetcher.ErrorWrapper<undefined>;

export type CreateARecipeVariables = {
  body?: Record<string, any>;
} & DigestContext["fetcherOptions"];

export const fetchCreateARecipe = (
  variables: CreateARecipeVariables,
  signal?: AbortSignal
) =>
  digestFetch<
    Record<string, any>,
    CreateARecipeError,
    Record<string, any>,
    {},
    {},
    {}
  >({ url: "/recipes", method: "post", ...variables, signal });

export const useCreateARecipe = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Record<string, any>,
      CreateARecipeError,
      CreateARecipeVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useDigestContext();
  return reactQuery.useMutation<
    Record<string, any>,
    CreateARecipeError,
    CreateARecipeVariables
  >({
    mutationFn: (variables: CreateARecipeVariables) =>
      fetchCreateARecipe({ ...fetcherOptions, ...variables }),
    ...options,
  });
};

export type AllRecipesQueryParams = {
  limit?: number;
  page?: number;
};

export type AllRecipesError = Fetcher.ErrorWrapper<undefined>;

export type AllRecipesVariables = {
  queryParams?: AllRecipesQueryParams;
} & DigestContext["fetcherOptions"];

export const fetchAllRecipes = (
  variables: AllRecipesVariables,
  signal?: AbortSignal
) =>
  digestFetch<
    Record<string, any>,
    AllRecipesError,
    undefined,
    {},
    AllRecipesQueryParams,
    {}
  >({ url: "/recipes", method: "get", ...variables, signal });

export const useAllRecipes = <TData = Record<string, any>>(
  variables: AllRecipesVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<Record<string, any>, AllRecipesError, TData>,
    "queryKey" | "queryFn" | "initialData"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useDigestContext(options);
  return reactQuery.useQuery<Record<string, any>, AllRecipesError, TData>({
    queryKey: queryKeyFn({
      path: "/recipes",
      operationId: "allRecipes",
      variables,
    }),
    queryFn: ({ signal }) =>
      fetchAllRecipes({ ...fetcherOptions, ...variables }, signal),
    ...options,
    ...queryOptions,
  });
};

export type GetARecipePathParams = {
  recipeId: string;
};

export type GetARecipeError = Fetcher.ErrorWrapper<undefined>;

export type GetARecipeVariables = {
  pathParams: GetARecipePathParams;
} & DigestContext["fetcherOptions"];

export const fetchGetARecipe = (
  variables: GetARecipeVariables,
  signal?: AbortSignal
) =>
  digestFetch<
    Record<string, any>,
    GetARecipeError,
    undefined,
    {},
    {},
    GetARecipePathParams
  >({ url: "/recipes/{recipeId}", method: "get", ...variables, signal });

export const useGetARecipe = <TData = Record<string, any>>(
  variables: GetARecipeVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<Record<string, any>, GetARecipeError, TData>,
    "queryKey" | "queryFn" | "initialData"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useDigestContext(options);
  return reactQuery.useQuery<Record<string, any>, GetARecipeError, TData>({
    queryKey: queryKeyFn({
      path: "/recipes/{recipeId}",
      operationId: "getARecipe",
      variables,
    }),
    queryFn: ({ signal }) =>
      fetchGetARecipe({ ...fetcherOptions, ...variables }, signal),
    ...options,
    ...queryOptions,
  });
};

export type GetQuestionsError = Fetcher.ErrorWrapper<undefined>;

export type GetQuestionsVariables = DigestContext["fetcherOptions"];

export const fetchGetQuestions = (
  variables: GetQuestionsVariables,
  signal?: AbortSignal
) =>
  digestFetch<Record<string, any>, GetQuestionsError, undefined, {}, {}, {}>({
    url: "/org/onboarding/questions",
    method: "get",
    ...variables,
    signal,
  });

export const useGetQuestions = <TData = Record<string, any>>(
  variables: GetQuestionsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<Record<string, any>, GetQuestionsError, TData>,
    "queryKey" | "queryFn" | "initialData"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useDigestContext(options);
  return reactQuery.useQuery<Record<string, any>, GetQuestionsError, TData>({
    queryKey: queryKeyFn({
      path: "/org/onboarding/questions",
      operationId: "getQuestions",
      variables,
    }),
    queryFn: ({ signal }) =>
      fetchGetQuestions({ ...fetcherOptions, ...variables }, signal),
    ...options,
    ...queryOptions,
  });
};

export type CreateQuestionError = Fetcher.ErrorWrapper<undefined>;

export type CreateQuestionVariables = {
  body?: Record<string, any>;
} & DigestContext["fetcherOptions"];

export const fetchCreateQuestion = (
  variables: CreateQuestionVariables,
  signal?: AbortSignal
) =>
  digestFetch<
    Record<string, any>,
    CreateQuestionError,
    Record<string, any>,
    {},
    {},
    {}
  >({ url: "/org/onboarding/questions", method: "post", ...variables, signal });

export const useCreateQuestion = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Record<string, any>,
      CreateQuestionError,
      CreateQuestionVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useDigestContext();
  return reactQuery.useMutation<
    Record<string, any>,
    CreateQuestionError,
    CreateQuestionVariables
  >({
    mutationFn: (variables: CreateQuestionVariables) =>
      fetchCreateQuestion({ ...fetcherOptions, ...variables }),
    ...options,
  });
};

export type UpdateQuestionPathParams = {
  questionId: string;
};

export type UpdateQuestionError = Fetcher.ErrorWrapper<undefined>;

export type UpdateQuestionVariables = {
  body?: Record<string, any>;
  pathParams: UpdateQuestionPathParams;
} & DigestContext["fetcherOptions"];

export const fetchUpdateQuestion = (
  variables: UpdateQuestionVariables,
  signal?: AbortSignal
) =>
  digestFetch<
    Record<string, any>,
    UpdateQuestionError,
    Record<string, any>,
    {},
    {},
    UpdateQuestionPathParams
  >({
    url: "/org/onboarding/questions/{questionId}",
    method: "post",
    ...variables,
    signal,
  });

export const useUpdateQuestion = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Record<string, any>,
      UpdateQuestionError,
      UpdateQuestionVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useDigestContext();
  return reactQuery.useMutation<
    Record<string, any>,
    UpdateQuestionError,
    UpdateQuestionVariables
  >({
    mutationFn: (variables: UpdateQuestionVariables) =>
      fetchUpdateQuestion({ ...fetcherOptions, ...variables }),
    ...options,
  });
};

export type GetUsersQueryParams = {
  page?: number;
  limit?: number;
  range_created_at?: string;
};

export type GetUsersError = Fetcher.ErrorWrapper<undefined>;

export type GetUsersVariables = {
  queryParams?: GetUsersQueryParams;
} & DigestContext["fetcherOptions"];

export const fetchGetUsers = (
  variables: GetUsersVariables,
  signal?: AbortSignal
) =>
  digestFetch<undefined, GetUsersError, undefined, {}, GetUsersQueryParams, {}>(
    { url: "/users", method: "get", ...variables, signal }
  );

export const useGetUsers = <TData = undefined>(
  variables: GetUsersVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<undefined, GetUsersError, TData>,
    "queryKey" | "queryFn" | "initialData"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useDigestContext(options);
  return reactQuery.useQuery<undefined, GetUsersError, TData>({
    queryKey: queryKeyFn({
      path: "/users",
      operationId: "getUsers",
      variables,
    }),
    queryFn: ({ signal }) =>
      fetchGetUsers({ ...fetcherOptions, ...variables }, signal),
    ...options,
    ...queryOptions,
  });
};

export type PaymentsQueryParams = {
  /**
   * (optional)
   */
  user_id?: string;
};

export type PaymentsError = Fetcher.ErrorWrapper<undefined>;

export type PaymentsVariables = {
  queryParams?: PaymentsQueryParams;
} & DigestContext["fetcherOptions"];

export const fetchPayments = (
  variables: PaymentsVariables,
  signal?: AbortSignal
) =>
  digestFetch<undefined, PaymentsError, undefined, {}, PaymentsQueryParams, {}>(
    { url: "/payments", method: "get", ...variables, signal }
  );

export const usePayments = <TData = undefined>(
  variables: PaymentsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<undefined, PaymentsError, TData>,
    "queryKey" | "queryFn" | "initialData"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useDigestContext(options);
  return reactQuery.useQuery<undefined, PaymentsError, TData>({
    queryKey: queryKeyFn({
      path: "/payments",
      operationId: "payments",
      variables,
    }),
    queryFn: ({ signal }) =>
      fetchPayments({ ...fetcherOptions, ...variables }, signal),
    ...options,
    ...queryOptions,
  });
};

export type LoginError = Fetcher.ErrorWrapper<undefined>;

export type LoginVariables = {
  body?: Record<string, any>;
} & DigestContext["fetcherOptions"];

export const fetchLogin = (variables: LoginVariables, signal?: AbortSignal) =>
  digestFetch<Record<string, any>, LoginError, Record<string, any>, {}, {}, {}>(
    { url: "/auth/login", method: "post", ...variables, signal }
  );

export const useLogin = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Record<string, any>,
      LoginError,
      LoginVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useDigestContext();
  return reactQuery.useMutation<
    Record<string, any>,
    LoginError,
    LoginVariables
  >({
    mutationFn: (variables: LoginVariables) =>
      fetchLogin({ ...fetcherOptions, ...variables }),
    ...options,
  });
};

export type LogoutError = Fetcher.ErrorWrapper<undefined>;

export type LogoutVariables = DigestContext["fetcherOptions"];

export const fetchLogout = (variables: LogoutVariables, signal?: AbortSignal) =>
  digestFetch<Record<string, any>, LogoutError, undefined, {}, {}, {}>({
    url: "/auth/logout",
    method: "post",
    ...variables,
    signal,
  });

export const useLogout = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Record<string, any>,
      LogoutError,
      LogoutVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useDigestContext();
  return reactQuery.useMutation<
    Record<string, any>,
    LogoutError,
    LogoutVariables
  >({
    mutationFn: (variables: LogoutVariables) =>
      fetchLogout({ ...fetcherOptions, ...variables }),
    ...options,
  });
};

export type OnboardingQuestionsError = Fetcher.ErrorWrapper<undefined>;

export type OnboardingQuestionsVariables = DigestContext["fetcherOptions"];

export const fetchOnboardingQuestions = (
  variables: OnboardingQuestionsVariables,
  signal?: AbortSignal
) =>
  digestFetch<undefined, OnboardingQuestionsError, undefined, {}, {}, {}>({
    url: "/onboarding/questions",
    method: "get",
    ...variables,
    signal,
  });

export const useOnboardingQuestions = <TData = undefined>(
  variables: OnboardingQuestionsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<undefined, OnboardingQuestionsError, TData>,
    "queryKey" | "queryFn" | "initialData"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useDigestContext(options);
  return reactQuery.useQuery<undefined, OnboardingQuestionsError, TData>({
    queryKey: queryKeyFn({
      path: "/onboarding/questions",
      operationId: "onboardingQuestions",
      variables,
    }),
    queryFn: ({ signal }) =>
      fetchOnboardingQuestions({ ...fetcherOptions, ...variables }, signal),
    ...options,
    ...queryOptions,
  });
};

export type QueryOperation =
  | {
      path: "/org/team";
      operationId: "allTeamMembers";
      variables: AllTeamMembersVariables;
    }
  | {
      path: "/org/profile";
      operationId: "profile";
      variables: ProfileVariables;
    }
  | {
      path: "/metrics";
      operationId: "getMetrics";
      variables: GetMetricsVariables;
    }
  | {
      path: "/kpi/customers";
      operationId: "customerGrowthMetrics";
      variables: CustomerGrowthMetricsVariables;
    }
  | {
      path: "/categories/meals";
      operationId: "getAllCategories";
      variables: GetAllCategoriesVariables;
    }
  | {
      path: "/ingredients";
      operationId: "getIngredients";
      variables: GetIngredientsVariables;
    }
  | {
      path: "/dishes";
      operationId: "getMeals";
      variables: GetMealsVariables;
    }
  | {
      path: "/recipes";
      operationId: "allRecipes";
      variables: AllRecipesVariables;
    }
  | {
      path: "/recipes/{recipeId}";
      operationId: "getARecipe";
      variables: GetARecipeVariables;
    }
  | {
      path: "/org/onboarding/questions";
      operationId: "getQuestions";
      variables: GetQuestionsVariables;
    }
  | {
      path: "/users";
      operationId: "getUsers";
      variables: GetUsersVariables;
    }
  | {
      path: "/payments";
      operationId: "payments";
      variables: PaymentsVariables;
    }
  | {
      path: "/onboarding/questions";
      operationId: "onboardingQuestions";
      variables: OnboardingQuestionsVariables;
    };
