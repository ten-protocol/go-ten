name: Build PR
# Builds and runs tests on each push to a branch PR'ed against main.

on:
  pull_request:
    paths-ignore:
      - 'docs/**'
      - 'design/**'
      - 'planning/**'
    branches:
      - main
      - releases/v1.0

jobs:
  build:
    runs-on: self-hosted
    steps:
      - uses: actions/checkout@v4
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: 1.23.5

      # Install GLIBC 2.35 in a custom location
      - name: Install GLIBC 2.35
        run: |
          # Create a temporary directory for building GLIBC
          mkdir -p $HOME/glibc_install
          cd $HOME
          
          # Install build dependencies
          sudo apt-get update
          sudo apt-get install -y build-essential wget bison python3 make
          
          # Download and extract GLIBC 2.35 source
          wget https://ftp.gnu.org/gnu/glibc/glibc-2.35.tar.xz
          tar -xf glibc-2.35.tar.xz
          
          # Build GLIBC in a separate directory
          mkdir -p glibc-build
          cd glibc-build
          
          # Configure with custom prefix to avoid replacing system GLIBC
          ../glibc-2.35/configure --prefix=$HOME/glibc_install
          
          # Build and install
          make -j$(nproc)
          make install
          
          # Set environment variables to use the new GLIBC
          echo "LD_LIBRARY_PATH=$HOME/glibc_install/lib:$LD_LIBRARY_PATH" >> $GITHUB_ENV
          
          # Verify the installed version
          $HOME/glibc_install/lib/libc.so.6 --version
          
          echo "GLIBC 2.35 installed successfully to $HOME/glibc_install"

      # Set the initial build number environment variable
      - name: Set Build Number
        run: |
          echo "BUILD_NUMBER=1" >> $GITHUB_ENV

      # Makes sure the artifacts are built correctly
      - name: Build
        run: go build -v ./...

      # Makes sure the binaries for the eth2network are avail for all other tests
      - name: Download eth2network binaries
        run: go test ./... -v -count=1 -run TestEnsureBinariesAreAvail

      # Close specified ports using lsof before testing / local port list compiled from ./integration/constants.go
      - name: Close Integration Test Ports
        run: |
          pkill -9 geth || true
          pkill -9 beacon-chain || true
          pkill -9 validator || true
          
          lowest_port=8000  # Lowest starting port
          highest_port=58000 # Highest port considering the offset
          additional_ports=(80 81 99)  # Additional specific ports
          
          # Find processes listening on ports within the range and kill them
          for pid in $(lsof -iTCP:$lowest_port-$highest_port -sTCP:LISTEN -t); do
            echo "Killing process $pid on one of the ports from $lowest_port to $highest_port"
            kill $pid || true
          done
          
          # Find processes listening on ports within the range and kill them
          for pid in $(lsof -iUDP:$lowest_port-$highest_port -t); do
            echo "Killing process $pid on one of the ports from $lowest_port to $highest_port"
            kill $pid || true
          done

          # Close additional specific ports
          for port in "${additional_ports[@]}"; do
            for pid in $(lsof -ti TCP:$port); do
              echo "Killing process $pid on port $port"
              kill $pid || true
            done
          done

      - name: Test
        run: go test --failfast -v ./... -count=1 -timeout 15m
      - name: Store simulation logs
        uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: ci-logs
          path: |
            integration/.build/simulations/sim-log-*.txt
            integration/.build/noderunner/noderunner-*.txt
            integration/.build/wallet_extension/wal-ext-*.txt
            integration/.build/eth2/*
            !integration/.build/eth2/**/geth.ipc
            integration/.build/faucet/*
            integration/.build/tenscan/*
            integration/.build/tengateway/*
            integration/.build/contractdeployer/*
            integration/.build/smartcontracts/*
          retention-days: 1


