name: 'Build and Push Release Images (ALIBABA)'

on:
  workflow_dispatch:
    inputs:
      tag:
        description: 'Tag to build and push (leave empty for latest)'
        required: true
        default: ''

env:
  CONTAINER_REGISTRY: crpi-im6sg8q4x42zs9n3.eu-west-1.personal.cr.aliyuncs.com

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    environment: development

    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-go@v5
        with:
          go-version: 1.23.5

      - name: 'Login to Alibaba Cloud Container Registry'
        run: |
          # Login to Docker with credentials
          docker login ${{ env.CONTAINER_REGISTRY }} -u will@5131971543297513 --password-stdin <<< "${{ secrets.ALIBABA_REGISTRY_PASSWORD }}"
          
      - name: 'Create Repository if Not Exists'
        run: |
          # Create namespace if it doesn't exist
          curl -X POST -u "will@5131971543297513:${{ secrets.ALIBABA_REGISTRY_PASSWORD }}" \
            "https://${{ env.CONTAINER_REGISTRY }}/v2/ten-testnet/tentestnet" || true
          
          # Create repository if it doesn't exist
          curl -X PUT -u "will@5131971543297513:${{ secrets.ALIBABA_REGISTRY_PASSWORD }}" \
            "https://${{ env.CONTAINER_REGISTRY }}/v2/ten-testnet/tentestnet/enclave" || true

      - name: 'Get version'
        id: get_version
        run: |
          if [ "${{ github.event_name }}" = "release" ]; then
            echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
          elif [ -n "${{ github.event.inputs.tag }}" ]; then
            echo "VERSION=${{ github.event.inputs.tag }}" >> $GITHUB_OUTPUT
          else
            # Fetch the latest tag from the repository
            LATEST_TAG=$(git describe --tags `git rev-list --tags --max-count=1`)
            echo "VERSION=${LATEST_TAG}" >> $GITHUB_OUTPUT
          fi

      - name: 'Build and push TEN node images'
        env:
          VERSION: ${{ steps.get_version.outputs.VERSION }}
        run: |
          # Build and push enclave image
          DOCKER_BUILDKIT=1 docker build -t enclave:${VERSION} -f dockerfiles/enclave.Dockerfile .
          docker tag enclave:${VERSION} ${{ env.CONTAINER_REGISTRY }}/ten-testnet/tentestnet:enclave-${VERSION}
          docker push ${{ env.CONTAINER_REGISTRY }}/ten-testnet/tentestnet:enclave-${VERSION}
          
          # Build and push host image
          DOCKER_BUILDKIT=1 docker build -t host:${VERSION} -f dockerfiles/host.Dockerfile .
          docker tag host:${VERSION} ${{ env.CONTAINER_REGISTRY }}/ten-testnet/tentestnet:host-${VERSION}
          docker push ${{ env.CONTAINER_REGISTRY }}/ten-testnet/tentestnet:host-${VERSION}

          # Build and push l1challengeperiod image
          DOCKER_BUILDKIT=1 docker build -t l1challengeperiod:${VERSION} -f dockerfiles/l1challengeperiod.Dockerfile .
          docker tag l1challengeperiod:${VERSION} ${{ env.CONTAINER_REGISTRY }}/ten-testnet/tentestnet:l1challengeperiod-${VERSION}
          docker push ${{ env.CONTAINER_REGISTRY }}/ten-testnet/tentestnet:l1challengeperiod-${VERSION}

          # Build and push l1contractdeployer image
          DOCKER_BUILDKIT=1 docker build -t l1contractdeployer:${VERSION} -f dockerfiles/l1contractdeployer.Dockerfile .
          docker tag l1contractdeployer:${VERSION} ${{ env.CONTAINER_REGISTRY }}/ten-testnet/tentestnet:l1contractdeployer-${VERSION}
          docker push ${{ env.CONTAINER_REGISTRY }}/ten-testnet/tentestnet:l1contractdeployer-${VERSION}

          # Build and push l1grantsequencers image
          DOCKER_BUILDKIT=1 docker build -t l1grantsequencers:${VERSION} -f dockerfiles/l1grantsequencers.Dockerfile .
          docker tag l1grantsequencers:${VERSION} ${{ env.CONTAINER_REGISTRY }}/ten-testnet/tentestnet:l1grantsequencers-${VERSION}
          docker push ${{ env.CONTAINER_REGISTRY }}/ten-testnet/tentestnet:l1grantsequencers-${VERSION}

          # Build and push l2contractdeployer image
          DOCKER_BUILDKIT=1 docker build -t l2contractdeployer:${VERSION} -f dockerfiles/l2contractdeployer.Dockerfile .
          docker tag l2contractdeployer:${VERSION} ${{ env.CONTAINER_REGISTRY }}/ten-testnet/tentestnet:l2contractdeployer-${VERSION}
          docker push ${{ env.CONTAINER_REGISTRY }}/ten-testnet/tentestnet:l2contractdeployer-${VERSION}
