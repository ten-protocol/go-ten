syntax = "proto3";

option go_package = "enclave/rpc/generated";

package generated;

service EnclaveProto {
  rpc Status(StatusRequest) returns (StatusResponse) {}
  rpc Attestation(AttestationRequest) returns (AttestationResponse) {}
  rpc GenerateSecret(GenerateSecretRequest) returns (GenerateSecretResponse) {}
  rpc InitEnclave(InitEnclaveRequest) returns (InitEnclaveResponse) {}
  rpc EnclaveID(EnclaveIDRequest) returns (EnclaveIDResponse) {}
  rpc RPCEncryptionKey(RPCEncryptionKeyRequest) returns (RPCEncryptionKeyResponse) {}
  rpc SubmitL1Block(SubmitBlockRequest) returns (SubmitBlockResponse) {}
  rpc EncryptedRPC(EncCallRequest) returns (EncCallResponse){}
  rpc SubmitBatch(SubmitBatchRequest) returns (SubmitBatchResponse) {}
  rpc Stop(StopRequest) returns (StopResponse) {}
  rpc GetCode(GetCodeRequest) returns (GetCodeResponse) {}
  rpc Subscribe(SubscribeRequest) returns (SubscribeResponse) {}
  rpc Unsubscribe(UnsubscribeRequest) returns (UnsubscribeResponse) {}
  rpc HealthCheck(EmptyArgs) returns (HealthCheckResponse) {}
  rpc GetBatch(GetBatchRequest) returns (GetBatchResponse) {}
  rpc GetBatchBySeqNo(GetBatchBySeqNoRequest) returns (GetBatchResponse) {}
  rpc GetRollupData(GetRollupDataRequest) returns (GetRollupDataResponse) {}
  rpc CreateBatch(CreateBatchRequest) returns (CreateBatchResponse) {}
  rpc CreateRollup(CreateRollupRequest) returns (CreateRollupResponse) {}
  rpc ExportCrossChainData(ExportCrossChainDataRequest) returns (ExportCrossChainDataResponse) {}
  rpc DebugTraceTransaction(DebugTraceTransactionRequest) returns (DebugTraceTransactionResponse) {}
  rpc StreamL2Updates(StreamL2UpdatesRequest) returns (stream EncodedUpdateResponse) {}
  rpc GetTotalContractCount(GetTotalContractCountRequest) returns (GetTotalContractCountResponse) {}
  rpc EnclavePublicConfig(EnclavePublicConfigRequest) returns (EnclavePublicConfigResponse) {}
  rpc MakeActive(MakeActiveRequest) returns (MakeActiveResponse) {}
}

message EnclavePublicConfigRequest {}

message EnclavePublicConfigResponse{
  bytes l2MessageBusAddress = 1;
  bytes transactionPostProcessorAddress = 2;
  bytes systemContractsUpgraderAddress = 3;
  map<string, bytes> publicSystemContracts = 4;
  SystemError systemError = 5;
}

message GetBatchRequest {
  bytes knownHead = 1;
}

message GetBatchBySeqNoRequest {
  uint64 seqNo = 1;
}

message GetBatchResponse {
  bytes batch = 1;
  SystemError systemError = 2;
}

message GetRollupDataRequest {
  bytes hash = 1;
}

message GetRollupDataResponse {
  PublicRollupDataMsg msg = 1;
  SystemError systemError = 2;
}

message PublicRollupDataMsg {
  uint64 startSeq = 1;
  uint64 timestamp = 2;
}

message StreamL2UpdatesRequest {}

message EncodedUpdateResponse {
  bytes batch = 1;
}

message Pagination{
  int32 offset = 1;
  int32 size = 2;
}

message SystemError{
  int32 errorCode = 1;
  string errorString = 2;
}

message GetTotalContractCountRequest {}

message GetTotalContractCountResponse{
  int64 count = 1;
  SystemError systemError = 2;
}

message DebugTraceTransactionRequest{
  bytes txHash = 1;
  bytes config = 2;
}
message DebugTraceTransactionResponse{
  string msg = 1;
  SystemError systemError = 2;
}

message CreateBatchRequest{
  bool skipIfEmpty = 1;
}
message CreateBatchResponse{
  string error = 2;
}

message CreateRollupRequest{
  optional uint64 fromSequenceNumber = 1;
}

message CreateRollupResponse{
  bytes signature = 1;
  repeated BlobMsg blobs = 2;
  SystemError systemError = 3;
}

message ExportCrossChainDataRequest {
  uint64 fromSeqNo = 1;
  uint64 toSeqNo = 2;
}

message ExportCrossChainDataResponse {
  bytes msg = 1;
}

message StatusRequest {}
message StatusResponse {
  int32 statusCode = 1;
  bytes l1Head = 2; // hash for the L1 head block in enclave's view of the canonical chain
  bytes l2Head = 3; // seq number (big.Int) for the L2 head batch that the enclave has seen
  bytes enclaveID = 4; // enclave ID derived from the public key
  bool isActiveSequencer = 5;
  SystemError systemError = 6;
}

message MakeActiveRequest {}
message MakeActiveResponse {
  SystemError systemError = 1;
}

message AttestationRequest {}
message AttestationResponse {
  AttestationReportMsg attestationReportMsg = 1;
  SystemError systemError = 2;
}

message GenerateSecretRequest {}
message GenerateSecretResponse {
  bytes encryptedSharedEnclaveSecret = 1;
  SystemError systemError = 2;
}

message InitEnclaveRequest {
  bytes encryptedSharedEnclaveSecret = 1;
}
message InitEnclaveResponse {
  SystemError systemError = 1;
}

message EnclaveIDRequest {}
message EnclaveIDResponse {
  bytes enclaveID = 1;
  SystemError systemError = 2;
}

message RPCEncryptionKeyRequest {}
message RPCEncryptionKeyResponse {
  bytes rpcPubKey = 1;
  SystemError systemError = 2;
}

message StartRequest {
  bytes encodedBlock = 1;
}
message StartResponse {
  SystemError systemError = 1;
}

message SubmitBlockRequest {
  bytes encodedBlock = 1;
  bytes encodedProcessedData = 2;
}

message SubmitBlockResponse {
  BlockSubmissionResponseMsg blockSubmissionResponse = 1;
  SystemError systemError = 2;
}

message EncCallRequest {
  bytes encryptedParams = 1;
}
message EncCallResponse {
  bytes encodedEnclaveResponse = 1;
  SystemError systemError = 2;
}

message SubmitBatchRequest {
  ExtBatchMsg batch = 1;
}
message SubmitBatchResponse {
  SystemError systemError = 1;
}


message StopRequest {}
message StopResponse {
  SystemError systemError = 1;
}

message GetCodeRequest {
  bytes address = 1;
  bytes blockNrOrHash = 2;
}
message GetCodeResponse {
  bytes code = 1;
  SystemError systemError = 2;
}

message SubscribeRequest {
  bytes id = 1;
  bytes encryptedSubscription = 2;
}
message SubscribeResponse {
  SystemError systemError = 2;
}

message UnsubscribeRequest {
  bytes id = 1;
}
message UnsubscribeResponse {
  SystemError systemError = 2;
}


message HealthCheckResponse {
  bool status = 1;
  SystemError systemError = 2;
}

message EmptyArgs {}

// Nested message types.

message AttestationReportMsg {
  bytes Report = 1; // The actual report bytes so it can be shared and verified by other nodes
  bytes PubKey = 2; // Public key to encrypt traffic back to this enclave
  bytes EnclaveID = 3;
  string HostAddress = 4; // The IP address on which the host can be contacted by other Obscuro hosts for peer-to-peer communication
  SystemError systemError = 5;
}


message ExtRollupMetadataResponseMsg {
  bytes CrossChainTree = 1;
}

message BlockSubmissionResponseMsg {
  repeated SecretResponseMsg producedSecretResponses = 1;
  BlockSubmissionErrorMsg error = 2; // todo (@matt) - remove this BlockSubmissionError field once we are using the Status() to update host view of enclave state
  repeated ExtRollupMetadataResponseMsg rollupMetadata = 3;
}

message BlockSubmissionErrorMsg {
  string cause = 1; // error cause description
  bytes l1Head = 2; // hash for the L1 head block in enclave's view of the canonical chain
}

message CrossChainMsg {
  bytes Sender = 1;
  uint64 Sequence = 2;
  uint32 Nonce = 3;
  uint32 Topic = 4;
  bytes Payload = 5;
}

message ExtBatchMsg {
  BatchHeaderMsg header = 1;
  repeated bytes txHashes = 2;
  bytes txs = 3;
}

message BatchHeaderMsg {
  bytes ParentHash = 1;
  bytes Proof = 2;
  bytes Root = 3;
  bytes TxHash = 4;
  uint64 Number = 5;
  uint64 SequencerOrderNo = 6;
  bytes ReceiptHash = 7;
  bytes Extra = 8;
  bytes Signature = 9;
  uint64 GasLimit = 10;
  uint64 GasUsed = 11;
  uint64 Time = 12;
  uint64 BaseFee = 13;
  bytes CrossChainRoot = 17;
  bytes Coinbase = 18;
  bytes CrossChainTree = 19;
}

message ExtRollupMsg {
  RollupHeaderMsg header = 1;
  bytes batchPayloads = 2;
  bytes calldataRollupHeader = 3;
}

message RollupHeaderMsg {
  bytes ParentHash = 1;
  bytes CompressionL1Head = 2;
  bytes CompressionL1Number = 3;
  uint64 ProofNumber = 4;
  uint64 Number = 5;
  uint64 Time = 6;
  bytes EnclaveID = 7;
  bytes LastBatchHash = 8;
  uint64 FirstBatchSeqNo = 9;
  uint64 LastBatchSeqNo = 10;
  bytes CrossChainRoot = 11;
}

message SecretResponseMsg {
  bytes Secret = 1;
  bytes RequesterID = 2;
  bytes AttesterID = 3;
  string HostAddress = 4;
  SystemError systemError = 5;
}

message WithdrawalMsg {
  bytes amount = 1;
  bytes recipient = 2;
  bytes contract = 3;
}

message BlobMsg {
  bytes blob = 1;
}
