// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package CrossChain

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
	_ = abi.ConvertType
)

// StructsValueTransferMessage is an auto generated low-level Go binding around an user-defined struct.
type StructsValueTransferMessage struct {
	Sender   common.Address
	Receiver common.Address
	Amount   *big.Int
	Sequence uint64
}

// CrossChainMetaData contains all meta data concerning the CrossChain contract.
var CrossChainMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"InvalidInitialization\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotInitializing\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ReentrancyGuardReentrantCall\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"version\",\"type\":\"uint64\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"messageBusAddress\",\"type\":\"address\"}],\"name\":\"LogCrossChainContractCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"paused\",\"type\":\"bool\"}],\"name\":\"WithdrawalsPaused\",\"type\":\"event\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"sequence\",\"type\":\"uint64\"}],\"internalType\":\"structStructs.ValueTransferMessage\",\"name\":\"_msg\",\"type\":\"tuple\"},{\"internalType\":\"bytes32[]\",\"name\":\"proof\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes32\",\"name\":\"root\",\"type\":\"bytes32\"}],\"name\":\"extractNativeValue\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getChallengePeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes[]\",\"name\":\"crossChainHashes\",\"type\":\"bytes[]\"}],\"name\":\"isBundleAvailable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"isBundleSaved\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"isWithdrawalSpent\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"merkleMessageBus\",\"outputs\":[{\"internalType\":\"contractIMerkleTreeMessageBus\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"messageBus\",\"outputs\":[{\"internalType\":\"contractIMessageBus\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_pause\",\"type\":\"bool\"}],\"name\":\"pauseWithdrawals\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_delay\",\"type\":\"uint256\"}],\"name\":\"setChallengePeriod\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
	Bin: "0x6080604052348015600e575f5ffd5b50601633601a565b608a565b7f9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c19930080546001600160a01b031981166001600160a01b03848116918217845560405192169182907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0905f90a3505050565b6134d5806100975f395ff3fe608060405234801561000f575f5ffd5b50600436106100da575f3560e01c80638415482611610088578063a4ab2faa11610063578063a4ab2faa146101d8578063e874eb20146101eb578063f2fde38b146101fe578063f4cc87ba14610211575f5ffd5b8063841548261461015e5780638da5cb5b14610180578063a1a227fa146101b8575f5ffd5b8063715018a6116100b8578063715018a61461013e5780637864b77d146101465780638129fc1c14610156575f5ffd5b80632f0cb9e3146100de5780635d475fdd146101165780636af526621461012b575b5f5ffd5b6101006100ec36600461094b565b60046020525f908152604090205460ff1681565b60405161010d9190610979565b60405180910390f35b61012961012436600461094b565b610224565b005b6101296101393660046109ee565b610231565b6101296103f4565b60015460405161010d9190610a5b565b610129610407565b61010061016c36600461094b565b60056020525f908152604090205460ff1681565b7f9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c199300546001600160a01b031660405161010d9190610a82565b6002546101cb906001600160a01b031681565b60405161010d9190610aad565b6101006101e6366004610c5a565b6105ed565b6003546101cb906001600160a01b031681565b61012961020c366004610cae565b610669565b61012961021f366004610cde565b6106bf565b61022c61070f565b600155565b610239610783565b5f5460ff16156102645760405162461bcd60e51b815260040161025b90610d2f565b60405180910390fd5b6003546040517fb201246f0000000000000000000000000000000000000000000000000000000081526001600160a01b039091169063b201246f906102b3908790879087908790600401610e5a565b5f6040518083038186803b1580156102c9575f5ffd5b505afa1580156102db573d5f5f3e3d5ffd5b505050505f846040516020016102f19190610e93565b60408051601f1981840301815291815281516020928301205f818152600490935291205490915060ff16156103385760405162461bcd60e51b815260040161025b90610ed3565b5f81815260046020908152604091829020805460ff191660011790556002546001600160a01b0316916399a3ad2191610375918901908901610cae565b87604001356040518363ffffffff1660e01b8152600401610397929190610ee3565b5f604051808303815f87803b1580156103ae575f5ffd5b505af11580156103c0573d5f5f3e3d5ffd5b50505050506103ee60017f9b779b17422d0df92223018b32b4d1fa46e071723d6817e2486d003becc55f0055565b50505050565b6103fc61070f565b6104055f61080c565b565b7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00805468010000000000000000810460ff16159067ffffffffffffffff165f811580156104515750825b90505f8267ffffffffffffffff16600114801561046d5750303b155b90508115801561047b575080155b156104b2576040517ff92ee8a900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b845467ffffffffffffffff1916600117855583156104e657845468ff00000000000000001916680100000000000000001785555b6104ef33610889565b6104f761089a565b60405161050390610921565b604051809103905ff08015801561051c573d5f5f3e3d5ffd5b50600380546001600160a01b039290921673ffffffffffffffffffffffffffffffffffffffff1992831681179091556002805490921681179091555f805460ff191690556040517f4c3bb7ff9ee26b36b3b248a5172618e61b9912d8bc9126b7985a4099546a43dc9161058e91610a82565b60405180910390a183156105e657845468ff0000000000000000191685556040517fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d2906105dd90600190610f18565b60405180910390a15b5050505050565b5f80805b8351811015610651578184828151811061060d5761060d610f26565b602002602001015161061e90610f43565b60405160200161062f929190610f77565b60408051601f19818403018152919052805160209091012091506001016105f1565b505f9081526005602052604090205460ff1692915050565b61067161070f565b6001600160a01b0381166106b3575f6040517f1e4fbdf700000000000000000000000000000000000000000000000000000000815260040161025b9190610a82565b6106bc8161080c565b50565b6106c761070f565b5f805460ff19168215151790556040517f129d33f7856617012aed60524381cfff7233cfc57df58d9f6613a5593d3dc21890610704908390610979565b60405180910390a150565b336107417f9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c199300546001600160a01b031690565b6001600160a01b03161461040557336040517f118cdaa700000000000000000000000000000000000000000000000000000000815260040161025b9190610a82565b7f9b779b17422d0df92223018b32b4d1fa46e071723d6817e2486d003becc55f008054600119016107e0576040517f3ee5aeb500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60029055565b60017f9b779b17422d0df92223018b32b4d1fa46e071723d6817e2486d003becc55f0055565b7f9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c199300805473ffffffffffffffffffffffffffffffffffffffff1981166001600160a01b03848116918217845560405192169182907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0905f90a3505050565b6108916108aa565b6106bc81610911565b6108a26108aa565b610405610919565b7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a005468010000000000000000900460ff16610405576040517fd7e6bcf800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6106716108aa565b6107e66108aa565b61251a80610f8683390190565b805b81146106bc575f5ffd5b80356109458161092e565b92915050565b5f6020828403121561095e5761095e5f5ffd5b610968838361093a565b9392505050565b8015155b82525050565b60208101610945828461096f565b5f6080828403121561099a5761099a5f5ffd5b50919050565b5f5f83601f8401126109b3576109b35f5ffd5b50813567ffffffffffffffff8111156109cd576109cd5f5ffd5b6020830191508360208202830111156109e7576109e75f5ffd5b9250929050565b5f5f5f5f60c08587031215610a0457610a045f5ffd5b610a0e8686610987565b9350608085013567ffffffffffffffff811115610a2c57610a2c5f5ffd5b610a38878288016109a0565b9350935050610a4a8660a0870161093a565b905092959194509250565b80610973565b602081016109458284610a55565b5f6001600160a01b038216610945565b61097381610a69565b602081016109458284610a79565b5f61094582610a69565b5f61094582610a90565b61097381610a9a565b602081016109458284610aa4565b634e487b7160e01b5f52604160045260245ffd5b601f19601f830116810181811067ffffffffffffffff82111715610af557610af5610abb565b6040525050565b5f610b0660405190565b9050610b128282610acf565b919050565b5f67ffffffffffffffff821115610b3057610b30610abb565b5060209081020190565b5f67ffffffffffffffff821115610b5357610b53610abb565b601f19601f83011660200192915050565b82818337505f910152565b5f610b81610b7c84610b3a565b610afc565b9050828152838383011115610b9757610b975f5ffd5b610968836020830184610b64565b5f82601f830112610bb757610bb75f5ffd5b61096883833560208501610b6f565b5f610bd3610b7c84610b17565b83815290506020808201908402830185811115610bf157610bf15f5ffd5b835b81811015610c2f57803567ffffffffffffffff811115610c1457610c145f5ffd5b610c2088828801610ba5565b84525060209283019201610bf3565b5050509392505050565b5f82601f830112610c4b57610c4b5f5ffd5b61096883833560208501610bc6565b5f60208284031215610c6d57610c6d5f5ffd5b813567ffffffffffffffff811115610c8657610c865f5ffd5b610c9284828501610c39565b949350505050565b61093081610a69565b803561094581610c9a565b5f60208284031215610cc157610cc15f5ffd5b6109688383610ca3565b801515610930565b803561094581610ccb565b5f60208284031215610cf157610cf15f5ffd5b6109688383610cd3565b60168152602081017f7769746864726177616c73206172652070617573656400000000000000000000815290505b60200190565b6020808252810161094581610cfb565b505f6109456020830183610ca3565b505f610945602083018361093a565b67ffffffffffffffff8116610930565b803561094581610d5d565b505f6109456020830183610d6d565b67ffffffffffffffff8116610973565b610da18180610d3f565b610dab8382610a79565b50610db96020820182610d3f565b610dc66020840182610a79565b50610dd46040820182610d4e565b610de16040840182610a55565b50610def6060820182610d78565b610dfc6060840182610d87565b505050565b82818337505050565b8183526020830192505f7f07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff831115610e4357610e435f5ffd5b602083029250610e54838584610e01565b50500190565b60c08101610e688287610d97565b8181036080830152610e7b818587610e0a565b9050610e8a60a0830184610a55565b95945050505050565b608081016109458284610d97565b60188152602081017f7769746864726177616c20616c7265616479207370656e74000000000000000081529050610d29565b6020808252810161094581610ea1565b60408101610ef18285610a79565b6109686020830184610a55565b5f67ffffffffffffffff8216610945565b61097381610efe565b602081016109458284610f0f565b634e487b7160e01b5f52603260045260245ffd5b5f610945825190565b5f610f4c825190565b60208301610f5981610f3a565b925050602081101561099a575f196020919091036008021b16919050565b60408101610ef18285610a5556fe608060405234801561000f575f5ffd5b5061001933610026565b610021610096565b610148565b7f9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c19930080546001600160a01b031981166001600160a01b03848116918217845560405192169182907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0905f90a3505050565b7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00805468010000000000000000900460ff16156100e65760405163f92ee8a960e01b815260040160405180910390fd5b80546001600160401b03908116146101455780546001600160401b0319166001600160401b0390811782556040519081527fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d29060200160405180910390a15b50565b6123c5806101555f395ff3fe608060405260043610610110575f3560e01c80638da5cb5b116100a4578063b1454caa11610073578063b6aed0cb11610058578063b6aed0cb1461037a578063e138a8d214610399578063f2fde38b146103b857610180565b8063b1454caa1461033b578063b201246f1461035b57610180565b80638da5cb5b1461029a5780639730886d146102de57806399a3ad21146102fd578063ab53bddc1461031c57610180565b8063346633fb116100e0578063346633fb1461023557806336d2da9014610248578063485cc95514610267578063715018a61461028657610180565b8062a1b815146101a15780630fcfbd11146101cb5780630fe9188e146101ea57806333a88c721461020957610180565b36610180576040517f346633fb000000000000000000000000000000000000000000000000000000008152309063346633fb90349061015590339083906004016111bd565b5f604051808303818588803b15801561016c575f5ffd5b505af115801561017e573d5f5f3e3d5ffd5b005b60405162461bcd60e51b81526004016101989061120c565b60405180910390fd5b3480156101ac575f5ffd5b506101b56103d7565b6040516101c2919061121c565b60405180910390f35b3480156101d6575f5ffd5b506101b56101e5366004611243565b610460565b3480156101f5575f5ffd5b5061017e610204366004611292565b6104bd565b348015610214575f5ffd5b50610228610223366004611243565b610501565b6040516101c291906112b7565b61017e6102433660046112d9565b610551565b348015610253575f5ffd5b5061017e61026236600461130f565b61069a565b348015610272575f5ffd5b5061017e61028136600461132c565b610715565b348015610291575f5ffd5b5061017e61087e565b3480156102a5575f5ffd5b507f9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c199300546001600160a01b03166040516101c29190611359565b3480156102e9575f5ffd5b5061017e6102f8366004611367565b610891565b348015610308575f5ffd5b5061017e6103173660046112d9565b6109f6565b348015610327575f5ffd5b5061017e6103363660046112d9565b610a92565b61034e610349366004611429565b610b5a565b6040516101c291906114b1565b348015610366575f5ffd5b5061017e610375366004611519565b610c62565b348015610385575f5ffd5b5061017e610394366004611580565b610d60565b3480156103a4575f5ffd5b5061017e6103b336600461159e565b610da4565b3480156103c3575f5ffd5b5061017e6103d236600461130f565b610eeb565b600354604080517f1a90a21900000000000000000000000000000000000000000000000000000000815290515f926001600160a01b031691631a90a2199160048083019260209291908290030181865afa158015610437573d5f5f3e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061045b9190611621565b905090565b5f5f8260405160200161047391906117d3565b60408051601f1981840301815291815281516020928301205f81815292839052912054909150806104b65760405162461bcd60e51b815260040161019890611822565b9392505050565b6104c5610f41565b5f8181526004602052604081205490036104f15760405162461bcd60e51b815260040161019890611864565b5f90815260046020526040812055565b5f5f8260405160200161051491906117d3565b60408051601f1981840301815291815281516020928301205f8181529283905291205490915080158015906105495750428111155b949350505050565b5f3411801561055f57508034145b61057b5760405162461bcd60e51b8152600401610198906118cc565b60035434906001600160a01b03161561063b575f6105976103d7565b9050803410156105b95760405162461bcd60e51b81526004016101989061190c565b6105c38134611930565b6003546040519193505f916001600160a01b039091169083908381818185875af1925050503d805f8114610612576040519150601f19603f3d011682016040523d82523d5f602084013e610617565b606091505b50509050806106385760405162461bcd60e51b81526004016101989061199b565b50505b5f61064533610fb5565b9050836001600160a01b0316336001600160a01b03167f50c536ac33a920f00755865b831d17bf4cff0b2e0345f65b16d52bfc004068b6848460405161068c9291906119ab565b60405180910390a350505050565b6106a2610f41565b5f816001600160a01b0316476040515f6040518083038185875af1925050503d805f81146106eb576040519150601f19603f3d011682016040523d82523d5f602084013e6106f0565b606091505b50509050806107115760405162461bcd60e51b8152600401610198906119f8565b5050565b7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00805468010000000000000000810460ff16159067ffffffffffffffff165f8115801561075f5750825b90505f8267ffffffffffffffff16600114801561077b5750303b155b905081158015610789575080155b156107c0576040517ff92ee8a900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b845467ffffffffffffffff1916600117855583156107f457845468ff00000000000000001916680100000000000000001785555b6107fd87611012565b6003805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b038816179055831561087557845468ff0000000000000000191685556040517fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d29061086c90600190611a2b565b60405180910390a15b50505050505050565b610886610f41565b61088f5f611023565b565b5f61089d600130611a39565b90506108d07f9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c199300546001600160a01b031690565b6001600160a01b0316336001600160a01b031614806108f75750336001600160a01b038216145b6109135760405162461bcd60e51b815260040161019890611a8e565b5f61091e8342611a9e565b90505f8460405160200161093291906117d3565b60408051601f1981840301815291815281516020928301205f81815292839052912054909150156109755760405162461bcd60e51b815260040161019890611b09565b5f818152602081815260408220849055600191906109959088018861130f565b6001600160a01b0316815260208101919091526040015f908120906109c06080880160608901611b19565b63ffffffff1681526020808201929092526040015f90812080546001810182559082529190208691600402016108758282611f35565b6109fe610f41565b80471015610a1e5760405162461bcd60e51b81526004016101989061190c565b5f826001600160a01b0316826040515f6040518083038185875af1925050503d805f8114610a67576040519150601f19603f3d011682016040523d82523d5f602084013e610a6c565b606091505b5050905080610a8d5760405162461bcd60e51b8152600401610198906119f8565b505050565b5f610a9e600130611a39565b9050610ad17f9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c199300546001600160a01b031690565b6001600160a01b0316336001600160a01b03161480610af85750336001600160a01b038216145b610b145760405162461bcd60e51b815260040161019890611a8e565b826001600160a01b03167fcd9850463422a7449c406a036e35e5edb6fbe35a64c9f12a2354be98a750c0d383604051610b4d919061121c565b60405180910390a2505050565b6003545f906001600160a01b031615610c0b575f610b766103d7565b905080341015610b985760405162461bcd60e51b815260040161019890611f97565b6003546040515f916001600160a01b03169083908381818185875af1925050503d805f8114610be2576040519150601f19603f3d011682016040523d82523d5f602084013e610be7565b606091505b5050905080610c085760405162461bcd60e51b81526004016101989061199b565b50505b610c1433610fb5565b90507fb93c37389233beb85a3a726c3f15c2d15533ee74cb602f20f490dfffef77593733828888888888604051610c519796959493929190611fa7565b60405180910390a195945050505050565b5f818152600460205260408120549003610c8e5760405162461bcd60e51b815260040161019890612062565b5f81815260046020526040902054421015610cbb5760405162461bcd60e51b8152600401610198906120ae565b5f84604051602001610ccd9190612132565b60405160208183030381529060405280519060200120604051602001610cf39190612172565b604051602081830303815290604052805190602001209050610d3d84848484604051602001610d229190612191565b604051602081830303815290604052805190602001206110a0565b610d595760405162461bcd60e51b8152600401610198906121fb565b5050505050565b610d68610f41565b5f8281526004602052604090205415610d935760405162461bcd60e51b815260040161019890612263565b5f9182526004602052604090912055565b5f818152600460205260408120549003610dd05760405162461bcd60e51b815260040161019890612062565b5f81815260046020526040902054421015610dfd5760405162461bcd60e51b8152600401610198906120ae565b5f610e0b602086018661130f565b610e1b6040870160208801612273565b610e2b6060880160408901611b19565b610e3b6080890160608a01611b19565b610e4860808a018a611c63565b610e5860c08c0160a08d01612290565b604051602001610e6e9796959493929190611fa7565b6040516020818303038152906040528051906020012090505f81604051602001610e9891906122df565b604051602081830303815290604052805190602001209050610ec785858584604051602001610d229190612191565b610ee35760405162461bcd60e51b815260040161019890612347565b505050505050565b610ef3610f41565b6001600160a01b038116610f35575f6040517f1e4fbdf70000000000000000000000000000000000000000000000000000000081526004016101989190611359565b610f3e81611023565b50565b33610f737f9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c199300546001600160a01b031690565b6001600160a01b03161461088f57336040517f118cdaa70000000000000000000000000000000000000000000000000000000081526004016101989190611359565b6001600160a01b0381165f908152600260205260408120805467ffffffffffffffff169160019190610fe78385612357565b92506101000a81548167ffffffffffffffff021916908367ffffffffffffffff160217905550919050565b61101a6110b7565b610f3e8161111e565b7f9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c199300805473ffffffffffffffffffffffffffffffffffffffff1981166001600160a01b03848116918217845560405192169182907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0905f90a3505050565b5f826110ad868685611126565b1495945050505050565b7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a005468010000000000000000900460ff1661088f576040517fd7e6bcf800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b610ef36110b7565b5f81815b8481101561115e57611154828787848181106111485761114861237b565b90506020020135611167565b915060010161112a565b50949350505050565b5f818310611181575f82815260208490526040902061118f565b5f8381526020839052604090205b90505b92915050565b5f6001600160a01b038216611192565b6111b181611198565b82525050565b806111b1565b604081016111cb82856111a8565b6104b660208301846111b7565b600b8152602081017f756e737570706f72746564000000000000000000000000000000000000000000815290505b60200190565b60208082528101611192816111d8565b6020810161119282846111b7565b5f60c0828403121561123d5761123d5f5ffd5b50919050565b5f60208284031215611256576112565f5ffd5b813567ffffffffffffffff81111561126f5761126f5f5ffd5b6105498482850161122a565b805b8114610f3e575f5ffd5b80356111928161127b565b5f602082840312156112a5576112a55f5ffd5b61118f8383611287565b8015156111b1565b6020810161119282846112af565b61127d81611198565b8035611192816112c5565b5f5f604083850312156112ed576112ed5f5ffd5b6112f784846112ce565b91506113068460208501611287565b90509250929050565b5f60208284031215611322576113225f5ffd5b61118f83836112ce565b5f5f60408385031215611340576113405f5ffd5b61134a84846112ce565b915061130684602085016112ce565b6020810161119282846111a8565b5f5f6040838503121561137b5761137b5f5ffd5b823567ffffffffffffffff811115611394576113945f5ffd5b6113a08582860161122a565b9250506113068460208501611287565b63ffffffff811661127d565b8035611192816113b0565b5f5f83601f8401126113da576113da5f5ffd5b50813567ffffffffffffffff8111156113f4576113f45f5ffd5b60208301915083600182028301111561140e5761140e5f5ffd5b9250929050565b60ff811661127d565b803561119281611415565b5f5f5f5f5f60808688031215611440576114405f5ffd5b61144a87876113bc565b945061145987602088016113bc565b9350604086013567ffffffffffffffff811115611477576114775f5ffd5b611483888289016113c7565b9350935050611495876060880161141e565b90509295509295909350565b67ffffffffffffffff81166111b1565b6020810161119282846114a1565b5f6080828403121561123d5761123d5f5ffd5b5f5f83601f8401126114e5576114e55f5ffd5b50813567ffffffffffffffff8111156114ff576114ff5f5ffd5b60208301915083602082028301111561140e5761140e5f5ffd5b5f5f5f5f60c0858703121561152f5761152f5f5ffd5b61153986866114bf565b9350608085013567ffffffffffffffff811115611557576115575f5ffd5b611563878288016114d2565b93509350506115758660a08701611287565b905092959194509250565b5f5f60408385031215611594576115945f5ffd5b6112f78484611287565b5f5f5f5f606085870312156115b4576115b45f5ffd5b843567ffffffffffffffff8111156115cd576115cd5f5ffd5b6115d98782880161122a565b945050602085013567ffffffffffffffff8111156115f8576115f85f5ffd5b611604878288016114d2565b93509350506115758660408701611287565b80516111928161127b565b5f60208284031215611634576116345f5ffd5b61118f8383611616565b505f61119260208301836112ce565b67ffffffffffffffff811661127d565b80356111928161164d565b505f611192602083018361165d565b505f61119260208301836113bc565b63ffffffff81166111b1565b5f808335601e19368590030181126116ab576116ab5f5ffd5b830160208101925035905067ffffffffffffffff8111156116cd576116cd5f5ffd5b3681900382131561140e5761140e5f5ffd5b82818337505f910152565b8183526020830192506116fe8284836116df565b50601f01601f19160190565b505f611192602083018361141e565b60ff81166111b1565b5f60c08301611731838061163e565b61173b85826111a8565b506117496020840184611668565b61175660208601826114a1565b506117646040840184611677565b6117716040860182611686565b5061177f6060840184611677565b61178c6060860182611686565b5061179a6080840184611692565b85830360808701526117ad8382846116ea565b925050506117be60a084018461170a565b6117cb60a0860182611719565b509392505050565b6020808252810161118f8184611722565b60218152602081017f54686973206d65737361676520776173206e65766572207375626d69747465648152601760f91b602082015290505b60400190565b60208082528101611192816117e4565b601a8152602081017f537461746520726f6f7420646f6573206e6f742065786973742e00000000000081529050611206565b6020808252810161119281611832565b60308152602081017f417474656d7074696e6720746f2073656e642076616c756520776974686f757481527f2070726f766964696e67204574686572000000000000000000000000000000006020820152905061181c565b6020808252810161119281611874565b60208082527f496e73756666696369656e742066756e647320746f2073656e642076616c75659101908152611206565b60208082528101611192816118dc565b634e487b7160e01b5f52601160045260245ffd5b818103818111156111925761119261191c565b60248152602081017f4661696c656420746f2073656e64206665657320746f206665657320636f6e7481527f72616374000000000000000000000000000000000000000000000000000000006020820152905061181c565b6020808252810161119281611943565b604081016119b982856111b7565b6104b660208301846114a1565b60148152602081017f6661696c65642073656e64696e672076616c756500000000000000000000000081529050611206565b60208082528101611192816119c6565b5f61119282611a15565b90565b67ffffffffffffffff1690565b6111b181611a08565b602081016111928284611a22565b6001600160a01b039182169190811690828203908111156111925761119261191c565b60118152602081017f4e6f74206f776e6572206f722073656c6600000000000000000000000000000081529050611206565b6020808252810161119281611a5c565b808201808211156111925761119261191c565b60218152602081017f4d657373616765207375626d6974746564206d6f7265207468616e206f6e636581527f21000000000000000000000000000000000000000000000000000000000000006020820152905061181c565b6020808252810161119281611ab1565b5f60208284031215611b2c57611b2c5f5ffd5b61118f83836113bc565b5f8135611192816112c5565b5f6001600160a01b03835b81169019929092169190911792915050565b5f61119282611198565b5f61119282611b5f565b611b7c82611b69565b611b87818354611b42565b8255505050565b5f81356111928161164d565b5f7bffffffffffffffff0000000000000000000000000000000000000000611b4d8460a01b90565b5f61119267ffffffffffffffff8316611a15565b611bdf82611bc2565b611b87818354611b9a565b5f8135611192816113b0565b5f7fffffffff00000000000000000000000000000000000000000000000000000000611b4d8460e01b90565b5f63ffffffff8216611192565b611c3882611c22565b611b87818354611bf6565b5f63ffffffff83611b4d565b611c5882611c22565b611b87818354611c43565b5f808335601e1936859003018112611c7c57611c7c5f5ffd5b8301915050803567ffffffffffffffff811115611c9a57611c9a5f5ffd5b60208201915060018102360382131561140e5761140e5f5ffd5b634e487b7160e01b5f52604160045260245ffd5b634e487b7160e01b5f52602260045260245ffd5b600281046001821680611cf057607f821691505b60208210810361123d5761123d611cc8565b5f611192611a128381565b611d1683611d02565b81545f1960089490940293841b1916921b91909117905550565b5f610a8d818484611d0d565b8181101561071157611d4e5f82611d30565b600101611d3c565b601f821115610a8d575f818152602090206020601f85010481016020851015611d7c5750805b610d596020601f860104830182611d3c565b8267ffffffffffffffff811115611da757611da7611cb4565b611db18254611cdc565b611dbc828285611d56565b505f601f821160018114611dee575f8315611dd75750848201355b5f19600885021c1981166002850217855550610ee3565b5f84815260208120601f198516915b82811015611e1d5787850135825560209485019460019092019101611dfd565b5084821015611e39575f196008601f8716021c19878501351681555b5050505060020260010190555050565b610a8d838383611d8e565b5f813561119281611415565b5f60ff8216611192565b611e7382611e60565b815460ff191660ff821617611b87565b808280611e8f81611b36565b9050611e9b8184611b73565b50506020830180611eab82611b8e565b9050611eb78184611bd6565b50506040830180611ec782611bea565b9050611ed38184611c2f565b5050506060820180611ee482611bea565b9050611ef38160018501611c4f565b5050611f026080830183611c63565b611f10818360028601611e49565b505060a0820180611f2082611e54565b9050611f2f8160038501611e6a565b50505050565b6107118282611e83565b60258152602081017f496e73756666696369656e742066756e647320746f207075626c697368206d6581527f73736167650000000000000000000000000000000000000000000000000000006020820152905061181c565b6020808252810161119281611f3f565b60c08101611fb5828a6111a8565b611fc260208301896114a1565b611fcf6040830188611686565b611fdc6060830187611686565b8181036080830152611fef8185876116ea565b9050611ffe60a0830184611719565b98975050505050505050565b602a8152602081017f526f6f74206973206e6f74207075626c6973686564206f6e2074686973206d6581527f7373616765206275732e000000000000000000000000000000000000000000006020820152905061181c565b602080825281016111928161200a565b60218152602081017f526f6f74206973206e6f7420636f6e736964657265642066696e616c207965748152601760f91b6020820152905061181c565b6020808252810161119281612072565b505f6111926020830183611287565b6120d7818061163e565b6120e183826111a8565b506120ef602082018261163e565b6120fc60208401826111a8565b5061210a60408201826120be565b61211760408401826111b7565b506121256060820182611668565b610a8d60608401826114a1565b6080810161119282846120cd565b60018152602081017f760000000000000000000000000000000000000000000000000000000000000081529050611206565b6040808252810161218281612140565b905061119260208301846111b7565b61219b81836111b7565b602001919050565b60338152602081017f496e76616c696420696e636c7573696f6e2070726f6f6620666f722076616c7581527f65207472616e73666572206d6573736167652e000000000000000000000000006020820152905061181c565b60208082528101611192816121a3565b60258152602081017f526f6f7420616c726561647920616464656420746f20746865206d657373616781527f65206275730000000000000000000000000000000000000000000000000000006020820152905061181c565b602080825281016111928161220b565b5f60208284031215612286576122865f5ffd5b61118f838361165d565b5f602082840312156122a3576122a35f5ffd5b61118f838361141e565b60018152602081017f6d0000000000000000000000000000000000000000000000000000000000000081529050611206565b60408082528101612182816122ad565b60308152602081017f496e76616c696420696e636c7573696f6e2070726f6f6620666f722063726f7381527f7320636861696e206d6573736167652e000000000000000000000000000000006020820152905061181c565b60208082528101611192816122ef565b67ffffffffffffffff9182169190811690828201908111156111925761119261191c565b634e487b7160e01b5f52603260045260245ffdfea2646970667358221220a5848f025fbe413a4856adc426375a9408bd57916da470b0fb97c9bc2be85e6064736f6c634300081c0033a26469706673582212200c3ef310f1686f847b76fe66125cbdab10f9e4d78d04d1e2f2b4e25d2db7b0cd64736f6c634300081c0033",
}

// CrossChainABI is the input ABI used to generate the binding from.
// Deprecated: Use CrossChainMetaData.ABI instead.
var CrossChainABI = CrossChainMetaData.ABI

// CrossChainBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use CrossChainMetaData.Bin instead.
var CrossChainBin = CrossChainMetaData.Bin

// DeployCrossChain deploys a new Ethereum contract, binding an instance of CrossChain to it.
func DeployCrossChain(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *CrossChain, error) {
	parsed, err := CrossChainMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(CrossChainBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &CrossChain{CrossChainCaller: CrossChainCaller{contract: contract}, CrossChainTransactor: CrossChainTransactor{contract: contract}, CrossChainFilterer: CrossChainFilterer{contract: contract}}, nil
}

// CrossChain is an auto generated Go binding around an Ethereum contract.
type CrossChain struct {
	CrossChainCaller     // Read-only binding to the contract
	CrossChainTransactor // Write-only binding to the contract
	CrossChainFilterer   // Log filterer for contract events
}

// CrossChainCaller is an auto generated read-only Go binding around an Ethereum contract.
type CrossChainCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// CrossChainTransactor is an auto generated write-only Go binding around an Ethereum contract.
type CrossChainTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// CrossChainFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type CrossChainFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// CrossChainSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type CrossChainSession struct {
	Contract     *CrossChain       // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// CrossChainCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type CrossChainCallerSession struct {
	Contract *CrossChainCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts     // Call options to use throughout this session
}

// CrossChainTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type CrossChainTransactorSession struct {
	Contract     *CrossChainTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts     // Transaction auth options to use throughout this session
}

// CrossChainRaw is an auto generated low-level Go binding around an Ethereum contract.
type CrossChainRaw struct {
	Contract *CrossChain // Generic contract binding to access the raw methods on
}

// CrossChainCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type CrossChainCallerRaw struct {
	Contract *CrossChainCaller // Generic read-only contract binding to access the raw methods on
}

// CrossChainTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type CrossChainTransactorRaw struct {
	Contract *CrossChainTransactor // Generic write-only contract binding to access the raw methods on
}

// NewCrossChain creates a new instance of CrossChain, bound to a specific deployed contract.
func NewCrossChain(address common.Address, backend bind.ContractBackend) (*CrossChain, error) {
	contract, err := bindCrossChain(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &CrossChain{CrossChainCaller: CrossChainCaller{contract: contract}, CrossChainTransactor: CrossChainTransactor{contract: contract}, CrossChainFilterer: CrossChainFilterer{contract: contract}}, nil
}

// NewCrossChainCaller creates a new read-only instance of CrossChain, bound to a specific deployed contract.
func NewCrossChainCaller(address common.Address, caller bind.ContractCaller) (*CrossChainCaller, error) {
	contract, err := bindCrossChain(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &CrossChainCaller{contract: contract}, nil
}

// NewCrossChainTransactor creates a new write-only instance of CrossChain, bound to a specific deployed contract.
func NewCrossChainTransactor(address common.Address, transactor bind.ContractTransactor) (*CrossChainTransactor, error) {
	contract, err := bindCrossChain(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &CrossChainTransactor{contract: contract}, nil
}

// NewCrossChainFilterer creates a new log filterer instance of CrossChain, bound to a specific deployed contract.
func NewCrossChainFilterer(address common.Address, filterer bind.ContractFilterer) (*CrossChainFilterer, error) {
	contract, err := bindCrossChain(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &CrossChainFilterer{contract: contract}, nil
}

// bindCrossChain binds a generic wrapper to an already deployed contract.
func bindCrossChain(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := CrossChainMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_CrossChain *CrossChainRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _CrossChain.Contract.CrossChainCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_CrossChain *CrossChainRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _CrossChain.Contract.CrossChainTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_CrossChain *CrossChainRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _CrossChain.Contract.CrossChainTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_CrossChain *CrossChainCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _CrossChain.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_CrossChain *CrossChainTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _CrossChain.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_CrossChain *CrossChainTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _CrossChain.Contract.contract.Transact(opts, method, params...)
}

// GetChallengePeriod is a free data retrieval call binding the contract method 0x7864b77d.
//
// Solidity: function getChallengePeriod() view returns(uint256)
func (_CrossChain *CrossChainCaller) GetChallengePeriod(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _CrossChain.contract.Call(opts, &out, "getChallengePeriod")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetChallengePeriod is a free data retrieval call binding the contract method 0x7864b77d.
//
// Solidity: function getChallengePeriod() view returns(uint256)
func (_CrossChain *CrossChainSession) GetChallengePeriod() (*big.Int, error) {
	return _CrossChain.Contract.GetChallengePeriod(&_CrossChain.CallOpts)
}

// GetChallengePeriod is a free data retrieval call binding the contract method 0x7864b77d.
//
// Solidity: function getChallengePeriod() view returns(uint256)
func (_CrossChain *CrossChainCallerSession) GetChallengePeriod() (*big.Int, error) {
	return _CrossChain.Contract.GetChallengePeriod(&_CrossChain.CallOpts)
}

// IsBundleAvailable is a free data retrieval call binding the contract method 0xa4ab2faa.
//
// Solidity: function isBundleAvailable(bytes[] crossChainHashes) view returns(bool)
func (_CrossChain *CrossChainCaller) IsBundleAvailable(opts *bind.CallOpts, crossChainHashes [][]byte) (bool, error) {
	var out []interface{}
	err := _CrossChain.contract.Call(opts, &out, "isBundleAvailable", crossChainHashes)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsBundleAvailable is a free data retrieval call binding the contract method 0xa4ab2faa.
//
// Solidity: function isBundleAvailable(bytes[] crossChainHashes) view returns(bool)
func (_CrossChain *CrossChainSession) IsBundleAvailable(crossChainHashes [][]byte) (bool, error) {
	return _CrossChain.Contract.IsBundleAvailable(&_CrossChain.CallOpts, crossChainHashes)
}

// IsBundleAvailable is a free data retrieval call binding the contract method 0xa4ab2faa.
//
// Solidity: function isBundleAvailable(bytes[] crossChainHashes) view returns(bool)
func (_CrossChain *CrossChainCallerSession) IsBundleAvailable(crossChainHashes [][]byte) (bool, error) {
	return _CrossChain.Contract.IsBundleAvailable(&_CrossChain.CallOpts, crossChainHashes)
}

// IsBundleSaved is a free data retrieval call binding the contract method 0x84154826.
//
// Solidity: function isBundleSaved(bytes32 ) view returns(bool)
func (_CrossChain *CrossChainCaller) IsBundleSaved(opts *bind.CallOpts, arg0 [32]byte) (bool, error) {
	var out []interface{}
	err := _CrossChain.contract.Call(opts, &out, "isBundleSaved", arg0)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsBundleSaved is a free data retrieval call binding the contract method 0x84154826.
//
// Solidity: function isBundleSaved(bytes32 ) view returns(bool)
func (_CrossChain *CrossChainSession) IsBundleSaved(arg0 [32]byte) (bool, error) {
	return _CrossChain.Contract.IsBundleSaved(&_CrossChain.CallOpts, arg0)
}

// IsBundleSaved is a free data retrieval call binding the contract method 0x84154826.
//
// Solidity: function isBundleSaved(bytes32 ) view returns(bool)
func (_CrossChain *CrossChainCallerSession) IsBundleSaved(arg0 [32]byte) (bool, error) {
	return _CrossChain.Contract.IsBundleSaved(&_CrossChain.CallOpts, arg0)
}

// IsWithdrawalSpent is a free data retrieval call binding the contract method 0x2f0cb9e3.
//
// Solidity: function isWithdrawalSpent(bytes32 ) view returns(bool)
func (_CrossChain *CrossChainCaller) IsWithdrawalSpent(opts *bind.CallOpts, arg0 [32]byte) (bool, error) {
	var out []interface{}
	err := _CrossChain.contract.Call(opts, &out, "isWithdrawalSpent", arg0)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsWithdrawalSpent is a free data retrieval call binding the contract method 0x2f0cb9e3.
//
// Solidity: function isWithdrawalSpent(bytes32 ) view returns(bool)
func (_CrossChain *CrossChainSession) IsWithdrawalSpent(arg0 [32]byte) (bool, error) {
	return _CrossChain.Contract.IsWithdrawalSpent(&_CrossChain.CallOpts, arg0)
}

// IsWithdrawalSpent is a free data retrieval call binding the contract method 0x2f0cb9e3.
//
// Solidity: function isWithdrawalSpent(bytes32 ) view returns(bool)
func (_CrossChain *CrossChainCallerSession) IsWithdrawalSpent(arg0 [32]byte) (bool, error) {
	return _CrossChain.Contract.IsWithdrawalSpent(&_CrossChain.CallOpts, arg0)
}

// MerkleMessageBus is a free data retrieval call binding the contract method 0xe874eb20.
//
// Solidity: function merkleMessageBus() view returns(address)
func (_CrossChain *CrossChainCaller) MerkleMessageBus(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _CrossChain.contract.Call(opts, &out, "merkleMessageBus")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// MerkleMessageBus is a free data retrieval call binding the contract method 0xe874eb20.
//
// Solidity: function merkleMessageBus() view returns(address)
func (_CrossChain *CrossChainSession) MerkleMessageBus() (common.Address, error) {
	return _CrossChain.Contract.MerkleMessageBus(&_CrossChain.CallOpts)
}

// MerkleMessageBus is a free data retrieval call binding the contract method 0xe874eb20.
//
// Solidity: function merkleMessageBus() view returns(address)
func (_CrossChain *CrossChainCallerSession) MerkleMessageBus() (common.Address, error) {
	return _CrossChain.Contract.MerkleMessageBus(&_CrossChain.CallOpts)
}

// MessageBus is a free data retrieval call binding the contract method 0xa1a227fa.
//
// Solidity: function messageBus() view returns(address)
func (_CrossChain *CrossChainCaller) MessageBus(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _CrossChain.contract.Call(opts, &out, "messageBus")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// MessageBus is a free data retrieval call binding the contract method 0xa1a227fa.
//
// Solidity: function messageBus() view returns(address)
func (_CrossChain *CrossChainSession) MessageBus() (common.Address, error) {
	return _CrossChain.Contract.MessageBus(&_CrossChain.CallOpts)
}

// MessageBus is a free data retrieval call binding the contract method 0xa1a227fa.
//
// Solidity: function messageBus() view returns(address)
func (_CrossChain *CrossChainCallerSession) MessageBus() (common.Address, error) {
	return _CrossChain.Contract.MessageBus(&_CrossChain.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_CrossChain *CrossChainCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _CrossChain.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_CrossChain *CrossChainSession) Owner() (common.Address, error) {
	return _CrossChain.Contract.Owner(&_CrossChain.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_CrossChain *CrossChainCallerSession) Owner() (common.Address, error) {
	return _CrossChain.Contract.Owner(&_CrossChain.CallOpts)
}

// ExtractNativeValue is a paid mutator transaction binding the contract method 0x6af52662.
//
// Solidity: function extractNativeValue((address,address,uint256,uint64) _msg, bytes32[] proof, bytes32 root) returns()
func (_CrossChain *CrossChainTransactor) ExtractNativeValue(opts *bind.TransactOpts, _msg StructsValueTransferMessage, proof [][32]byte, root [32]byte) (*types.Transaction, error) {
	return _CrossChain.contract.Transact(opts, "extractNativeValue", _msg, proof, root)
}

// ExtractNativeValue is a paid mutator transaction binding the contract method 0x6af52662.
//
// Solidity: function extractNativeValue((address,address,uint256,uint64) _msg, bytes32[] proof, bytes32 root) returns()
func (_CrossChain *CrossChainSession) ExtractNativeValue(_msg StructsValueTransferMessage, proof [][32]byte, root [32]byte) (*types.Transaction, error) {
	return _CrossChain.Contract.ExtractNativeValue(&_CrossChain.TransactOpts, _msg, proof, root)
}

// ExtractNativeValue is a paid mutator transaction binding the contract method 0x6af52662.
//
// Solidity: function extractNativeValue((address,address,uint256,uint64) _msg, bytes32[] proof, bytes32 root) returns()
func (_CrossChain *CrossChainTransactorSession) ExtractNativeValue(_msg StructsValueTransferMessage, proof [][32]byte, root [32]byte) (*types.Transaction, error) {
	return _CrossChain.Contract.ExtractNativeValue(&_CrossChain.TransactOpts, _msg, proof, root)
}

// Initialize is a paid mutator transaction binding the contract method 0x8129fc1c.
//
// Solidity: function initialize() returns()
func (_CrossChain *CrossChainTransactor) Initialize(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _CrossChain.contract.Transact(opts, "initialize")
}

// Initialize is a paid mutator transaction binding the contract method 0x8129fc1c.
//
// Solidity: function initialize() returns()
func (_CrossChain *CrossChainSession) Initialize() (*types.Transaction, error) {
	return _CrossChain.Contract.Initialize(&_CrossChain.TransactOpts)
}

// Initialize is a paid mutator transaction binding the contract method 0x8129fc1c.
//
// Solidity: function initialize() returns()
func (_CrossChain *CrossChainTransactorSession) Initialize() (*types.Transaction, error) {
	return _CrossChain.Contract.Initialize(&_CrossChain.TransactOpts)
}

// PauseWithdrawals is a paid mutator transaction binding the contract method 0xf4cc87ba.
//
// Solidity: function pauseWithdrawals(bool _pause) returns()
func (_CrossChain *CrossChainTransactor) PauseWithdrawals(opts *bind.TransactOpts, _pause bool) (*types.Transaction, error) {
	return _CrossChain.contract.Transact(opts, "pauseWithdrawals", _pause)
}

// PauseWithdrawals is a paid mutator transaction binding the contract method 0xf4cc87ba.
//
// Solidity: function pauseWithdrawals(bool _pause) returns()
func (_CrossChain *CrossChainSession) PauseWithdrawals(_pause bool) (*types.Transaction, error) {
	return _CrossChain.Contract.PauseWithdrawals(&_CrossChain.TransactOpts, _pause)
}

// PauseWithdrawals is a paid mutator transaction binding the contract method 0xf4cc87ba.
//
// Solidity: function pauseWithdrawals(bool _pause) returns()
func (_CrossChain *CrossChainTransactorSession) PauseWithdrawals(_pause bool) (*types.Transaction, error) {
	return _CrossChain.Contract.PauseWithdrawals(&_CrossChain.TransactOpts, _pause)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_CrossChain *CrossChainTransactor) RenounceOwnership(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _CrossChain.contract.Transact(opts, "renounceOwnership")
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_CrossChain *CrossChainSession) RenounceOwnership() (*types.Transaction, error) {
	return _CrossChain.Contract.RenounceOwnership(&_CrossChain.TransactOpts)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_CrossChain *CrossChainTransactorSession) RenounceOwnership() (*types.Transaction, error) {
	return _CrossChain.Contract.RenounceOwnership(&_CrossChain.TransactOpts)
}

// SetChallengePeriod is a paid mutator transaction binding the contract method 0x5d475fdd.
//
// Solidity: function setChallengePeriod(uint256 _delay) returns()
func (_CrossChain *CrossChainTransactor) SetChallengePeriod(opts *bind.TransactOpts, _delay *big.Int) (*types.Transaction, error) {
	return _CrossChain.contract.Transact(opts, "setChallengePeriod", _delay)
}

// SetChallengePeriod is a paid mutator transaction binding the contract method 0x5d475fdd.
//
// Solidity: function setChallengePeriod(uint256 _delay) returns()
func (_CrossChain *CrossChainSession) SetChallengePeriod(_delay *big.Int) (*types.Transaction, error) {
	return _CrossChain.Contract.SetChallengePeriod(&_CrossChain.TransactOpts, _delay)
}

// SetChallengePeriod is a paid mutator transaction binding the contract method 0x5d475fdd.
//
// Solidity: function setChallengePeriod(uint256 _delay) returns()
func (_CrossChain *CrossChainTransactorSession) SetChallengePeriod(_delay *big.Int) (*types.Transaction, error) {
	return _CrossChain.Contract.SetChallengePeriod(&_CrossChain.TransactOpts, _delay)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_CrossChain *CrossChainTransactor) TransferOwnership(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _CrossChain.contract.Transact(opts, "transferOwnership", newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_CrossChain *CrossChainSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _CrossChain.Contract.TransferOwnership(&_CrossChain.TransactOpts, newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_CrossChain *CrossChainTransactorSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _CrossChain.Contract.TransferOwnership(&_CrossChain.TransactOpts, newOwner)
}

// CrossChainInitializedIterator is returned from FilterInitialized and is used to iterate over the raw logs and unpacked data for Initialized events raised by the CrossChain contract.
type CrossChainInitializedIterator struct {
	Event *CrossChainInitialized // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *CrossChainInitializedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(CrossChainInitialized)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(CrossChainInitialized)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *CrossChainInitializedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *CrossChainInitializedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// CrossChainInitialized represents a Initialized event raised by the CrossChain contract.
type CrossChainInitialized struct {
	Version uint64
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterInitialized is a free log retrieval operation binding the contract event 0xc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d2.
//
// Solidity: event Initialized(uint64 version)
func (_CrossChain *CrossChainFilterer) FilterInitialized(opts *bind.FilterOpts) (*CrossChainInitializedIterator, error) {

	logs, sub, err := _CrossChain.contract.FilterLogs(opts, "Initialized")
	if err != nil {
		return nil, err
	}
	return &CrossChainInitializedIterator{contract: _CrossChain.contract, event: "Initialized", logs: logs, sub: sub}, nil
}

// WatchInitialized is a free log subscription operation binding the contract event 0xc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d2.
//
// Solidity: event Initialized(uint64 version)
func (_CrossChain *CrossChainFilterer) WatchInitialized(opts *bind.WatchOpts, sink chan<- *CrossChainInitialized) (event.Subscription, error) {

	logs, sub, err := _CrossChain.contract.WatchLogs(opts, "Initialized")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(CrossChainInitialized)
				if err := _CrossChain.contract.UnpackLog(event, "Initialized", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseInitialized is a log parse operation binding the contract event 0xc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d2.
//
// Solidity: event Initialized(uint64 version)
func (_CrossChain *CrossChainFilterer) ParseInitialized(log types.Log) (*CrossChainInitialized, error) {
	event := new(CrossChainInitialized)
	if err := _CrossChain.contract.UnpackLog(event, "Initialized", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// CrossChainLogCrossChainContractCreatedIterator is returned from FilterLogCrossChainContractCreated and is used to iterate over the raw logs and unpacked data for LogCrossChainContractCreated events raised by the CrossChain contract.
type CrossChainLogCrossChainContractCreatedIterator struct {
	Event *CrossChainLogCrossChainContractCreated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *CrossChainLogCrossChainContractCreatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(CrossChainLogCrossChainContractCreated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(CrossChainLogCrossChainContractCreated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *CrossChainLogCrossChainContractCreatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *CrossChainLogCrossChainContractCreatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// CrossChainLogCrossChainContractCreated represents a LogCrossChainContractCreated event raised by the CrossChain contract.
type CrossChainLogCrossChainContractCreated struct {
	MessageBusAddress common.Address
	Raw               types.Log // Blockchain specific contextual infos
}

// FilterLogCrossChainContractCreated is a free log retrieval operation binding the contract event 0x4c3bb7ff9ee26b36b3b248a5172618e61b9912d8bc9126b7985a4099546a43dc.
//
// Solidity: event LogCrossChainContractCreated(address messageBusAddress)
func (_CrossChain *CrossChainFilterer) FilterLogCrossChainContractCreated(opts *bind.FilterOpts) (*CrossChainLogCrossChainContractCreatedIterator, error) {

	logs, sub, err := _CrossChain.contract.FilterLogs(opts, "LogCrossChainContractCreated")
	if err != nil {
		return nil, err
	}
	return &CrossChainLogCrossChainContractCreatedIterator{contract: _CrossChain.contract, event: "LogCrossChainContractCreated", logs: logs, sub: sub}, nil
}

// WatchLogCrossChainContractCreated is a free log subscription operation binding the contract event 0x4c3bb7ff9ee26b36b3b248a5172618e61b9912d8bc9126b7985a4099546a43dc.
//
// Solidity: event LogCrossChainContractCreated(address messageBusAddress)
func (_CrossChain *CrossChainFilterer) WatchLogCrossChainContractCreated(opts *bind.WatchOpts, sink chan<- *CrossChainLogCrossChainContractCreated) (event.Subscription, error) {

	logs, sub, err := _CrossChain.contract.WatchLogs(opts, "LogCrossChainContractCreated")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(CrossChainLogCrossChainContractCreated)
				if err := _CrossChain.contract.UnpackLog(event, "LogCrossChainContractCreated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogCrossChainContractCreated is a log parse operation binding the contract event 0x4c3bb7ff9ee26b36b3b248a5172618e61b9912d8bc9126b7985a4099546a43dc.
//
// Solidity: event LogCrossChainContractCreated(address messageBusAddress)
func (_CrossChain *CrossChainFilterer) ParseLogCrossChainContractCreated(log types.Log) (*CrossChainLogCrossChainContractCreated, error) {
	event := new(CrossChainLogCrossChainContractCreated)
	if err := _CrossChain.contract.UnpackLog(event, "LogCrossChainContractCreated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// CrossChainOwnershipTransferredIterator is returned from FilterOwnershipTransferred and is used to iterate over the raw logs and unpacked data for OwnershipTransferred events raised by the CrossChain contract.
type CrossChainOwnershipTransferredIterator struct {
	Event *CrossChainOwnershipTransferred // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *CrossChainOwnershipTransferredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(CrossChainOwnershipTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(CrossChainOwnershipTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *CrossChainOwnershipTransferredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *CrossChainOwnershipTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// CrossChainOwnershipTransferred represents a OwnershipTransferred event raised by the CrossChain contract.
type CrossChainOwnershipTransferred struct {
	PreviousOwner common.Address
	NewOwner      common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterOwnershipTransferred is a free log retrieval operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_CrossChain *CrossChainFilterer) FilterOwnershipTransferred(opts *bind.FilterOpts, previousOwner []common.Address, newOwner []common.Address) (*CrossChainOwnershipTransferredIterator, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _CrossChain.contract.FilterLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return &CrossChainOwnershipTransferredIterator{contract: _CrossChain.contract, event: "OwnershipTransferred", logs: logs, sub: sub}, nil
}

// WatchOwnershipTransferred is a free log subscription operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_CrossChain *CrossChainFilterer) WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *CrossChainOwnershipTransferred, previousOwner []common.Address, newOwner []common.Address) (event.Subscription, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _CrossChain.contract.WatchLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(CrossChainOwnershipTransferred)
				if err := _CrossChain.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOwnershipTransferred is a log parse operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_CrossChain *CrossChainFilterer) ParseOwnershipTransferred(log types.Log) (*CrossChainOwnershipTransferred, error) {
	event := new(CrossChainOwnershipTransferred)
	if err := _CrossChain.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// CrossChainWithdrawalsPausedIterator is returned from FilterWithdrawalsPaused and is used to iterate over the raw logs and unpacked data for WithdrawalsPaused events raised by the CrossChain contract.
type CrossChainWithdrawalsPausedIterator struct {
	Event *CrossChainWithdrawalsPaused // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *CrossChainWithdrawalsPausedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(CrossChainWithdrawalsPaused)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(CrossChainWithdrawalsPaused)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *CrossChainWithdrawalsPausedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *CrossChainWithdrawalsPausedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// CrossChainWithdrawalsPaused represents a WithdrawalsPaused event raised by the CrossChain contract.
type CrossChainWithdrawalsPaused struct {
	Paused bool
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterWithdrawalsPaused is a free log retrieval operation binding the contract event 0x129d33f7856617012aed60524381cfff7233cfc57df58d9f6613a5593d3dc218.
//
// Solidity: event WithdrawalsPaused(bool paused)
func (_CrossChain *CrossChainFilterer) FilterWithdrawalsPaused(opts *bind.FilterOpts) (*CrossChainWithdrawalsPausedIterator, error) {

	logs, sub, err := _CrossChain.contract.FilterLogs(opts, "WithdrawalsPaused")
	if err != nil {
		return nil, err
	}
	return &CrossChainWithdrawalsPausedIterator{contract: _CrossChain.contract, event: "WithdrawalsPaused", logs: logs, sub: sub}, nil
}

// WatchWithdrawalsPaused is a free log subscription operation binding the contract event 0x129d33f7856617012aed60524381cfff7233cfc57df58d9f6613a5593d3dc218.
//
// Solidity: event WithdrawalsPaused(bool paused)
func (_CrossChain *CrossChainFilterer) WatchWithdrawalsPaused(opts *bind.WatchOpts, sink chan<- *CrossChainWithdrawalsPaused) (event.Subscription, error) {

	logs, sub, err := _CrossChain.contract.WatchLogs(opts, "WithdrawalsPaused")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(CrossChainWithdrawalsPaused)
				if err := _CrossChain.contract.UnpackLog(event, "WithdrawalsPaused", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseWithdrawalsPaused is a log parse operation binding the contract event 0x129d33f7856617012aed60524381cfff7233cfc57df58d9f6613a5593d3dc218.
//
// Solidity: event WithdrawalsPaused(bool paused)
func (_CrossChain *CrossChainFilterer) ParseWithdrawalsPaused(log types.Log) (*CrossChainWithdrawalsPaused, error) {
	event := new(CrossChainWithdrawalsPaused)
	if err := _CrossChain.contract.UnpackLog(event, "WithdrawalsPaused", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
