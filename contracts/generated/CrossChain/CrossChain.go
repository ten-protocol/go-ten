// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package CrossChain

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
	_ = abi.ConvertType
)

// CrossChainMetaData contains all meta data concerning the CrossChain contract.
var CrossChainMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"InvalidInitialization\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotInitializing\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ReentrancyGuardReentrantCall\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"version\",\"type\":\"uint64\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"messageBusAddress\",\"type\":\"address\"}],\"name\":\"LogCrossChainContractCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"paused\",\"type\":\"bool\"}],\"name\":\"WithdrawalsPaused\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes[]\",\"name\":\"crossChainHashes\",\"type\":\"bytes[]\"}],\"name\":\"isBundleAvailable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"isBundleSaved\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"isWithdrawalSpent\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"merkleMessageBus\",\"outputs\":[{\"internalType\":\"contractIMerkleTreeMessageBus\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"messageBus\",\"outputs\":[{\"internalType\":\"contractIMessageBus\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_pause\",\"type\":\"bool\"}],\"name\":\"pauseWithdrawals\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
	Bin: "0x6080604052348015600e575f5ffd5b50601633601a565b608a565b7f9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c19930080546001600160a01b031981166001600160a01b03848116918217845560405192169182907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0905f90a3505050565b61330c806100975f395ff3fe608060405234801561000f575f5ffd5b50600436106100b9575f3560e01c8063a4ab2faa11610072578063e874eb2011610058578063e874eb201461019f578063f2fde38b146101b2578063f4cc87ba146101c5575f5ffd5b8063a4ab2faa14610179578063c4d66de81461018c575f5ffd5b806384154826116100a257806384154826146100ff5780638da5cb5b14610121578063a1a227fa14610159575f5ffd5b80632f0cb9e3146100bd578063715018a6146100f5575b5f5ffd5b6100df6100cb36600461075f565b60046020525f908152604090205460ff1681565b6040516100ec919061078d565b60405180910390f35b6100fd6101d8565b005b6100df61010d36600461075f565b60056020525f908152604090205460ff1681565b7f9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c199300546001600160a01b03166040516100ec91906107b4565b60025461016c906001600160a01b031681565b6040516100ec91906107df565b6100df61018736600461098c565b6101eb565b6100fd61019a3660046109e0565b610267565b60035461016c906001600160a01b031681565b6100fd6101c03660046109e0565b6104d7565b6100fd6101d3366004610a10565b610536565b6101e0610586565b6101e95f6105fa565b565b5f80805b835181101561024f578184828151811061020b5761020b610a2d565b602002602001015161021c90610a4a565b60405160200161022d929190610a88565b60408051601f19818403018152919052805160209091012091506001016101ef565b505f9081526005602052604090205460ff1692915050565b7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00805468010000000000000000810460ff16159067ffffffffffffffff165f811580156102b15750825b90505f8267ffffffffffffffff1660011480156102cd5750303b155b9050811580156102db575080155b15610312576040517ff92ee8a900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b845467ffffffffffffffff19166001178555831561034657845468ff00000000000000001916680100000000000000001785555b61034f86610677565b610357610688565b60405161036390610735565b604051809103905ff08015801561037c573d5f5f3e3d5ffd5b506003805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b039290921691821790556040517f485cc95500000000000000000000000000000000000000000000000000000000815263485cc955906103e59089903090600401610aa3565b5f604051808303815f87803b1580156103fc575f5ffd5b505af115801561040e573d5f5f3e3d5ffd5b50506003546002805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0390921691821790555f805460ff191690556040517f4c3bb7ff9ee26b36b3b248a5172618e61b9912d8bc9126b7985a4099546a43dc935061047792506107b4565b60405180910390a183156104cf57845468ff0000000000000000191685556040517fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d2906104c690600190610ad8565b60405180910390a15b505050505050565b6104df610586565b6001600160a01b03811661052a575f6040517f1e4fbdf700000000000000000000000000000000000000000000000000000000815260040161052191906107b4565b60405180910390fd5b610533816105fa565b50565b61053e610586565b5f805460ff19168215151790556040517f129d33f7856617012aed60524381cfff7233cfc57df58d9f6613a5593d3dc2189061057b90839061078d565b60405180910390a150565b336105b87f9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c199300546001600160a01b031690565b6001600160a01b0316146101e957336040517f118cdaa700000000000000000000000000000000000000000000000000000000815260040161052191906107b4565b7f9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c199300805473ffffffffffffffffffffffffffffffffffffffff1981166001600160a01b03848116918217845560405192169182907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0905f90a3505050565b61067f610698565b610533816106ff565b610690610698565b6101e9610707565b7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a005468010000000000000000900460ff166101e9576040517fd7e6bcf800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6104df610698565b61070f610698565b60017f9b779b17422d0df92223018b32b4d1fa46e071723d6817e2486d003becc55f0055565b6127f080610ae783390190565b805b8114610533575f5ffd5b803561075981610742565b92915050565b5f60208284031215610772576107725f5ffd5b61077c838361074e565b9392505050565b8015155b82525050565b602081016107598284610783565b5f6001600160a01b038216610759565b6107878161079b565b6020810161075982846107ab565b5f6107598261079b565b5f610759826107c2565b610787816107cc565b6020810161075982846107d6565b634e487b7160e01b5f52604160045260245ffd5b601f19601f830116810181811067ffffffffffffffff82111715610827576108276107ed565b6040525050565b5f61083860405190565b90506108448282610801565b919050565b5f67ffffffffffffffff821115610862576108626107ed565b5060209081020190565b5f67ffffffffffffffff821115610885576108856107ed565b601f19601f83011660200192915050565b82818337505f910152565b5f6108b36108ae8461086c565b61082e565b90508281528383830111156108c9576108c95f5ffd5b61077c836020830184610896565b5f82601f8301126108e9576108e95f5ffd5b61077c838335602085016108a1565b5f6109056108ae84610849565b83815290506020808201908402830185811115610923576109235f5ffd5b835b8181101561096157803567ffffffffffffffff811115610946576109465f5ffd5b610952888288016108d7565b84525060209283019201610925565b5050509392505050565b5f82601f83011261097d5761097d5f5ffd5b61077c838335602085016108f8565b5f6020828403121561099f5761099f5f5ffd5b813567ffffffffffffffff8111156109b8576109b85f5ffd5b6109c48482850161096b565b949350505050565b6107448161079b565b8035610759816109cc565b5f602082840312156109f3576109f35f5ffd5b61077c83836109d5565b801515610744565b8035610759816109fd565b5f60208284031215610a2357610a235f5ffd5b61077c8383610a05565b634e487b7160e01b5f52603260045260245ffd5b5f610759825190565b5f610a53825190565b60208301610a6081610a41565b9250506020811015610a7c575f1960086020839003021b821691505b50919050565b80610787565b60408101610a968285610a82565b61077c6020830184610a82565b60408101610ab182856107ab565b61077c60208301846107ab565b5f67ffffffffffffffff8216610759565b61078781610abe565b602081016107598284610acf56fe6080604052348015600e575f5ffd5b50601633601a565b608a565b7f9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c19930080546001600160a01b031981166001600160a01b03848116918217845560405192169182907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0905f90a3505050565b612759806100975f395ff3fe60806040526004361061019f575f3560e01c80638da5cb5b116100e0578063b1454caa11610089578063d547741f11610063578063d547741f14610539578063e138a8d214610558578063f2fde38b14610577578063fb894029146105965761019f565b8063b1454caa146104db578063b201246f146104fb578063b6aed0cb1461051a5761019f565b8063a217fddf116100ba578063a217fddf14610476578063ab53bddc14610489578063ad7805e8146104a85761019f565b80638da5cb5b146103b057806391d14854146103f45780639730886d146104575761019f565b8063248a9ca31161014d57806336568abe1161012757806336568abe1461033f57806336d2da901461035e578063485cc9551461037d578063715018a61461039c5761019f565b8063248a9ca3146102b45780632f2ff15d1461030157806333a88c72146103205761019f565b80630fcfbd111161017e5780630fcfbd11146102555780630fe9188e146102745780631050afdd146102955761019f565b8062a1b815146101cc57806301ffc9a7146101f657806302b4df1914610222575b3480156101aa575f5ffd5b5060405162461bcd60e51b81526004016101c3906115fc565b60405180910390fd5b3480156101d7575f5ffd5b506101e06105b5565b6040516101ed9190611614565b60405180910390f35b348015610201575f5ffd5b50610215610210366004611643565b61063e565b6040516101ed9190611668565b34801561022d575f5ffd5b506101e07f65c4b771cce18ff228842b3883a73079ee3e76bd08965f6dadb7cb56dbf6e19481565b348015610260575f5ffd5b506101e061026f36600461168f565b6106a6565b34801561027f575f5ffd5b5061029361028e3660046116d8565b610703565b005b3480156102a0575f5ffd5b506102936102af366004611719565b61076a565b3480156102bf575f5ffd5b506101e06102ce3660046116d8565b5f9081527f02dd7bc7dec4dceedda775e58dd541e08a116c6c53815c0bd028192f7b626800602052604090206001015490565b34801561030c575f5ffd5b5061029361031b366004611736565b6107a2565b34801561032b575f5ffd5b5061021561033a36600461168f565b6107eb565b34801561034a575f5ffd5b50610293610359366004611736565b61083b565b348015610369575f5ffd5b50610293610378366004611719565b61088c565b348015610388575f5ffd5b5061029361039736600461176c565b610903565b3480156103a7575f5ffd5b50610293610aad565b3480156103bb575f5ffd5b507f9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c199300546001600160a01b03166040516101ed9190611793565b3480156103ff575f5ffd5b5061021561040e366004611736565b5f9182527f02dd7bc7dec4dceedda775e58dd541e08a116c6c53815c0bd028192f7b626800602090815260408084206001600160a01b0393909316845291905290205460ff1690565b348015610462575f5ffd5b506102936104713660046117a1565b610ac0565b348015610481575f5ffd5b506101e05f81565b348015610494575f5ffd5b506102936104a33660046117ea565b610c25565b3480156104b3575f5ffd5b506101e07fe0d563514842a8c29151c49cd2698127f54dd344a9b2c74a42fe9be3e305fe9881565b6104ee6104e9366004611890565b610ced565b6040516101ed9190611918565b348015610506575f5ffd5b50610293610515366004611980565b610df5565b348015610525575f5ffd5b506102936105343660046119e7565b610ef3565b348015610544575f5ffd5b50610293610553366004611736565b610f5a565b348015610563575f5ffd5b50610293610572366004611a05565b610f9d565b348015610582575f5ffd5b50610293610591366004611719565b6110e4565b3480156105a1575f5ffd5b506102936105b0366004611719565b61113a565b600354604080517f1a90a21900000000000000000000000000000000000000000000000000000000815290515f926001600160a01b031691631a90a2199160048083019260209291908290030181865afa158015610615573d5f5f3e3d5ffd5b505050506040513d601f19601f820116820180604052508101906106399190611a88565b905090565b5f6001600160e01b031982167f7965db0b0000000000000000000000000000000000000000000000000000000014806106a057507f01ffc9a7000000000000000000000000000000000000000000000000000000006001600160e01b03198316145b92915050565b5f5f826040516020016106b99190611c3a565b60408051601f1981840301815291815281516020928301205f81815292839052912054909150806106fc5760405162461bcd60e51b81526004016101c390611c89565b9392505050565b7f65c4b771cce18ff228842b3883a73079ee3e76bd08965f6dadb7cb56dbf6e19461072d8161116e565b5f8281526004602052604081205490036107595760405162461bcd60e51b81526004016101c390611ccb565b505f90815260046020526040812055565b5f6107748161116e565b61079e7f65c4b771cce18ff228842b3883a73079ee3e76bd08965f6dadb7cb56dbf6e19483610f5a565b5050565b5f8281527f02dd7bc7dec4dceedda775e58dd541e08a116c6c53815c0bd028192f7b62680060205260409020600101546107db8161116e565b6107e58383611178565b50505050565b5f5f826040516020016107fe9190611c3a565b60408051601f1981840301815291815281516020928301205f8181529283905291205490915080158015906108335750428111155b949350505050565b6001600160a01b038116331461087d576040517f6697b23200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6108878282611244565b505050565b6108946112e8565b5f816001600160a01b0316476040515f6040518083038185875af1925050503d805f81146108dd576040519150601f19603f3d011682016040523d82523d5f602084013e6108e2565b606091505b505090508061079e5760405162461bcd60e51b81526004016101c390611d0d565b7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00805468010000000000000000810460ff16159067ffffffffffffffff165f8115801561094d5750825b90505f8267ffffffffffffffff1660011480156109695750303b155b905081158015610977575080155b156109ae576040517ff92ee8a900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b845467ffffffffffffffff1916600117855583156109e257845468ff00000000000000001916680100000000000000001785555b6109eb8761135c565b6109f361136d565b6109fd5f88611178565b50610a287f65c4b771cce18ff228842b3883a73079ee3e76bd08965f6dadb7cb56dbf6e19488611178565b50610a537fe0d563514842a8c29151c49cd2698127f54dd344a9b2c74a42fe9be3e305fe9887611178565b508315610aa457845468ff0000000000000000191685556040517fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d290610a9b90600190611d40565b60405180910390a15b50505050505050565b610ab56112e8565b610abe5f611375565b565b5f610acc600130611d62565b9050610aff7f9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c199300546001600160a01b031690565b6001600160a01b0316336001600160a01b03161480610b265750336001600160a01b038216145b610b425760405162461bcd60e51b81526004016101c390611db7565b5f610b4d8342611dc7565b90505f84604051602001610b619190611c3a565b60408051601f1981840301815291815281516020928301205f8181529283905291205490915015610ba45760405162461bcd60e51b81526004016101c390611e32565b5f81815260208181526040822084905560019190610bc490880188611719565b6001600160a01b0316815260208101919091526040015f90812090610bef6080880160608901611e42565b63ffffffff1681526020808201929092526040015f9081208054600181018255908252919020869160040201610aa48282612240565b5f610c31600130611d62565b9050610c647f9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c199300546001600160a01b031690565b6001600160a01b0316336001600160a01b03161480610c8b5750336001600160a01b038216145b610ca75760405162461bcd60e51b81526004016101c390611db7565b826001600160a01b03167fcd9850463422a7449c406a036e35e5edb6fbe35a64c9f12a2354be98a750c0d383604051610ce09190611614565b60405180910390a2505050565b6003545f906001600160a01b031615610d9e575f610d096105b5565b905080341015610d2b5760405162461bcd60e51b81526004016101c3906122a2565b6003546040515f916001600160a01b03169083908381818185875af1925050503d805f8114610d75576040519150601f19603f3d011682016040523d82523d5f602084013e610d7a565b606091505b5050905080610d9b5760405162461bcd60e51b81526004016101c39061230a565b50505b610da7336113fd565b90507fb93c37389233beb85a3a726c3f15c2d15533ee74cb602f20f490dfffef77593733828888888888604051610de4979695949392919061231a565b60405180910390a195945050505050565b5f818152600460205260408120549003610e215760405162461bcd60e51b81526004016101c3906123d5565b5f81815260046020526040902054421015610e4e5760405162461bcd60e51b81526004016101c390612421565b5f84604051602001610e6091906124a5565b60405160208183030381529060405280519060200120604051602001610e8691906124e5565b604051602081830303815290604052805190602001209050610ed084848484604051602001610eb5919061250a565b6040516020818303038152906040528051906020012061145a565b610eec5760405162461bcd60e51b81526004016101c390612574565b5050505050565b7f65c4b771cce18ff228842b3883a73079ee3e76bd08965f6dadb7cb56dbf6e194610f1d8161116e565b5f8381526004602052604090205415610f485760405162461bcd60e51b81526004016101c3906125dc565b505f9182526004602052604090912055565b5f8281527f02dd7bc7dec4dceedda775e58dd541e08a116c6c53815c0bd028192f7b6268006020526040902060010154610f938161116e565b6107e58383611244565b5f818152600460205260408120549003610fc95760405162461bcd60e51b81526004016101c3906123d5565b5f81815260046020526040902054421015610ff65760405162461bcd60e51b81526004016101c390612421565b5f6110046020860186611719565b61101460408701602088016125ec565b6110246060880160408901611e42565b6110346080890160608a01611e42565b61104160808a018a611f74565b61105160c08c0160a08d01612609565b604051602001611067979695949392919061231a565b6040516020818303038152906040528051906020012090505f816040516020016110919190612658565b6040516020818303038152906040528051906020012090506110c085858584604051602001610eb5919061250a565b6110dc5760405162461bcd60e51b81526004016101c3906126c0565b505050505050565b6110ec6112e8565b6001600160a01b03811661112e575f6040517f1e4fbdf70000000000000000000000000000000000000000000000000000000081526004016101c39190611793565b61113781611375565b50565b5f6111448161116e565b61079e7f65c4b771cce18ff228842b3883a73079ee3e76bd08965f6dadb7cb56dbf6e194836107a2565b6111378133611471565b5f8281527f02dd7bc7dec4dceedda775e58dd541e08a116c6c53815c0bd028192f7b626800602081815260408084206001600160a01b038616855290915282205460ff1661123b575f848152602082815260408083206001600160a01b03871684529091529020805460ff191660011790556111f13390565b6001600160a01b0316836001600160a01b0316857f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a460019150506106a0565b5f9150506106a0565b5f8281527f02dd7bc7dec4dceedda775e58dd541e08a116c6c53815c0bd028192f7b626800602081815260408084206001600160a01b038616855290915282205460ff161561123b575f848152602082815260408083206001600160a01b0387168085529252808320805460ff1916905551339287917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a460019150506106a0565b3361131a7f9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c199300546001600160a01b031690565b6001600160a01b031614610abe57336040517f118cdaa70000000000000000000000000000000000000000000000000000000081526004016101c39190611793565b6113646114ef565b61113781611556565b610abe6114ef565b7f9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c19930080547fffffffffffffffffffffffff000000000000000000000000000000000000000081166001600160a01b03848116918217845560405192169182907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0905f90a3505050565b6001600160a01b0381165f908152600260205260408120805467ffffffffffffffff16916001919061142f83856126d0565b92506101000a81548167ffffffffffffffff021916908367ffffffffffffffff160217905550919050565b5f8261146786868561155e565b1495945050505050565b5f8281527f02dd7bc7dec4dceedda775e58dd541e08a116c6c53815c0bd028192f7b626800602090815260408083206001600160a01b038516845290915290205460ff1661079e5780826040517fe2517d3f0000000000000000000000000000000000000000000000000000000081526004016101c39291906126f4565b7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a005468010000000000000000900460ff16610abe576040517fd7e6bcf800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6110ec6114ef565b5f81815b848110156115965761158c828787848181106115805761158061270f565b9050602002013561159f565b9150600101611562565b50949350505050565b5f8183106115b9575f8281526020849052604090206106fc565b505f9182526020526040902090565b600b8152602081017f756e737570706f72746564000000000000000000000000000000000000000000815290505b60200190565b602080825281016106a0816115c8565b805b82525050565b602081016106a0828461160c565b6001600160e01b031981165b8114611137575f5ffd5b80356106a081611622565b5f60208284031215611656576116565f5ffd5b6106fc8383611638565b80151561160e565b602081016106a08284611660565b5f60c08284031215611689576116895f5ffd5b50919050565b5f602082840312156116a2576116a25f5ffd5b813567ffffffffffffffff8111156116bb576116bb5f5ffd5b61083384828501611676565b8061162e565b80356106a0816116c7565b5f602082840312156116eb576116eb5f5ffd5b6106fc83836116cd565b5f6001600160a01b0382166106a0565b61162e816116f5565b80356106a081611705565b5f6020828403121561172c5761172c5f5ffd5b6106fc838361170e565b5f5f6040838503121561174a5761174a5f5ffd5b61175484846116cd565b9150611763846020850161170e565b90509250929050565b5f5f60408385031215611780576117805f5ffd5b611754848461170e565b61160e816116f5565b602081016106a0828461178a565b5f5f604083850312156117b5576117b55f5ffd5b823567ffffffffffffffff8111156117ce576117ce5f5ffd5b6117da85828601611676565b92505061176384602085016116cd565b5f5f604083850312156117fe576117fe5f5ffd5b611808848461170e565b915061176384602085016116cd565b63ffffffff811661162e565b80356106a081611817565b5f5f83601f840112611841576118415f5ffd5b50813567ffffffffffffffff81111561185b5761185b5f5ffd5b602083019150836001820283011115611875576118755f5ffd5b9250929050565b60ff811661162e565b80356106a08161187c565b5f5f5f5f5f608086880312156118a7576118a75f5ffd5b6118b18787611823565b94506118c08760208801611823565b9350604086013567ffffffffffffffff8111156118de576118de5f5ffd5b6118ea8882890161182e565b93509350506118fc8760608801611885565b90509295509295909350565b67ffffffffffffffff811661160e565b602081016106a08284611908565b5f60808284031215611689576116895f5ffd5b5f5f83601f84011261194c5761194c5f5ffd5b50813567ffffffffffffffff811115611966576119665f5ffd5b602083019150836020820283011115611875576118755f5ffd5b5f5f5f5f60c08587031215611996576119965f5ffd5b6119a08686611926565b9350608085013567ffffffffffffffff8111156119be576119be5f5ffd5b6119ca87828801611939565b93509350506119dc8660a087016116cd565b905092959194509250565b5f5f604083850312156119fb576119fb5f5ffd5b61180884846116cd565b5f5f5f5f60608587031215611a1b57611a1b5f5ffd5b843567ffffffffffffffff811115611a3457611a345f5ffd5b611a4087828801611676565b945050602085013567ffffffffffffffff811115611a5f57611a5f5f5ffd5b611a6b87828801611939565b93509350506119dc86604087016116cd565b80516106a0816116c7565b5f60208284031215611a9b57611a9b5f5ffd5b6106fc8383611a7d565b505f6106a0602083018361170e565b67ffffffffffffffff811661162e565b80356106a081611ab4565b505f6106a06020830183611ac4565b505f6106a06020830183611823565b63ffffffff811661160e565b5f808335601e1936859003018112611b1257611b125f5ffd5b830160208101925035905067ffffffffffffffff811115611b3457611b345f5ffd5b36819003821315611875576118755f5ffd5b82818337505f910152565b818352602083019250611b65828483611b46565b50601f01601f19160190565b505f6106a06020830183611885565b60ff811661160e565b5f60c08301611b988380611aa5565b611ba2858261178a565b50611bb06020840184611acf565b611bbd6020860182611908565b50611bcb6040840184611ade565b611bd86040860182611aed565b50611be66060840184611ade565b611bf36060860182611aed565b50611c016080840184611af9565b8583036080870152611c14838284611b51565b92505050611c2560a0840184611b71565b611c3260a0860182611b80565b509392505050565b602080825281016106fc8184611b89565b60218152602081017f54686973206d65737361676520776173206e65766572207375626d69747465648152601760f91b602082015290505b60400190565b602080825281016106a081611c4b565b601a8152602081017f537461746520726f6f7420646f6573206e6f742065786973742e000000000000815290506115f6565b602080825281016106a081611c99565b60148152602081017f6661696c65642073656e64696e672076616c7565000000000000000000000000815290506115f6565b602080825281016106a081611cdb565b5f6106a082611d2a565b90565b67ffffffffffffffff1690565b61160e81611d1d565b602081016106a08284611d37565b634e487b7160e01b5f52601160045260245ffd5b6001600160a01b039182169190811690828203908111156106a0576106a0611d4e565b60118152602081017f4e6f74206f776e6572206f722073656c66000000000000000000000000000000815290506115f6565b602080825281016106a081611d85565b808201808211156106a0576106a0611d4e565b60218152602081017f4d657373616765207375626d6974746564206d6f7265207468616e206f6e636581527f210000000000000000000000000000000000000000000000000000000000000060208201529050611c83565b602080825281016106a081611dda565b5f60208284031215611e5557611e555f5ffd5b6106fc8383611823565b5f81356106a081611705565b5f6001600160a01b03835b81169019929092169190911792915050565b5f6106a0826116f5565b5f6106a082611e88565b611ea582611e92565b611eb0818354611e6b565b8255505050565b5f81356106a081611ab4565b5f7bffffffffffffffff0000000000000000000000000000000000000000611e768460a01b90565b5f6106a067ffffffffffffffff8316611d2a565b611f0882611eeb565b611eb0818354611ec3565b5f81356106a081611817565b5f6001600160e01b0319611e768460e01b90565b5f63ffffffff82166106a0565b611f4982611f33565b611eb0818354611f1f565b5f63ffffffff83611e76565b611f6982611f33565b611eb0818354611f54565b5f808335601e1936859003018112611f8d57611f8d5f5ffd5b8301915050803567ffffffffffffffff811115611fab57611fab5f5ffd5b602082019150600181023603821315611875576118755f5ffd5b634e487b7160e01b5f52604160045260245ffd5b634e487b7160e01b5f52602260045260245ffd5b60028104600182168061200157607f821691505b60208210810361168957611689611fd9565b5f6106a0611d278381565b61202783612013565b81545f1960089490940293841b1916921b91909117905550565b5f61088781848461201e565b8181101561079e5761205f5f82612041565b60010161204d565b601f821115610887575f818152602090206020601f8501048101602085101561208d5750805b610eec6020601f86010483018261204d565b8267ffffffffffffffff8111156120b8576120b8611fc5565b6120c28254611fed565b6120cd828285612067565b505f601f8211600181146120ff575f83156120e85750848201355b5f19600885021c19811660028502178555506110dc565b5f84815260208120601f198516915b8281101561212e578785013582556020948501946001909201910161210e565b508482101561214a575f196008601f8716021c19878501351681555b5050505060020260010190555050565b61088783838361209f565b5f81356106a08161187c565b5f60ff82166106a0565b61218482612171565b815460ff191660ff821617611eb0565b8082806121a081611e5f565b90506121ac8184611e9c565b505060208301806121bc82611eb7565b90506121c88184611eff565b505060408301806121d882611f13565b90506121e48184611f40565b50505060608201806121f582611f13565b90506122048160018501611f60565b50506122136080830183611f74565b61222181836002860161215a565b505060a082018061223182612165565b90506107e5816003850161217b565b61079e8282612194565b60258152602081017f496e73756666696369656e742066756e647320746f207075626c697368206d6581527f737361676500000000000000000000000000000000000000000000000000000060208201529050611c83565b602080825281016106a08161224a565b60248152602081017f4661696c656420746f2073656e64206665657320746f206665657320636f6e7481527f726163740000000000000000000000000000000000000000000000000000000060208201529050611c83565b602080825281016106a0816122b2565b60c08101612328828a61178a565b6123356020830189611908565b6123426040830188611aed565b61234f6060830187611aed565b8181036080830152612362818587611b51565b905061237160a0830184611b80565b98975050505050505050565b602a8152602081017f526f6f74206973206e6f74207075626c6973686564206f6e2074686973206d6581527f7373616765206275732e0000000000000000000000000000000000000000000060208201529050611c83565b602080825281016106a08161237d565b60218152602081017f526f6f74206973206e6f7420636f6e736964657265642066696e616c207965748152601760f91b60208201529050611c83565b602080825281016106a0816123e5565b505f6106a060208301836116cd565b61244a8180611aa5565b612454838261178a565b506124626020820182611aa5565b61246f602084018261178a565b5061247d6040820182612431565b61248a604084018261160c565b506124986060820182611acf565b6108876060840182611908565b608081016106a08284612440565b60018152602081017f7600000000000000000000000000000000000000000000000000000000000000815290506115f6565b604080825281016124f5816124b3565b90506106a0602083018461160c565b8061160e565b6125148183612504565b602001919050565b60338152602081017f496e76616c696420696e636c7573696f6e2070726f6f6620666f722076616c7581527f65207472616e73666572206d6573736167652e0000000000000000000000000060208201529050611c83565b602080825281016106a08161251c565b60258152602081017f526f6f7420616c726561647920616464656420746f20746865206d657373616781527f652062757300000000000000000000000000000000000000000000000000000060208201529050611c83565b602080825281016106a081612584565b5f602082840312156125ff576125ff5f5ffd5b6106fc8383611ac4565b5f6020828403121561261c5761261c5f5ffd5b6106fc8383611885565b60018152602081017f6d00000000000000000000000000000000000000000000000000000000000000815290506115f6565b604080825281016124f581612626565b60308152602081017f496e76616c696420696e636c7573696f6e2070726f6f6620666f722063726f7381527f7320636861696e206d6573736167652e0000000000000000000000000000000060208201529050611c83565b602080825281016106a081612668565b67ffffffffffffffff9182169190811690828201908111156106a0576106a0611d4e565b60408101612702828561178a565b6106fc602083018461160c565b634e487b7160e01b5f52603260045260245ffdfea2646970667358221220a321f2176dd61b5a2a3abc3f0bda60a735a2de974b2d43454433a23ba19b516c64736f6c634300081c0033a26469706673582212201b2377a2cd03a7f62504a0361d7634d02a27e71fc3f33f3637a30dd5e927449964736f6c634300081c0033",
}

// CrossChainABI is the input ABI used to generate the binding from.
// Deprecated: Use CrossChainMetaData.ABI instead.
var CrossChainABI = CrossChainMetaData.ABI

// CrossChainBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use CrossChainMetaData.Bin instead.
var CrossChainBin = CrossChainMetaData.Bin

// DeployCrossChain deploys a new Ethereum contract, binding an instance of CrossChain to it.
func DeployCrossChain(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *CrossChain, error) {
	parsed, err := CrossChainMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(CrossChainBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &CrossChain{CrossChainCaller: CrossChainCaller{contract: contract}, CrossChainTransactor: CrossChainTransactor{contract: contract}, CrossChainFilterer: CrossChainFilterer{contract: contract}}, nil
}

// CrossChain is an auto generated Go binding around an Ethereum contract.
type CrossChain struct {
	CrossChainCaller     // Read-only binding to the contract
	CrossChainTransactor // Write-only binding to the contract
	CrossChainFilterer   // Log filterer for contract events
}

// CrossChainCaller is an auto generated read-only Go binding around an Ethereum contract.
type CrossChainCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// CrossChainTransactor is an auto generated write-only Go binding around an Ethereum contract.
type CrossChainTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// CrossChainFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type CrossChainFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// CrossChainSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type CrossChainSession struct {
	Contract     *CrossChain       // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// CrossChainCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type CrossChainCallerSession struct {
	Contract *CrossChainCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts     // Call options to use throughout this session
}

// CrossChainTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type CrossChainTransactorSession struct {
	Contract     *CrossChainTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts     // Transaction auth options to use throughout this session
}

// CrossChainRaw is an auto generated low-level Go binding around an Ethereum contract.
type CrossChainRaw struct {
	Contract *CrossChain // Generic contract binding to access the raw methods on
}

// CrossChainCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type CrossChainCallerRaw struct {
	Contract *CrossChainCaller // Generic read-only contract binding to access the raw methods on
}

// CrossChainTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type CrossChainTransactorRaw struct {
	Contract *CrossChainTransactor // Generic write-only contract binding to access the raw methods on
}

// NewCrossChain creates a new instance of CrossChain, bound to a specific deployed contract.
func NewCrossChain(address common.Address, backend bind.ContractBackend) (*CrossChain, error) {
	contract, err := bindCrossChain(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &CrossChain{CrossChainCaller: CrossChainCaller{contract: contract}, CrossChainTransactor: CrossChainTransactor{contract: contract}, CrossChainFilterer: CrossChainFilterer{contract: contract}}, nil
}

// NewCrossChainCaller creates a new read-only instance of CrossChain, bound to a specific deployed contract.
func NewCrossChainCaller(address common.Address, caller bind.ContractCaller) (*CrossChainCaller, error) {
	contract, err := bindCrossChain(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &CrossChainCaller{contract: contract}, nil
}

// NewCrossChainTransactor creates a new write-only instance of CrossChain, bound to a specific deployed contract.
func NewCrossChainTransactor(address common.Address, transactor bind.ContractTransactor) (*CrossChainTransactor, error) {
	contract, err := bindCrossChain(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &CrossChainTransactor{contract: contract}, nil
}

// NewCrossChainFilterer creates a new log filterer instance of CrossChain, bound to a specific deployed contract.
func NewCrossChainFilterer(address common.Address, filterer bind.ContractFilterer) (*CrossChainFilterer, error) {
	contract, err := bindCrossChain(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &CrossChainFilterer{contract: contract}, nil
}

// bindCrossChain binds a generic wrapper to an already deployed contract.
func bindCrossChain(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := CrossChainMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_CrossChain *CrossChainRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _CrossChain.Contract.CrossChainCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_CrossChain *CrossChainRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _CrossChain.Contract.CrossChainTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_CrossChain *CrossChainRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _CrossChain.Contract.CrossChainTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_CrossChain *CrossChainCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _CrossChain.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_CrossChain *CrossChainTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _CrossChain.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_CrossChain *CrossChainTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _CrossChain.Contract.contract.Transact(opts, method, params...)
}

// IsBundleAvailable is a free data retrieval call binding the contract method 0xa4ab2faa.
//
// Solidity: function isBundleAvailable(bytes[] crossChainHashes) view returns(bool)
func (_CrossChain *CrossChainCaller) IsBundleAvailable(opts *bind.CallOpts, crossChainHashes [][]byte) (bool, error) {
	var out []interface{}
	err := _CrossChain.contract.Call(opts, &out, "isBundleAvailable", crossChainHashes)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsBundleAvailable is a free data retrieval call binding the contract method 0xa4ab2faa.
//
// Solidity: function isBundleAvailable(bytes[] crossChainHashes) view returns(bool)
func (_CrossChain *CrossChainSession) IsBundleAvailable(crossChainHashes [][]byte) (bool, error) {
	return _CrossChain.Contract.IsBundleAvailable(&_CrossChain.CallOpts, crossChainHashes)
}

// IsBundleAvailable is a free data retrieval call binding the contract method 0xa4ab2faa.
//
// Solidity: function isBundleAvailable(bytes[] crossChainHashes) view returns(bool)
func (_CrossChain *CrossChainCallerSession) IsBundleAvailable(crossChainHashes [][]byte) (bool, error) {
	return _CrossChain.Contract.IsBundleAvailable(&_CrossChain.CallOpts, crossChainHashes)
}

// IsBundleSaved is a free data retrieval call binding the contract method 0x84154826.
//
// Solidity: function isBundleSaved(bytes32 ) view returns(bool)
func (_CrossChain *CrossChainCaller) IsBundleSaved(opts *bind.CallOpts, arg0 [32]byte) (bool, error) {
	var out []interface{}
	err := _CrossChain.contract.Call(opts, &out, "isBundleSaved", arg0)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsBundleSaved is a free data retrieval call binding the contract method 0x84154826.
//
// Solidity: function isBundleSaved(bytes32 ) view returns(bool)
func (_CrossChain *CrossChainSession) IsBundleSaved(arg0 [32]byte) (bool, error) {
	return _CrossChain.Contract.IsBundleSaved(&_CrossChain.CallOpts, arg0)
}

// IsBundleSaved is a free data retrieval call binding the contract method 0x84154826.
//
// Solidity: function isBundleSaved(bytes32 ) view returns(bool)
func (_CrossChain *CrossChainCallerSession) IsBundleSaved(arg0 [32]byte) (bool, error) {
	return _CrossChain.Contract.IsBundleSaved(&_CrossChain.CallOpts, arg0)
}

// IsWithdrawalSpent is a free data retrieval call binding the contract method 0x2f0cb9e3.
//
// Solidity: function isWithdrawalSpent(bytes32 ) view returns(bool)
func (_CrossChain *CrossChainCaller) IsWithdrawalSpent(opts *bind.CallOpts, arg0 [32]byte) (bool, error) {
	var out []interface{}
	err := _CrossChain.contract.Call(opts, &out, "isWithdrawalSpent", arg0)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsWithdrawalSpent is a free data retrieval call binding the contract method 0x2f0cb9e3.
//
// Solidity: function isWithdrawalSpent(bytes32 ) view returns(bool)
func (_CrossChain *CrossChainSession) IsWithdrawalSpent(arg0 [32]byte) (bool, error) {
	return _CrossChain.Contract.IsWithdrawalSpent(&_CrossChain.CallOpts, arg0)
}

// IsWithdrawalSpent is a free data retrieval call binding the contract method 0x2f0cb9e3.
//
// Solidity: function isWithdrawalSpent(bytes32 ) view returns(bool)
func (_CrossChain *CrossChainCallerSession) IsWithdrawalSpent(arg0 [32]byte) (bool, error) {
	return _CrossChain.Contract.IsWithdrawalSpent(&_CrossChain.CallOpts, arg0)
}

// MerkleMessageBus is a free data retrieval call binding the contract method 0xe874eb20.
//
// Solidity: function merkleMessageBus() view returns(address)
func (_CrossChain *CrossChainCaller) MerkleMessageBus(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _CrossChain.contract.Call(opts, &out, "merkleMessageBus")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// MerkleMessageBus is a free data retrieval call binding the contract method 0xe874eb20.
//
// Solidity: function merkleMessageBus() view returns(address)
func (_CrossChain *CrossChainSession) MerkleMessageBus() (common.Address, error) {
	return _CrossChain.Contract.MerkleMessageBus(&_CrossChain.CallOpts)
}

// MerkleMessageBus is a free data retrieval call binding the contract method 0xe874eb20.
//
// Solidity: function merkleMessageBus() view returns(address)
func (_CrossChain *CrossChainCallerSession) MerkleMessageBus() (common.Address, error) {
	return _CrossChain.Contract.MerkleMessageBus(&_CrossChain.CallOpts)
}

// MessageBus is a free data retrieval call binding the contract method 0xa1a227fa.
//
// Solidity: function messageBus() view returns(address)
func (_CrossChain *CrossChainCaller) MessageBus(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _CrossChain.contract.Call(opts, &out, "messageBus")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// MessageBus is a free data retrieval call binding the contract method 0xa1a227fa.
//
// Solidity: function messageBus() view returns(address)
func (_CrossChain *CrossChainSession) MessageBus() (common.Address, error) {
	return _CrossChain.Contract.MessageBus(&_CrossChain.CallOpts)
}

// MessageBus is a free data retrieval call binding the contract method 0xa1a227fa.
//
// Solidity: function messageBus() view returns(address)
func (_CrossChain *CrossChainCallerSession) MessageBus() (common.Address, error) {
	return _CrossChain.Contract.MessageBus(&_CrossChain.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_CrossChain *CrossChainCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _CrossChain.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_CrossChain *CrossChainSession) Owner() (common.Address, error) {
	return _CrossChain.Contract.Owner(&_CrossChain.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_CrossChain *CrossChainCallerSession) Owner() (common.Address, error) {
	return _CrossChain.Contract.Owner(&_CrossChain.CallOpts)
}

// Initialize is a paid mutator transaction binding the contract method 0xc4d66de8.
//
// Solidity: function initialize(address owner) returns()
func (_CrossChain *CrossChainTransactor) Initialize(opts *bind.TransactOpts, owner common.Address) (*types.Transaction, error) {
	return _CrossChain.contract.Transact(opts, "initialize", owner)
}

// Initialize is a paid mutator transaction binding the contract method 0xc4d66de8.
//
// Solidity: function initialize(address owner) returns()
func (_CrossChain *CrossChainSession) Initialize(owner common.Address) (*types.Transaction, error) {
	return _CrossChain.Contract.Initialize(&_CrossChain.TransactOpts, owner)
}

// Initialize is a paid mutator transaction binding the contract method 0xc4d66de8.
//
// Solidity: function initialize(address owner) returns()
func (_CrossChain *CrossChainTransactorSession) Initialize(owner common.Address) (*types.Transaction, error) {
	return _CrossChain.Contract.Initialize(&_CrossChain.TransactOpts, owner)
}

// PauseWithdrawals is a paid mutator transaction binding the contract method 0xf4cc87ba.
//
// Solidity: function pauseWithdrawals(bool _pause) returns()
func (_CrossChain *CrossChainTransactor) PauseWithdrawals(opts *bind.TransactOpts, _pause bool) (*types.Transaction, error) {
	return _CrossChain.contract.Transact(opts, "pauseWithdrawals", _pause)
}

// PauseWithdrawals is a paid mutator transaction binding the contract method 0xf4cc87ba.
//
// Solidity: function pauseWithdrawals(bool _pause) returns()
func (_CrossChain *CrossChainSession) PauseWithdrawals(_pause bool) (*types.Transaction, error) {
	return _CrossChain.Contract.PauseWithdrawals(&_CrossChain.TransactOpts, _pause)
}

// PauseWithdrawals is a paid mutator transaction binding the contract method 0xf4cc87ba.
//
// Solidity: function pauseWithdrawals(bool _pause) returns()
func (_CrossChain *CrossChainTransactorSession) PauseWithdrawals(_pause bool) (*types.Transaction, error) {
	return _CrossChain.Contract.PauseWithdrawals(&_CrossChain.TransactOpts, _pause)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_CrossChain *CrossChainTransactor) RenounceOwnership(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _CrossChain.contract.Transact(opts, "renounceOwnership")
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_CrossChain *CrossChainSession) RenounceOwnership() (*types.Transaction, error) {
	return _CrossChain.Contract.RenounceOwnership(&_CrossChain.TransactOpts)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_CrossChain *CrossChainTransactorSession) RenounceOwnership() (*types.Transaction, error) {
	return _CrossChain.Contract.RenounceOwnership(&_CrossChain.TransactOpts)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_CrossChain *CrossChainTransactor) TransferOwnership(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _CrossChain.contract.Transact(opts, "transferOwnership", newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_CrossChain *CrossChainSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _CrossChain.Contract.TransferOwnership(&_CrossChain.TransactOpts, newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_CrossChain *CrossChainTransactorSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _CrossChain.Contract.TransferOwnership(&_CrossChain.TransactOpts, newOwner)
}

// CrossChainInitializedIterator is returned from FilterInitialized and is used to iterate over the raw logs and unpacked data for Initialized events raised by the CrossChain contract.
type CrossChainInitializedIterator struct {
	Event *CrossChainInitialized // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *CrossChainInitializedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(CrossChainInitialized)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(CrossChainInitialized)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *CrossChainInitializedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *CrossChainInitializedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// CrossChainInitialized represents a Initialized event raised by the CrossChain contract.
type CrossChainInitialized struct {
	Version uint64
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterInitialized is a free log retrieval operation binding the contract event 0xc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d2.
//
// Solidity: event Initialized(uint64 version)
func (_CrossChain *CrossChainFilterer) FilterInitialized(opts *bind.FilterOpts) (*CrossChainInitializedIterator, error) {

	logs, sub, err := _CrossChain.contract.FilterLogs(opts, "Initialized")
	if err != nil {
		return nil, err
	}
	return &CrossChainInitializedIterator{contract: _CrossChain.contract, event: "Initialized", logs: logs, sub: sub}, nil
}

// WatchInitialized is a free log subscription operation binding the contract event 0xc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d2.
//
// Solidity: event Initialized(uint64 version)
func (_CrossChain *CrossChainFilterer) WatchInitialized(opts *bind.WatchOpts, sink chan<- *CrossChainInitialized) (event.Subscription, error) {

	logs, sub, err := _CrossChain.contract.WatchLogs(opts, "Initialized")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(CrossChainInitialized)
				if err := _CrossChain.contract.UnpackLog(event, "Initialized", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseInitialized is a log parse operation binding the contract event 0xc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d2.
//
// Solidity: event Initialized(uint64 version)
func (_CrossChain *CrossChainFilterer) ParseInitialized(log types.Log) (*CrossChainInitialized, error) {
	event := new(CrossChainInitialized)
	if err := _CrossChain.contract.UnpackLog(event, "Initialized", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// CrossChainLogCrossChainContractCreatedIterator is returned from FilterLogCrossChainContractCreated and is used to iterate over the raw logs and unpacked data for LogCrossChainContractCreated events raised by the CrossChain contract.
type CrossChainLogCrossChainContractCreatedIterator struct {
	Event *CrossChainLogCrossChainContractCreated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *CrossChainLogCrossChainContractCreatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(CrossChainLogCrossChainContractCreated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(CrossChainLogCrossChainContractCreated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *CrossChainLogCrossChainContractCreatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *CrossChainLogCrossChainContractCreatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// CrossChainLogCrossChainContractCreated represents a LogCrossChainContractCreated event raised by the CrossChain contract.
type CrossChainLogCrossChainContractCreated struct {
	MessageBusAddress common.Address
	Raw               types.Log // Blockchain specific contextual infos
}

// FilterLogCrossChainContractCreated is a free log retrieval operation binding the contract event 0x4c3bb7ff9ee26b36b3b248a5172618e61b9912d8bc9126b7985a4099546a43dc.
//
// Solidity: event LogCrossChainContractCreated(address messageBusAddress)
func (_CrossChain *CrossChainFilterer) FilterLogCrossChainContractCreated(opts *bind.FilterOpts) (*CrossChainLogCrossChainContractCreatedIterator, error) {

	logs, sub, err := _CrossChain.contract.FilterLogs(opts, "LogCrossChainContractCreated")
	if err != nil {
		return nil, err
	}
	return &CrossChainLogCrossChainContractCreatedIterator{contract: _CrossChain.contract, event: "LogCrossChainContractCreated", logs: logs, sub: sub}, nil
}

// WatchLogCrossChainContractCreated is a free log subscription operation binding the contract event 0x4c3bb7ff9ee26b36b3b248a5172618e61b9912d8bc9126b7985a4099546a43dc.
//
// Solidity: event LogCrossChainContractCreated(address messageBusAddress)
func (_CrossChain *CrossChainFilterer) WatchLogCrossChainContractCreated(opts *bind.WatchOpts, sink chan<- *CrossChainLogCrossChainContractCreated) (event.Subscription, error) {

	logs, sub, err := _CrossChain.contract.WatchLogs(opts, "LogCrossChainContractCreated")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(CrossChainLogCrossChainContractCreated)
				if err := _CrossChain.contract.UnpackLog(event, "LogCrossChainContractCreated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogCrossChainContractCreated is a log parse operation binding the contract event 0x4c3bb7ff9ee26b36b3b248a5172618e61b9912d8bc9126b7985a4099546a43dc.
//
// Solidity: event LogCrossChainContractCreated(address messageBusAddress)
func (_CrossChain *CrossChainFilterer) ParseLogCrossChainContractCreated(log types.Log) (*CrossChainLogCrossChainContractCreated, error) {
	event := new(CrossChainLogCrossChainContractCreated)
	if err := _CrossChain.contract.UnpackLog(event, "LogCrossChainContractCreated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// CrossChainOwnershipTransferredIterator is returned from FilterOwnershipTransferred and is used to iterate over the raw logs and unpacked data for OwnershipTransferred events raised by the CrossChain contract.
type CrossChainOwnershipTransferredIterator struct {
	Event *CrossChainOwnershipTransferred // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *CrossChainOwnershipTransferredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(CrossChainOwnershipTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(CrossChainOwnershipTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *CrossChainOwnershipTransferredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *CrossChainOwnershipTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// CrossChainOwnershipTransferred represents a OwnershipTransferred event raised by the CrossChain contract.
type CrossChainOwnershipTransferred struct {
	PreviousOwner common.Address
	NewOwner      common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterOwnershipTransferred is a free log retrieval operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_CrossChain *CrossChainFilterer) FilterOwnershipTransferred(opts *bind.FilterOpts, previousOwner []common.Address, newOwner []common.Address) (*CrossChainOwnershipTransferredIterator, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _CrossChain.contract.FilterLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return &CrossChainOwnershipTransferredIterator{contract: _CrossChain.contract, event: "OwnershipTransferred", logs: logs, sub: sub}, nil
}

// WatchOwnershipTransferred is a free log subscription operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_CrossChain *CrossChainFilterer) WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *CrossChainOwnershipTransferred, previousOwner []common.Address, newOwner []common.Address) (event.Subscription, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _CrossChain.contract.WatchLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(CrossChainOwnershipTransferred)
				if err := _CrossChain.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOwnershipTransferred is a log parse operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_CrossChain *CrossChainFilterer) ParseOwnershipTransferred(log types.Log) (*CrossChainOwnershipTransferred, error) {
	event := new(CrossChainOwnershipTransferred)
	if err := _CrossChain.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// CrossChainWithdrawalsPausedIterator is returned from FilterWithdrawalsPaused and is used to iterate over the raw logs and unpacked data for WithdrawalsPaused events raised by the CrossChain contract.
type CrossChainWithdrawalsPausedIterator struct {
	Event *CrossChainWithdrawalsPaused // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *CrossChainWithdrawalsPausedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(CrossChainWithdrawalsPaused)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(CrossChainWithdrawalsPaused)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *CrossChainWithdrawalsPausedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *CrossChainWithdrawalsPausedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// CrossChainWithdrawalsPaused represents a WithdrawalsPaused event raised by the CrossChain contract.
type CrossChainWithdrawalsPaused struct {
	Paused bool
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterWithdrawalsPaused is a free log retrieval operation binding the contract event 0x129d33f7856617012aed60524381cfff7233cfc57df58d9f6613a5593d3dc218.
//
// Solidity: event WithdrawalsPaused(bool paused)
func (_CrossChain *CrossChainFilterer) FilterWithdrawalsPaused(opts *bind.FilterOpts) (*CrossChainWithdrawalsPausedIterator, error) {

	logs, sub, err := _CrossChain.contract.FilterLogs(opts, "WithdrawalsPaused")
	if err != nil {
		return nil, err
	}
	return &CrossChainWithdrawalsPausedIterator{contract: _CrossChain.contract, event: "WithdrawalsPaused", logs: logs, sub: sub}, nil
}

// WatchWithdrawalsPaused is a free log subscription operation binding the contract event 0x129d33f7856617012aed60524381cfff7233cfc57df58d9f6613a5593d3dc218.
//
// Solidity: event WithdrawalsPaused(bool paused)
func (_CrossChain *CrossChainFilterer) WatchWithdrawalsPaused(opts *bind.WatchOpts, sink chan<- *CrossChainWithdrawalsPaused) (event.Subscription, error) {

	logs, sub, err := _CrossChain.contract.WatchLogs(opts, "WithdrawalsPaused")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(CrossChainWithdrawalsPaused)
				if err := _CrossChain.contract.UnpackLog(event, "WithdrawalsPaused", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseWithdrawalsPaused is a log parse operation binding the contract event 0x129d33f7856617012aed60524381cfff7233cfc57df58d9f6613a5593d3dc218.
//
// Solidity: event WithdrawalsPaused(bool paused)
func (_CrossChain *CrossChainFilterer) ParseWithdrawalsPaused(log types.Log) (*CrossChainWithdrawalsPaused, error) {
	event := new(CrossChainWithdrawalsPaused)
	if err := _CrossChain.contract.UnpackLog(event, "WithdrawalsPaused", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
