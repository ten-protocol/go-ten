// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package CrossChain

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
	_ = abi.ConvertType
)

// StructsValueTransferMessage is an auto generated low-level Go binding around an user-defined struct.
type StructsValueTransferMessage struct {
	Sender   common.Address
	Receiver common.Address
	Amount   *big.Int
	Sequence uint64
}

// CrossChainMetaData contains all meta data concerning the CrossChain contract.
var CrossChainMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"InvalidInitialization\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotInitializing\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ReentrancyGuardReentrantCall\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"version\",\"type\":\"uint64\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"messageBusAddress\",\"type\":\"address\"}],\"name\":\"LogCrossChainContractCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"paused\",\"type\":\"bool\"}],\"name\":\"WithdrawalsPaused\",\"type\":\"event\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"sequence\",\"type\":\"uint64\"}],\"internalType\":\"structStructs.ValueTransferMessage\",\"name\":\"_msg\",\"type\":\"tuple\"},{\"internalType\":\"bytes32[]\",\"name\":\"proof\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes32\",\"name\":\"root\",\"type\":\"bytes32\"}],\"name\":\"extractNativeValue\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes[]\",\"name\":\"crossChainHashes\",\"type\":\"bytes[]\"}],\"name\":\"isBundleAvailable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"isBundleSaved\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"isWithdrawalSpent\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"merkleMessageBus\",\"outputs\":[{\"internalType\":\"contractIMerkleTreeMessageBus\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"messageBus\",\"outputs\":[{\"internalType\":\"contractIMessageBus\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_pause\",\"type\":\"bool\"}],\"name\":\"pauseWithdrawals\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
	Bin: "0x6080604052348015600e575f5ffd5b50601633601a565b608a565b7f9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c19930080546001600160a01b031981166001600160a01b03848116918217845560405192169182907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0905f90a3505050565b613c5c806100975f395ff3fe608060405234801561000f575f5ffd5b50600436106100c4575f3560e01c8063a1a227fa1161007d578063e874eb2011610058578063e874eb20146101bd578063f2fde38b146101d0578063f4cc87ba146101e3575f5ffd5b8063a1a227fa14610177578063a4ab2faa14610197578063c4d66de8146101aa575f5ffd5b8063715018a6116100ad578063715018a614610115578063841548261461011d5780638da5cb5b1461013f575f5ffd5b80632f0cb9e3146100c85780636af5266214610100575b5f5ffd5b6100ea6100d6366004610998565b60046020525f908152604090205460ff1681565b6040516100f791906109c6565b60405180910390f35b61011361010e366004610a3b565b6101f6565b005b6101136103b9565b6100ea61012b366004610998565b60056020525f908152604090205460ff1681565b7f9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c199300546001600160a01b03166040516100f79190610abb565b60025461018a906001600160a01b031681565b6040516100f79190610ae6565b6100ea6101a5366004610c93565b6103cc565b6101136101b8366004610ce7565b610448565b60035461018a906001600160a01b031681565b6101136101de366004610ce7565b6106b6565b6101136101f1366004610d17565b61070c565b6101fe61075c565b5f5460ff16156102295760405162461bcd60e51b815260040161022090610d68565b60405180910390fd5b6003546040517fb201246f0000000000000000000000000000000000000000000000000000000081526001600160a01b039091169063b201246f90610278908790879087908790600401610e99565b5f6040518083038186803b15801561028e575f5ffd5b505afa1580156102a0573d5f5f3e3d5ffd5b505050505f846040516020016102b69190610ed2565b60408051601f1981840301815291815281516020928301205f818152600490935291205490915060ff16156102fd5760405162461bcd60e51b815260040161022090610f12565b5f81815260046020908152604091829020805460ff191660011790556002546001600160a01b0316916399a3ad219161033a918901908901610ce7565b87604001356040518363ffffffff1660e01b815260040161035c929190610f22565b5f604051808303815f87803b158015610373575f5ffd5b505af1158015610385573d5f5f3e3d5ffd5b50505050506103b360017f9b779b17422d0df92223018b32b4d1fa46e071723d6817e2486d003becc55f0055565b50505050565b6103c16107e5565b6103ca5f610859565b565b5f80805b835181101561043057818482815181106103ec576103ec610f3d565b60200260200101516103fd90610f5a565b60405160200161040e929190610f8e565b60408051601f19818403018152919052805160209091012091506001016103d0565b505f9081526005602052604090205460ff1692915050565b7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00805468010000000000000000810460ff16159067ffffffffffffffff165f811580156104925750825b90505f8267ffffffffffffffff1660011480156104ae5750303b155b9050811580156104bc575080155b156104f3576040517ff92ee8a900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b845467ffffffffffffffff19166001178555831561052757845468ff00000000000000001916680100000000000000001785555b610530866108d6565b6105386108e7565b6040516105449061096e565b604051809103905ff08015801561055d573d5f5f3e3d5ffd5b506003805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b039290921691821790556040517fc4d66de800000000000000000000000000000000000000000000000000000000815263c4d66de8906105c4908990600401610abb565b5f604051808303815f87803b1580156105db575f5ffd5b505af11580156105ed573d5f5f3e3d5ffd5b50506003546002805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0390921691821790555f805460ff191690556040517f4c3bb7ff9ee26b36b3b248a5172618e61b9912d8bc9126b7985a4099546a43dc93506106569250610abb565b60405180910390a183156106ae57845468ff0000000000000000191685556040517fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d2906106a590600190610fb6565b60405180910390a15b505050505050565b6106be6107e5565b6001600160a01b038116610700575f6040517f1e4fbdf70000000000000000000000000000000000000000000000000000000081526004016102209190610abb565b61070981610859565b50565b6107146107e5565b5f805460ff19168215151790556040517f129d33f7856617012aed60524381cfff7233cfc57df58d9f6613a5593d3dc218906107519083906109c6565b60405180910390a150565b7f9b779b17422d0df92223018b32b4d1fa46e071723d6817e2486d003becc55f008054600119016107b9576040517f3ee5aeb500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60029055565b60017f9b779b17422d0df92223018b32b4d1fa46e071723d6817e2486d003becc55f0055565b336108177f9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c199300546001600160a01b031690565b6001600160a01b0316146103ca57336040517f118cdaa70000000000000000000000000000000000000000000000000000000081526004016102209190610abb565b7f9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c199300805473ffffffffffffffffffffffffffffffffffffffff1981166001600160a01b03848116918217845560405192169182907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0905f90a3505050565b6108de6108f7565b6107098161095e565b6108ef6108f7565b6103ca610966565b7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a005468010000000000000000900460ff166103ca576040517fd7e6bcf800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6106be6108f7565b6107bf6108f7565b612c6280610fc583390190565b805b8114610709575f5ffd5b80356109928161097b565b92915050565b5f602082840312156109ab576109ab5f5ffd5b6109b58383610987565b9392505050565b8015155b82525050565b6020810161099282846109bc565b5f608082840312156109e7576109e75f5ffd5b50919050565b5f5f83601f840112610a0057610a005f5ffd5b50813567ffffffffffffffff811115610a1a57610a1a5f5ffd5b602083019150836020820283011115610a3457610a345f5ffd5b9250929050565b5f5f5f5f60c08587031215610a5157610a515f5ffd5b610a5b86866109d4565b9350608085013567ffffffffffffffff811115610a7957610a795f5ffd5b610a85878288016109ed565b9350935050610a978660a08701610987565b905092959194509250565b5f6001600160a01b038216610992565b6109c081610aa2565b602081016109928284610ab2565b5f61099282610aa2565b5f61099282610ac9565b6109c081610ad3565b602081016109928284610add565b634e487b7160e01b5f52604160045260245ffd5b601f19601f830116810181811067ffffffffffffffff82111715610b2e57610b2e610af4565b6040525050565b5f610b3f60405190565b9050610b4b8282610b08565b919050565b5f67ffffffffffffffff821115610b6957610b69610af4565b5060209081020190565b5f67ffffffffffffffff821115610b8c57610b8c610af4565b601f19601f83011660200192915050565b82818337505f910152565b5f610bba610bb584610b73565b610b35565b9050828152838383011115610bd057610bd05f5ffd5b6109b5836020830184610b9d565b5f82601f830112610bf057610bf05f5ffd5b6109b583833560208501610ba8565b5f610c0c610bb584610b50565b83815290506020808201908402830185811115610c2a57610c2a5f5ffd5b835b81811015610c6857803567ffffffffffffffff811115610c4d57610c4d5f5ffd5b610c5988828801610bde565b84525060209283019201610c2c565b5050509392505050565b5f82601f830112610c8457610c845f5ffd5b6109b583833560208501610bff565b5f60208284031215610ca657610ca65f5ffd5b813567ffffffffffffffff811115610cbf57610cbf5f5ffd5b610ccb84828501610c72565b949350505050565b61097d81610aa2565b803561099281610cd3565b5f60208284031215610cfa57610cfa5f5ffd5b6109b58383610cdc565b80151561097d565b803561099281610d04565b5f60208284031215610d2a57610d2a5f5ffd5b6109b58383610d0c565b60168152602081017f7769746864726177616c73206172652070617573656400000000000000000000815290505b60200190565b6020808252810161099281610d34565b505f6109926020830183610cdc565b505f6109926020830183610987565b806109c0565b67ffffffffffffffff811661097d565b803561099281610d9c565b505f6109926020830183610dac565b67ffffffffffffffff81166109c0565b610de08180610d78565b610dea8382610ab2565b50610df86020820182610d78565b610e056020840182610ab2565b50610e136040820182610d87565b610e206040840182610d96565b50610e2e6060820182610db7565b610e3b6060840182610dc6565b505050565b82818337505050565b8183526020830192505f7f07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff831115610e8257610e825f5ffd5b602083029250610e93838584610e40565b50500190565b60c08101610ea78287610dd6565b8181036080830152610eba818587610e49565b9050610ec960a0830184610d96565b95945050505050565b608081016109928284610dd6565b60188152602081017f7769746864726177616c20616c7265616479207370656e74000000000000000081529050610d62565b6020808252810161099281610ee0565b60408101610f308285610ab2565b6109b56020830184610d96565b634e487b7160e01b5f52603260045260245ffd5b5f610992825190565b5f610f63825190565b60208301610f7081610f51565b92505060208110156109e7575f196020919091036008021b16919050565b60408101610f308285610d96565b5f67ffffffffffffffff8216610992565b6109c081610f9c565b602081016109928284610fad56fe6080604052348015600e575f5ffd5b50601633601a565b608a565b7f9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c19930080546001600160a01b031981166001600160a01b03848116918217845560405192169182907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0905f90a3505050565b612bcb806100975f395ff3fe6080604052600436106101b9575f3560e01c80638da5cb5b116100eb578063b201246f11610089578063d547741f11610063578063d547741f146105d3578063e138a8d2146105f2578063f2fde38b14610611578063fb8940291461063057610229565b8063b201246f14610576578063b6aed0cb14610595578063c4d66de8146105b457610229565b806399a3ad21116100c557806399a3ad2114610505578063a217fddf14610524578063ab53bddc14610537578063b1454caa1461055657610229565b80638da5cb5b1461043f57806391d14854146104835780639730886d146104e657610229565b80632f2ff15d1161015857806336568abe1161013257806336568abe146103ce57806336d2da90146103ed578063485cc9551461040c578063715018a61461042b57610229565b80632f2ff15d1461037d57806333a88c721461039c578063346633fb146103bb57610229565b80630fcfbd11116101945780630fcfbd11146102d35780630fe9188e146102f25780631050afdd14610311578063248a9ca31461033057610229565b8062a1b8151461024a57806301ffc9a71461027457806302b4df19146102a057610229565b36610229576040517f346633fb000000000000000000000000000000000000000000000000000000008152309063346633fb9034906101fe903390839060040161198b565b5f604051808303818588803b158015610215575f5ffd5b505af1158015610227573d5f5f3e3d5ffd5b005b60405162461bcd60e51b8152600401610241906119da565b60405180910390fd5b348015610255575f5ffd5b5061025e61064f565b60405161026b91906119ea565b60405180910390f35b34801561027f575f5ffd5b5061029361028e366004611a19565b6106d8565b60405161026b9190611a3e565b3480156102ab575f5ffd5b5061025e7f65c4b771cce18ff228842b3883a73079ee3e76bd08965f6dadb7cb56dbf6e19481565b3480156102de575f5ffd5b5061025e6102ed366004611a65565b610740565b3480156102fd575f5ffd5b5061022761030c366004611aae565b61079d565b34801561031c575f5ffd5b5061022761032b366004611adf565b610804565b34801561033b575f5ffd5b5061025e61034a366004611aae565b5f9081527f02dd7bc7dec4dceedda775e58dd541e08a116c6c53815c0bd028192f7b626800602052604090206001015490565b348015610388575f5ffd5b50610227610397366004611afc565b61083c565b3480156103a7575f5ffd5b506102936103b6366004611a65565b610885565b6102276103c9366004611b32565b6108d5565b3480156103d9575f5ffd5b506102276103e8366004611afc565b610a1e565b3480156103f8575f5ffd5b50610227610407366004611adf565b610a6f565b348015610417575f5ffd5b50610227610426366004611b5f565b610ae6565b348015610436575f5ffd5b50610227610c36565b34801561044a575f5ffd5b507f9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c199300546001600160a01b031660405161026b9190611b7d565b34801561048e575f5ffd5b5061029361049d366004611afc565b5f9182527f02dd7bc7dec4dceedda775e58dd541e08a116c6c53815c0bd028192f7b626800602090815260408084206001600160a01b0393909316845291905290205460ff1690565b3480156104f1575f5ffd5b50610227610500366004611b8b565b610c49565b348015610510575f5ffd5b5061022761051f366004611b32565b610dae565b34801561052f575f5ffd5b5061025e5f81565b348015610542575f5ffd5b50610227610551366004611b32565b610de2565b610569610564366004611c4d565b610eaa565b60405161026b9190611cd5565b348015610581575f5ffd5b50610227610590366004611d3d565b610fb2565b3480156105a0575f5ffd5b506102276105af366004611da4565b6110b0565b3480156105bf575f5ffd5b506102276105ce366004611adf565b611117565b3480156105de575f5ffd5b506102276105ed366004611afc565b61127c565b3480156105fd575f5ffd5b5061022761060c366004611dc2565b6112bf565b34801561061c575f5ffd5b5061022761062b366004611adf565b6113fe565b34801561063b575f5ffd5b5061022761064a366004611adf565b611454565b600354604080517f1a90a21900000000000000000000000000000000000000000000000000000000815290515f926001600160a01b031691631a90a2199160048083019260209291908290030181865afa1580156106af573d5f5f3e3d5ffd5b505050506040513d601f19601f820116820180604052508101906106d39190611e45565b905090565b5f6001600160e01b031982167f7965db0b00000000000000000000000000000000000000000000000000000000148061073a57507f01ffc9a7000000000000000000000000000000000000000000000000000000006001600160e01b03198316145b92915050565b5f5f826040516020016107539190611ff7565b60408051601f1981840301815291815281516020928301205f81815292839052912054909150806107965760405162461bcd60e51b815260040161024190612046565b9392505050565b7f65c4b771cce18ff228842b3883a73079ee3e76bd08965f6dadb7cb56dbf6e1946107c781611488565b5f8281526004602052604081205490036107f35760405162461bcd60e51b815260040161024190612088565b505f90815260046020526040812055565b5f61080e81611488565b6108387f65c4b771cce18ff228842b3883a73079ee3e76bd08965f6dadb7cb56dbf6e1948361127c565b5050565b5f8281527f02dd7bc7dec4dceedda775e58dd541e08a116c6c53815c0bd028192f7b626800602052604090206001015461087581611488565b61087f8383611492565b50505050565b5f5f826040516020016108989190611ff7565b60408051601f1981840301815291815281516020928301205f8181529283905291205490915080158015906108cd5750428111155b949350505050565b5f341180156108e357508034145b6108ff5760405162461bcd60e51b8152600401610241906120f0565b60035434906001600160a01b0316156109bf575f61091b61064f565b90508034101561093d5760405162461bcd60e51b815260040161024190612130565b6109478134612154565b6003546040519193505f916001600160a01b039091169083908381818185875af1925050503d805f8114610996576040519150601f19603f3d011682016040523d82523d5f602084013e61099b565b606091505b50509050806109bc5760405162461bcd60e51b8152600401610241906121bf565b50505b5f6109c93361155e565b9050836001600160a01b0316336001600160a01b03167f50c536ac33a920f00755865b831d17bf4cff0b2e0345f65b16d52bfc004068b68484604051610a109291906121cf565b60405180910390a350505050565b6001600160a01b0381163314610a60576040517f6697b23200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b610a6a82826115bb565b505050565b610a7761165f565b5f816001600160a01b0316476040515f6040518083038185875af1925050503d805f8114610ac0576040519150601f19603f3d011682016040523d82523d5f602084013e610ac5565b606091505b50509050806108385760405162461bcd60e51b81526004016102419061221c565b7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00805468010000000000000000810460ff16159067ffffffffffffffff165f81158015610b305750825b90505f8267ffffffffffffffff166001148015610b4c5750303b155b905081158015610b5a575080155b15610b785760405163f92ee8a960e01b815260040160405180910390fd5b845467ffffffffffffffff191660011785558315610bac57845468ff00000000000000001916680100000000000000001785555b610bb5876116d3565b6003805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0388161790558315610c2d57845468ff0000000000000000191685556040517fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d290610c249060019061224f565b60405180910390a15b50505050505050565b610c3e61165f565b610c475f6116e4565b565b5f610c5560013061225d565b9050610c887f9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c199300546001600160a01b031690565b6001600160a01b0316336001600160a01b03161480610caf5750336001600160a01b038216145b610ccb5760405162461bcd60e51b8152600401610241906122b2565b5f610cd683426122c2565b90505f84604051602001610cea9190611ff7565b60408051601f1981840301815291815281516020928301205f8181529283905291205490915015610d2d5760405162461bcd60e51b81526004016102419061232d565b5f81815260208181526040822084905560019190610d4d90880188611adf565b6001600160a01b0316815260208101919091526040015f90812090610d78608088016060890161233d565b63ffffffff1681526020808201929092526040015f9081208054600181018255908252919020869160040201610c2d828261273b565b7f65c4b771cce18ff228842b3883a73079ee3e76bd08965f6dadb7cb56dbf6e194610dd881611488565b610a6a8383611761565b5f610dee60013061225d565b9050610e217f9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c199300546001600160a01b031690565b6001600160a01b0316336001600160a01b03161480610e485750336001600160a01b038216145b610e645760405162461bcd60e51b8152600401610241906122b2565b826001600160a01b03167fcd9850463422a7449c406a036e35e5edb6fbe35a64c9f12a2354be98a750c0d383604051610e9d91906119ea565b60405180910390a2505050565b6003545f906001600160a01b031615610f5b575f610ec661064f565b905080341015610ee85760405162461bcd60e51b81526004016102419061279d565b6003546040515f916001600160a01b03169083908381818185875af1925050503d805f8114610f32576040519150601f19603f3d011682016040523d82523d5f602084013e610f37565b606091505b5050905080610f585760405162461bcd60e51b8152600401610241906121bf565b50505b610f643361155e565b90507fb93c37389233beb85a3a726c3f15c2d15533ee74cb602f20f490dfffef77593733828888888888604051610fa197969594939291906127ad565b60405180910390a195945050505050565b5f818152600460205260408120549003610fde5760405162461bcd60e51b815260040161024190612868565b5f8181526004602052604090205442101561100b5760405162461bcd60e51b8152600401610241906128b4565b5f8460405160200161101d9190612938565b604051602081830303815290604052805190602001206040516020016110439190612978565b60405160208183030381529060405280519060200120905061108d848484846040516020016110729190612997565b604051602081830303815290604052805190602001206117f0565b6110a95760405162461bcd60e51b815260040161024190612a01565b5050505050565b7f65c4b771cce18ff228842b3883a73079ee3e76bd08965f6dadb7cb56dbf6e1946110da81611488565b5f83815260046020526040902054156111055760405162461bcd60e51b815260040161024190612a69565b505f9182526004602052604090912055565b7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00805468010000000000000000810460ff16159067ffffffffffffffff165f811580156111615750825b90505f8267ffffffffffffffff16600114801561117d5750303b155b90508115801561118b575080155b156111a95760405163f92ee8a960e01b815260040160405180910390fd5b845467ffffffffffffffff1916600117855583156111dd57845468ff00000000000000001916680100000000000000001785555b6111e6866116d3565b6111ee611807565b6111f85f87611492565b506112237f65c4b771cce18ff228842b3883a73079ee3e76bd08965f6dadb7cb56dbf6e19487611492565b50831561127457845468ff0000000000000000191685556040517fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d29061126b9060019061224f565b60405180910390a15b505050505050565b5f8281527f02dd7bc7dec4dceedda775e58dd541e08a116c6c53815c0bd028192f7b62680060205260409020600101546112b581611488565b61087f83836115bb565b5f8181526004602052604081205490036112eb5760405162461bcd60e51b815260040161024190612868565b5f818152600460205260409020544210156113185760405162461bcd60e51b8152600401610241906128b4565b5f6113266020860186611adf565b6113366040870160208801612a79565b611346606088016040890161233d565b6113566080890160608a0161233d565b61136360808a018a61246f565b61137360c08c0160a08d01612a96565b60405160200161138997969594939291906127ad565b6040516020818303038152906040528051906020012090505f816040516020016113b39190612ae5565b6040516020818303038152906040528051906020012090506113e2858585846040516020016110729190612997565b6112745760405162461bcd60e51b815260040161024190612b4d565b61140661165f565b6001600160a01b038116611448575f6040517f1e4fbdf70000000000000000000000000000000000000000000000000000000081526004016102419190611b7d565b611451816116e4565b50565b5f61145e81611488565b6108387f65c4b771cce18ff228842b3883a73079ee3e76bd08965f6dadb7cb56dbf6e1948361083c565b611451813361180f565b5f8281527f02dd7bc7dec4dceedda775e58dd541e08a116c6c53815c0bd028192f7b626800602081815260408084206001600160a01b038616855290915282205460ff16611555575f848152602082815260408083206001600160a01b03871684529091529020805460ff1916600117905561150b3390565b6001600160a01b0316836001600160a01b0316857f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a4600191505061073a565b5f91505061073a565b6001600160a01b0381165f908152600260205260408120805467ffffffffffffffff1691600191906115908385612b5d565b92506101000a81548167ffffffffffffffff021916908367ffffffffffffffff160217905550919050565b5f8281527f02dd7bc7dec4dceedda775e58dd541e08a116c6c53815c0bd028192f7b626800602081815260408084206001600160a01b038616855290915282205460ff1615611555575f848152602082815260408083206001600160a01b0387168085529252808320805460ff1916905551339287917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a4600191505061073a565b336116917f9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c199300546001600160a01b031690565b6001600160a01b031614610c4757336040517f118cdaa70000000000000000000000000000000000000000000000000000000081526004016102419190611b7d565b6116db61188d565b611451816118f4565b7f9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c199300805473ffffffffffffffffffffffffffffffffffffffff1981166001600160a01b03848116918217845560405192169182907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0905f90a3505050565b804710156117815760405162461bcd60e51b815260040161024190612130565b5f826001600160a01b0316826040515f6040518083038185875af1925050503d805f81146117ca576040519150601f19603f3d011682016040523d82523d5f602084013e6117cf565b606091505b5050905080610a6a5760405162461bcd60e51b81526004016102419061221c565b5f826117fd8686856118fc565b1495945050505050565b610c4761188d565b5f8281527f02dd7bc7dec4dceedda775e58dd541e08a116c6c53815c0bd028192f7b626800602090815260408083206001600160a01b038516845290915290205460ff166108385780826040517fe2517d3f00000000000000000000000000000000000000000000000000000000815260040161024192919061198b565b7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a005468010000000000000000900460ff16610c47576040517fd7e6bcf800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61140661188d565b5f81815b848110156119345761192a8287878481811061191e5761191e612b81565b9050602002013561193d565b9150600101611900565b50949350505050565b5f818310611957575f828152602084905260409020610796565b505f9182526020526040902090565b5f6001600160a01b03821661073a565b61197f81611966565b82525050565b8061197f565b604081016119998285611976565b6107966020830184611985565b600b8152602081017f756e737570706f72746564000000000000000000000000000000000000000000815290505b60200190565b6020808252810161073a816119a6565b6020810161073a8284611985565b6001600160e01b031981165b8114611451575f5ffd5b803561073a816119f8565b5f60208284031215611a2c57611a2c5f5ffd5b6107968383611a0e565b80151561197f565b6020810161073a8284611a36565b5f60c08284031215611a5f57611a5f5f5ffd5b50919050565b5f60208284031215611a7857611a785f5ffd5b813567ffffffffffffffff811115611a9157611a915f5ffd5b6108cd84828501611a4c565b80611a04565b803561073a81611a9d565b5f60208284031215611ac157611ac15f5ffd5b6107968383611aa3565b611a0481611966565b803561073a81611acb565b5f60208284031215611af257611af25f5ffd5b6107968383611ad4565b5f5f60408385031215611b1057611b105f5ffd5b611b1a8484611aa3565b9150611b298460208501611ad4565b90509250929050565b5f5f60408385031215611b4657611b465f5ffd5b611b508484611ad4565b9150611b298460208501611aa3565b5f5f60408385031215611b7357611b735f5ffd5b611b1a8484611ad4565b6020810161073a8284611976565b5f5f60408385031215611b9f57611b9f5f5ffd5b823567ffffffffffffffff811115611bb857611bb85f5ffd5b611bc485828601611a4c565b925050611b298460208501611aa3565b63ffffffff8116611a04565b803561073a81611bd4565b5f5f83601f840112611bfe57611bfe5f5ffd5b50813567ffffffffffffffff811115611c1857611c185f5ffd5b602083019150836001820283011115611c3257611c325f5ffd5b9250929050565b60ff8116611a04565b803561073a81611c39565b5f5f5f5f5f60808688031215611c6457611c645f5ffd5b611c6e8787611be0565b9450611c7d8760208801611be0565b9350604086013567ffffffffffffffff811115611c9b57611c9b5f5ffd5b611ca788828901611beb565b9350935050611cb98760608801611c42565b90509295509295909350565b67ffffffffffffffff811661197f565b6020810161073a8284611cc5565b5f60808284031215611a5f57611a5f5f5ffd5b5f5f83601f840112611d0957611d095f5ffd5b50813567ffffffffffffffff811115611d2357611d235f5ffd5b602083019150836020820283011115611c3257611c325f5ffd5b5f5f5f5f60c08587031215611d5357611d535f5ffd5b611d5d8686611ce3565b9350608085013567ffffffffffffffff811115611d7b57611d7b5f5ffd5b611d8787828801611cf6565b9350935050611d998660a08701611aa3565b905092959194509250565b5f5f60408385031215611db857611db85f5ffd5b611b508484611aa3565b5f5f5f5f60608587031215611dd857611dd85f5ffd5b843567ffffffffffffffff811115611df157611df15f5ffd5b611dfd87828801611a4c565b945050602085013567ffffffffffffffff811115611e1c57611e1c5f5ffd5b611e2887828801611cf6565b9350935050611d998660408701611aa3565b805161073a81611a9d565b5f60208284031215611e5857611e585f5ffd5b6107968383611e3a565b505f61073a6020830183611ad4565b67ffffffffffffffff8116611a04565b803561073a81611e71565b505f61073a6020830183611e81565b505f61073a6020830183611be0565b63ffffffff811661197f565b5f808335601e1936859003018112611ecf57611ecf5f5ffd5b830160208101925035905067ffffffffffffffff811115611ef157611ef15f5ffd5b36819003821315611c3257611c325f5ffd5b82818337505f910152565b818352602083019250611f22828483611f03565b50601f01601f19160190565b505f61073a6020830183611c42565b60ff811661197f565b5f60c08301611f558380611e62565b611f5f8582611976565b50611f6d6020840184611e8c565b611f7a6020860182611cc5565b50611f886040840184611e9b565b611f956040860182611eaa565b50611fa36060840184611e9b565b611fb06060860182611eaa565b50611fbe6080840184611eb6565b8583036080870152611fd1838284611f0e565b92505050611fe260a0840184611f2e565b611fef60a0860182611f3d565b509392505050565b602080825281016107968184611f46565b60218152602081017f54686973206d65737361676520776173206e65766572207375626d69747465648152601760f91b602082015290505b60400190565b6020808252810161073a81612008565b601a8152602081017f537461746520726f6f7420646f6573206e6f742065786973742e000000000000815290506119d4565b6020808252810161073a81612056565b60308152602081017f417474656d7074696e6720746f2073656e642076616c756520776974686f757481527f2070726f766964696e672045746865720000000000000000000000000000000060208201529050612040565b6020808252810161073a81612098565b60208082527f496e73756666696369656e742066756e647320746f2073656e642076616c756591019081526119d4565b6020808252810161073a81612100565b634e487b7160e01b5f52601160045260245ffd5b8181038181111561073a5761073a612140565b60248152602081017f4661696c656420746f2073656e64206665657320746f206665657320636f6e7481527f726163740000000000000000000000000000000000000000000000000000000060208201529050612040565b6020808252810161073a81612167565b604081016121dd8285611985565b6107966020830184611cc5565b60148152602081017f6661696c65642073656e64696e672076616c7565000000000000000000000000815290506119d4565b6020808252810161073a816121ea565b5f61073a82612239565b90565b67ffffffffffffffff1690565b61197f8161222c565b6020810161073a8284612246565b6001600160a01b0391821691908116908282039081111561073a5761073a612140565b60118152602081017f4e6f74206f776e6572206f722073656c66000000000000000000000000000000815290506119d4565b6020808252810161073a81612280565b8082018082111561073a5761073a612140565b60218152602081017f4d657373616765207375626d6974746564206d6f7265207468616e206f6e636581527f210000000000000000000000000000000000000000000000000000000000000060208201529050612040565b6020808252810161073a816122d5565b5f60208284031215612350576123505f5ffd5b6107968383611be0565b5f813561073a81611acb565b5f6001600160a01b03835b81169019929092169190911792915050565b5f61073a82611966565b5f61073a82612383565b6123a08261238d565b6123ab818354612366565b8255505050565b5f813561073a81611e71565b5f7bffffffffffffffff00000000000000000000000000000000000000006123718460a01b90565b5f61073a67ffffffffffffffff8316612239565b612403826123e6565b6123ab8183546123be565b5f813561073a81611bd4565b5f6001600160e01b03196123718460e01b90565b5f63ffffffff821661073a565b6124448261242e565b6123ab81835461241a565b5f63ffffffff83612371565b6124648261242e565b6123ab81835461244f565b5f808335601e1936859003018112612488576124885f5ffd5b8301915050803567ffffffffffffffff8111156124a6576124a65f5ffd5b602082019150600181023603821315611c3257611c325f5ffd5b634e487b7160e01b5f52604160045260245ffd5b634e487b7160e01b5f52602260045260245ffd5b6002810460018216806124fc57607f821691505b602082108103611a5f57611a5f6124d4565b5f61073a6122368381565b6125228361250e565b81545f1960089490940293841b1916921b91909117905550565b5f610a6a818484612519565b818110156108385761255a5f8261253c565b600101612548565b601f821115610a6a575f818152602090206020601f850104810160208510156125885750805b6110a96020601f860104830182612548565b8267ffffffffffffffff8111156125b3576125b36124c0565b6125bd82546124e8565b6125c8828285612562565b505f601f8211600181146125fa575f83156125e35750848201355b5f19600885021c1981166002850217855550611274565b5f84815260208120601f198516915b828110156126295787850135825560209485019460019092019101612609565b5084821015612645575f196008601f8716021c19878501351681555b5050505060020260010190555050565b610a6a83838361259a565b5f813561073a81611c39565b5f60ff821661073a565b61267f8261266c565b815460ff191660ff8216176123ab565b80828061269b8161235a565b90506126a78184612397565b505060208301806126b7826123b2565b90506126c381846123fa565b505060408301806126d38261240e565b90506126df818461243b565b50505060608201806126f08261240e565b90506126ff816001850161245b565b505061270e608083018361246f565b61271c818360028601612655565b505060a082018061272c82612660565b905061087f8160038501612676565b610838828261268f565b60258152602081017f496e73756666696369656e742066756e647320746f207075626c697368206d6581527f737361676500000000000000000000000000000000000000000000000000000060208201529050612040565b6020808252810161073a81612745565b60c081016127bb828a611976565b6127c86020830189611cc5565b6127d56040830188611eaa565b6127e26060830187611eaa565b81810360808301526127f5818587611f0e565b905061280460a0830184611f3d565b98975050505050505050565b602a8152602081017f526f6f74206973206e6f74207075626c6973686564206f6e2074686973206d6581527f7373616765206275732e0000000000000000000000000000000000000000000060208201529050612040565b6020808252810161073a81612810565b60218152602081017f526f6f74206973206e6f7420636f6e736964657265642066696e616c207965748152601760f91b60208201529050612040565b6020808252810161073a81612878565b505f61073a6020830183611aa3565b6128dd8180611e62565b6128e78382611976565b506128f56020820182611e62565b6129026020840182611976565b5061291060408201826128c4565b61291d6040840182611985565b5061292b6060820182611e8c565b610a6a6060840182611cc5565b6080810161073a82846128d3565b60018152602081017f7600000000000000000000000000000000000000000000000000000000000000815290506119d4565b6040808252810161298881612946565b905061073a6020830184611985565b6129a18183611985565b602001919050565b60338152602081017f496e76616c696420696e636c7573696f6e2070726f6f6620666f722076616c7581527f65207472616e73666572206d6573736167652e0000000000000000000000000060208201529050612040565b6020808252810161073a816129a9565b60258152602081017f526f6f7420616c726561647920616464656420746f20746865206d657373616781527f652062757300000000000000000000000000000000000000000000000000000060208201529050612040565b6020808252810161073a81612a11565b5f60208284031215612a8c57612a8c5f5ffd5b6107968383611e81565b5f60208284031215612aa957612aa95f5ffd5b6107968383611c42565b60018152602081017f6d00000000000000000000000000000000000000000000000000000000000000815290506119d4565b6040808252810161298881612ab3565b60308152602081017f496e76616c696420696e636c7573696f6e2070726f6f6620666f722063726f7381527f7320636861696e206d6573736167652e0000000000000000000000000000000060208201529050612040565b6020808252810161073a81612af5565b67ffffffffffffffff91821691908116908282019081111561073a5761073a612140565b634e487b7160e01b5f52603260045260245ffdfea2646970667358221220d724d5325aadf52f31c25ec00d53a90e3a509ffc5438347ae5cdb2ead1779e8a64736f6c634300081c0033a2646970667358221220b90f88bd1d8b74b6f9c497f76f36b34507bc4f088789d9eeee0621742a0c0bd764736f6c634300081c0033",
}

// CrossChainABI is the input ABI used to generate the binding from.
// Deprecated: Use CrossChainMetaData.ABI instead.
var CrossChainABI = CrossChainMetaData.ABI

// CrossChainBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use CrossChainMetaData.Bin instead.
var CrossChainBin = CrossChainMetaData.Bin

// DeployCrossChain deploys a new Ethereum contract, binding an instance of CrossChain to it.
func DeployCrossChain(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *CrossChain, error) {
	parsed, err := CrossChainMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(CrossChainBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &CrossChain{CrossChainCaller: CrossChainCaller{contract: contract}, CrossChainTransactor: CrossChainTransactor{contract: contract}, CrossChainFilterer: CrossChainFilterer{contract: contract}}, nil
}

// CrossChain is an auto generated Go binding around an Ethereum contract.
type CrossChain struct {
	CrossChainCaller     // Read-only binding to the contract
	CrossChainTransactor // Write-only binding to the contract
	CrossChainFilterer   // Log filterer for contract events
}

// CrossChainCaller is an auto generated read-only Go binding around an Ethereum contract.
type CrossChainCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// CrossChainTransactor is an auto generated write-only Go binding around an Ethereum contract.
type CrossChainTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// CrossChainFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type CrossChainFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// CrossChainSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type CrossChainSession struct {
	Contract     *CrossChain       // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// CrossChainCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type CrossChainCallerSession struct {
	Contract *CrossChainCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts     // Call options to use throughout this session
}

// CrossChainTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type CrossChainTransactorSession struct {
	Contract     *CrossChainTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts     // Transaction auth options to use throughout this session
}

// CrossChainRaw is an auto generated low-level Go binding around an Ethereum contract.
type CrossChainRaw struct {
	Contract *CrossChain // Generic contract binding to access the raw methods on
}

// CrossChainCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type CrossChainCallerRaw struct {
	Contract *CrossChainCaller // Generic read-only contract binding to access the raw methods on
}

// CrossChainTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type CrossChainTransactorRaw struct {
	Contract *CrossChainTransactor // Generic write-only contract binding to access the raw methods on
}

// NewCrossChain creates a new instance of CrossChain, bound to a specific deployed contract.
func NewCrossChain(address common.Address, backend bind.ContractBackend) (*CrossChain, error) {
	contract, err := bindCrossChain(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &CrossChain{CrossChainCaller: CrossChainCaller{contract: contract}, CrossChainTransactor: CrossChainTransactor{contract: contract}, CrossChainFilterer: CrossChainFilterer{contract: contract}}, nil
}

// NewCrossChainCaller creates a new read-only instance of CrossChain, bound to a specific deployed contract.
func NewCrossChainCaller(address common.Address, caller bind.ContractCaller) (*CrossChainCaller, error) {
	contract, err := bindCrossChain(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &CrossChainCaller{contract: contract}, nil
}

// NewCrossChainTransactor creates a new write-only instance of CrossChain, bound to a specific deployed contract.
func NewCrossChainTransactor(address common.Address, transactor bind.ContractTransactor) (*CrossChainTransactor, error) {
	contract, err := bindCrossChain(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &CrossChainTransactor{contract: contract}, nil
}

// NewCrossChainFilterer creates a new log filterer instance of CrossChain, bound to a specific deployed contract.
func NewCrossChainFilterer(address common.Address, filterer bind.ContractFilterer) (*CrossChainFilterer, error) {
	contract, err := bindCrossChain(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &CrossChainFilterer{contract: contract}, nil
}

// bindCrossChain binds a generic wrapper to an already deployed contract.
func bindCrossChain(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := CrossChainMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_CrossChain *CrossChainRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _CrossChain.Contract.CrossChainCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_CrossChain *CrossChainRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _CrossChain.Contract.CrossChainTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_CrossChain *CrossChainRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _CrossChain.Contract.CrossChainTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_CrossChain *CrossChainCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _CrossChain.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_CrossChain *CrossChainTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _CrossChain.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_CrossChain *CrossChainTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _CrossChain.Contract.contract.Transact(opts, method, params...)
}

// IsBundleAvailable is a free data retrieval call binding the contract method 0xa4ab2faa.
//
// Solidity: function isBundleAvailable(bytes[] crossChainHashes) view returns(bool)
func (_CrossChain *CrossChainCaller) IsBundleAvailable(opts *bind.CallOpts, crossChainHashes [][]byte) (bool, error) {
	var out []interface{}
	err := _CrossChain.contract.Call(opts, &out, "isBundleAvailable", crossChainHashes)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsBundleAvailable is a free data retrieval call binding the contract method 0xa4ab2faa.
//
// Solidity: function isBundleAvailable(bytes[] crossChainHashes) view returns(bool)
func (_CrossChain *CrossChainSession) IsBundleAvailable(crossChainHashes [][]byte) (bool, error) {
	return _CrossChain.Contract.IsBundleAvailable(&_CrossChain.CallOpts, crossChainHashes)
}

// IsBundleAvailable is a free data retrieval call binding the contract method 0xa4ab2faa.
//
// Solidity: function isBundleAvailable(bytes[] crossChainHashes) view returns(bool)
func (_CrossChain *CrossChainCallerSession) IsBundleAvailable(crossChainHashes [][]byte) (bool, error) {
	return _CrossChain.Contract.IsBundleAvailable(&_CrossChain.CallOpts, crossChainHashes)
}

// IsBundleSaved is a free data retrieval call binding the contract method 0x84154826.
//
// Solidity: function isBundleSaved(bytes32 ) view returns(bool)
func (_CrossChain *CrossChainCaller) IsBundleSaved(opts *bind.CallOpts, arg0 [32]byte) (bool, error) {
	var out []interface{}
	err := _CrossChain.contract.Call(opts, &out, "isBundleSaved", arg0)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsBundleSaved is a free data retrieval call binding the contract method 0x84154826.
//
// Solidity: function isBundleSaved(bytes32 ) view returns(bool)
func (_CrossChain *CrossChainSession) IsBundleSaved(arg0 [32]byte) (bool, error) {
	return _CrossChain.Contract.IsBundleSaved(&_CrossChain.CallOpts, arg0)
}

// IsBundleSaved is a free data retrieval call binding the contract method 0x84154826.
//
// Solidity: function isBundleSaved(bytes32 ) view returns(bool)
func (_CrossChain *CrossChainCallerSession) IsBundleSaved(arg0 [32]byte) (bool, error) {
	return _CrossChain.Contract.IsBundleSaved(&_CrossChain.CallOpts, arg0)
}

// IsWithdrawalSpent is a free data retrieval call binding the contract method 0x2f0cb9e3.
//
// Solidity: function isWithdrawalSpent(bytes32 ) view returns(bool)
func (_CrossChain *CrossChainCaller) IsWithdrawalSpent(opts *bind.CallOpts, arg0 [32]byte) (bool, error) {
	var out []interface{}
	err := _CrossChain.contract.Call(opts, &out, "isWithdrawalSpent", arg0)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsWithdrawalSpent is a free data retrieval call binding the contract method 0x2f0cb9e3.
//
// Solidity: function isWithdrawalSpent(bytes32 ) view returns(bool)
func (_CrossChain *CrossChainSession) IsWithdrawalSpent(arg0 [32]byte) (bool, error) {
	return _CrossChain.Contract.IsWithdrawalSpent(&_CrossChain.CallOpts, arg0)
}

// IsWithdrawalSpent is a free data retrieval call binding the contract method 0x2f0cb9e3.
//
// Solidity: function isWithdrawalSpent(bytes32 ) view returns(bool)
func (_CrossChain *CrossChainCallerSession) IsWithdrawalSpent(arg0 [32]byte) (bool, error) {
	return _CrossChain.Contract.IsWithdrawalSpent(&_CrossChain.CallOpts, arg0)
}

// MerkleMessageBus is a free data retrieval call binding the contract method 0xe874eb20.
//
// Solidity: function merkleMessageBus() view returns(address)
func (_CrossChain *CrossChainCaller) MerkleMessageBus(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _CrossChain.contract.Call(opts, &out, "merkleMessageBus")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// MerkleMessageBus is a free data retrieval call binding the contract method 0xe874eb20.
//
// Solidity: function merkleMessageBus() view returns(address)
func (_CrossChain *CrossChainSession) MerkleMessageBus() (common.Address, error) {
	return _CrossChain.Contract.MerkleMessageBus(&_CrossChain.CallOpts)
}

// MerkleMessageBus is a free data retrieval call binding the contract method 0xe874eb20.
//
// Solidity: function merkleMessageBus() view returns(address)
func (_CrossChain *CrossChainCallerSession) MerkleMessageBus() (common.Address, error) {
	return _CrossChain.Contract.MerkleMessageBus(&_CrossChain.CallOpts)
}

// MessageBus is a free data retrieval call binding the contract method 0xa1a227fa.
//
// Solidity: function messageBus() view returns(address)
func (_CrossChain *CrossChainCaller) MessageBus(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _CrossChain.contract.Call(opts, &out, "messageBus")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// MessageBus is a free data retrieval call binding the contract method 0xa1a227fa.
//
// Solidity: function messageBus() view returns(address)
func (_CrossChain *CrossChainSession) MessageBus() (common.Address, error) {
	return _CrossChain.Contract.MessageBus(&_CrossChain.CallOpts)
}

// MessageBus is a free data retrieval call binding the contract method 0xa1a227fa.
//
// Solidity: function messageBus() view returns(address)
func (_CrossChain *CrossChainCallerSession) MessageBus() (common.Address, error) {
	return _CrossChain.Contract.MessageBus(&_CrossChain.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_CrossChain *CrossChainCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _CrossChain.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_CrossChain *CrossChainSession) Owner() (common.Address, error) {
	return _CrossChain.Contract.Owner(&_CrossChain.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_CrossChain *CrossChainCallerSession) Owner() (common.Address, error) {
	return _CrossChain.Contract.Owner(&_CrossChain.CallOpts)
}

// ExtractNativeValue is a paid mutator transaction binding the contract method 0x6af52662.
//
// Solidity: function extractNativeValue((address,address,uint256,uint64) _msg, bytes32[] proof, bytes32 root) returns()
func (_CrossChain *CrossChainTransactor) ExtractNativeValue(opts *bind.TransactOpts, _msg StructsValueTransferMessage, proof [][32]byte, root [32]byte) (*types.Transaction, error) {
	return _CrossChain.contract.Transact(opts, "extractNativeValue", _msg, proof, root)
}

// ExtractNativeValue is a paid mutator transaction binding the contract method 0x6af52662.
//
// Solidity: function extractNativeValue((address,address,uint256,uint64) _msg, bytes32[] proof, bytes32 root) returns()
func (_CrossChain *CrossChainSession) ExtractNativeValue(_msg StructsValueTransferMessage, proof [][32]byte, root [32]byte) (*types.Transaction, error) {
	return _CrossChain.Contract.ExtractNativeValue(&_CrossChain.TransactOpts, _msg, proof, root)
}

// ExtractNativeValue is a paid mutator transaction binding the contract method 0x6af52662.
//
// Solidity: function extractNativeValue((address,address,uint256,uint64) _msg, bytes32[] proof, bytes32 root) returns()
func (_CrossChain *CrossChainTransactorSession) ExtractNativeValue(_msg StructsValueTransferMessage, proof [][32]byte, root [32]byte) (*types.Transaction, error) {
	return _CrossChain.Contract.ExtractNativeValue(&_CrossChain.TransactOpts, _msg, proof, root)
}

// Initialize is a paid mutator transaction binding the contract method 0xc4d66de8.
//
// Solidity: function initialize(address owner) returns()
func (_CrossChain *CrossChainTransactor) Initialize(opts *bind.TransactOpts, owner common.Address) (*types.Transaction, error) {
	return _CrossChain.contract.Transact(opts, "initialize", owner)
}

// Initialize is a paid mutator transaction binding the contract method 0xc4d66de8.
//
// Solidity: function initialize(address owner) returns()
func (_CrossChain *CrossChainSession) Initialize(owner common.Address) (*types.Transaction, error) {
	return _CrossChain.Contract.Initialize(&_CrossChain.TransactOpts, owner)
}

// Initialize is a paid mutator transaction binding the contract method 0xc4d66de8.
//
// Solidity: function initialize(address owner) returns()
func (_CrossChain *CrossChainTransactorSession) Initialize(owner common.Address) (*types.Transaction, error) {
	return _CrossChain.Contract.Initialize(&_CrossChain.TransactOpts, owner)
}

// PauseWithdrawals is a paid mutator transaction binding the contract method 0xf4cc87ba.
//
// Solidity: function pauseWithdrawals(bool _pause) returns()
func (_CrossChain *CrossChainTransactor) PauseWithdrawals(opts *bind.TransactOpts, _pause bool) (*types.Transaction, error) {
	return _CrossChain.contract.Transact(opts, "pauseWithdrawals", _pause)
}

// PauseWithdrawals is a paid mutator transaction binding the contract method 0xf4cc87ba.
//
// Solidity: function pauseWithdrawals(bool _pause) returns()
func (_CrossChain *CrossChainSession) PauseWithdrawals(_pause bool) (*types.Transaction, error) {
	return _CrossChain.Contract.PauseWithdrawals(&_CrossChain.TransactOpts, _pause)
}

// PauseWithdrawals is a paid mutator transaction binding the contract method 0xf4cc87ba.
//
// Solidity: function pauseWithdrawals(bool _pause) returns()
func (_CrossChain *CrossChainTransactorSession) PauseWithdrawals(_pause bool) (*types.Transaction, error) {
	return _CrossChain.Contract.PauseWithdrawals(&_CrossChain.TransactOpts, _pause)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_CrossChain *CrossChainTransactor) RenounceOwnership(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _CrossChain.contract.Transact(opts, "renounceOwnership")
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_CrossChain *CrossChainSession) RenounceOwnership() (*types.Transaction, error) {
	return _CrossChain.Contract.RenounceOwnership(&_CrossChain.TransactOpts)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_CrossChain *CrossChainTransactorSession) RenounceOwnership() (*types.Transaction, error) {
	return _CrossChain.Contract.RenounceOwnership(&_CrossChain.TransactOpts)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_CrossChain *CrossChainTransactor) TransferOwnership(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _CrossChain.contract.Transact(opts, "transferOwnership", newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_CrossChain *CrossChainSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _CrossChain.Contract.TransferOwnership(&_CrossChain.TransactOpts, newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_CrossChain *CrossChainTransactorSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _CrossChain.Contract.TransferOwnership(&_CrossChain.TransactOpts, newOwner)
}

// CrossChainInitializedIterator is returned from FilterInitialized and is used to iterate over the raw logs and unpacked data for Initialized events raised by the CrossChain contract.
type CrossChainInitializedIterator struct {
	Event *CrossChainInitialized // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *CrossChainInitializedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(CrossChainInitialized)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(CrossChainInitialized)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *CrossChainInitializedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *CrossChainInitializedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// CrossChainInitialized represents a Initialized event raised by the CrossChain contract.
type CrossChainInitialized struct {
	Version uint64
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterInitialized is a free log retrieval operation binding the contract event 0xc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d2.
//
// Solidity: event Initialized(uint64 version)
func (_CrossChain *CrossChainFilterer) FilterInitialized(opts *bind.FilterOpts) (*CrossChainInitializedIterator, error) {

	logs, sub, err := _CrossChain.contract.FilterLogs(opts, "Initialized")
	if err != nil {
		return nil, err
	}
	return &CrossChainInitializedIterator{contract: _CrossChain.contract, event: "Initialized", logs: logs, sub: sub}, nil
}

// WatchInitialized is a free log subscription operation binding the contract event 0xc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d2.
//
// Solidity: event Initialized(uint64 version)
func (_CrossChain *CrossChainFilterer) WatchInitialized(opts *bind.WatchOpts, sink chan<- *CrossChainInitialized) (event.Subscription, error) {

	logs, sub, err := _CrossChain.contract.WatchLogs(opts, "Initialized")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(CrossChainInitialized)
				if err := _CrossChain.contract.UnpackLog(event, "Initialized", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseInitialized is a log parse operation binding the contract event 0xc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d2.
//
// Solidity: event Initialized(uint64 version)
func (_CrossChain *CrossChainFilterer) ParseInitialized(log types.Log) (*CrossChainInitialized, error) {
	event := new(CrossChainInitialized)
	if err := _CrossChain.contract.UnpackLog(event, "Initialized", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// CrossChainLogCrossChainContractCreatedIterator is returned from FilterLogCrossChainContractCreated and is used to iterate over the raw logs and unpacked data for LogCrossChainContractCreated events raised by the CrossChain contract.
type CrossChainLogCrossChainContractCreatedIterator struct {
	Event *CrossChainLogCrossChainContractCreated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *CrossChainLogCrossChainContractCreatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(CrossChainLogCrossChainContractCreated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(CrossChainLogCrossChainContractCreated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *CrossChainLogCrossChainContractCreatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *CrossChainLogCrossChainContractCreatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// CrossChainLogCrossChainContractCreated represents a LogCrossChainContractCreated event raised by the CrossChain contract.
type CrossChainLogCrossChainContractCreated struct {
	MessageBusAddress common.Address
	Raw               types.Log // Blockchain specific contextual infos
}

// FilterLogCrossChainContractCreated is a free log retrieval operation binding the contract event 0x4c3bb7ff9ee26b36b3b248a5172618e61b9912d8bc9126b7985a4099546a43dc.
//
// Solidity: event LogCrossChainContractCreated(address messageBusAddress)
func (_CrossChain *CrossChainFilterer) FilterLogCrossChainContractCreated(opts *bind.FilterOpts) (*CrossChainLogCrossChainContractCreatedIterator, error) {

	logs, sub, err := _CrossChain.contract.FilterLogs(opts, "LogCrossChainContractCreated")
	if err != nil {
		return nil, err
	}
	return &CrossChainLogCrossChainContractCreatedIterator{contract: _CrossChain.contract, event: "LogCrossChainContractCreated", logs: logs, sub: sub}, nil
}

// WatchLogCrossChainContractCreated is a free log subscription operation binding the contract event 0x4c3bb7ff9ee26b36b3b248a5172618e61b9912d8bc9126b7985a4099546a43dc.
//
// Solidity: event LogCrossChainContractCreated(address messageBusAddress)
func (_CrossChain *CrossChainFilterer) WatchLogCrossChainContractCreated(opts *bind.WatchOpts, sink chan<- *CrossChainLogCrossChainContractCreated) (event.Subscription, error) {

	logs, sub, err := _CrossChain.contract.WatchLogs(opts, "LogCrossChainContractCreated")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(CrossChainLogCrossChainContractCreated)
				if err := _CrossChain.contract.UnpackLog(event, "LogCrossChainContractCreated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogCrossChainContractCreated is a log parse operation binding the contract event 0x4c3bb7ff9ee26b36b3b248a5172618e61b9912d8bc9126b7985a4099546a43dc.
//
// Solidity: event LogCrossChainContractCreated(address messageBusAddress)
func (_CrossChain *CrossChainFilterer) ParseLogCrossChainContractCreated(log types.Log) (*CrossChainLogCrossChainContractCreated, error) {
	event := new(CrossChainLogCrossChainContractCreated)
	if err := _CrossChain.contract.UnpackLog(event, "LogCrossChainContractCreated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// CrossChainOwnershipTransferredIterator is returned from FilterOwnershipTransferred and is used to iterate over the raw logs and unpacked data for OwnershipTransferred events raised by the CrossChain contract.
type CrossChainOwnershipTransferredIterator struct {
	Event *CrossChainOwnershipTransferred // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *CrossChainOwnershipTransferredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(CrossChainOwnershipTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(CrossChainOwnershipTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *CrossChainOwnershipTransferredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *CrossChainOwnershipTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// CrossChainOwnershipTransferred represents a OwnershipTransferred event raised by the CrossChain contract.
type CrossChainOwnershipTransferred struct {
	PreviousOwner common.Address
	NewOwner      common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterOwnershipTransferred is a free log retrieval operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_CrossChain *CrossChainFilterer) FilterOwnershipTransferred(opts *bind.FilterOpts, previousOwner []common.Address, newOwner []common.Address) (*CrossChainOwnershipTransferredIterator, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _CrossChain.contract.FilterLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return &CrossChainOwnershipTransferredIterator{contract: _CrossChain.contract, event: "OwnershipTransferred", logs: logs, sub: sub}, nil
}

// WatchOwnershipTransferred is a free log subscription operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_CrossChain *CrossChainFilterer) WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *CrossChainOwnershipTransferred, previousOwner []common.Address, newOwner []common.Address) (event.Subscription, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _CrossChain.contract.WatchLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(CrossChainOwnershipTransferred)
				if err := _CrossChain.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOwnershipTransferred is a log parse operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_CrossChain *CrossChainFilterer) ParseOwnershipTransferred(log types.Log) (*CrossChainOwnershipTransferred, error) {
	event := new(CrossChainOwnershipTransferred)
	if err := _CrossChain.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// CrossChainWithdrawalsPausedIterator is returned from FilterWithdrawalsPaused and is used to iterate over the raw logs and unpacked data for WithdrawalsPaused events raised by the CrossChain contract.
type CrossChainWithdrawalsPausedIterator struct {
	Event *CrossChainWithdrawalsPaused // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *CrossChainWithdrawalsPausedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(CrossChainWithdrawalsPaused)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(CrossChainWithdrawalsPaused)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *CrossChainWithdrawalsPausedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *CrossChainWithdrawalsPausedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// CrossChainWithdrawalsPaused represents a WithdrawalsPaused event raised by the CrossChain contract.
type CrossChainWithdrawalsPaused struct {
	Paused bool
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterWithdrawalsPaused is a free log retrieval operation binding the contract event 0x129d33f7856617012aed60524381cfff7233cfc57df58d9f6613a5593d3dc218.
//
// Solidity: event WithdrawalsPaused(bool paused)
func (_CrossChain *CrossChainFilterer) FilterWithdrawalsPaused(opts *bind.FilterOpts) (*CrossChainWithdrawalsPausedIterator, error) {

	logs, sub, err := _CrossChain.contract.FilterLogs(opts, "WithdrawalsPaused")
	if err != nil {
		return nil, err
	}
	return &CrossChainWithdrawalsPausedIterator{contract: _CrossChain.contract, event: "WithdrawalsPaused", logs: logs, sub: sub}, nil
}

// WatchWithdrawalsPaused is a free log subscription operation binding the contract event 0x129d33f7856617012aed60524381cfff7233cfc57df58d9f6613a5593d3dc218.
//
// Solidity: event WithdrawalsPaused(bool paused)
func (_CrossChain *CrossChainFilterer) WatchWithdrawalsPaused(opts *bind.WatchOpts, sink chan<- *CrossChainWithdrawalsPaused) (event.Subscription, error) {

	logs, sub, err := _CrossChain.contract.WatchLogs(opts, "WithdrawalsPaused")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(CrossChainWithdrawalsPaused)
				if err := _CrossChain.contract.UnpackLog(event, "WithdrawalsPaused", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseWithdrawalsPaused is a log parse operation binding the contract event 0x129d33f7856617012aed60524381cfff7233cfc57df58d9f6613a5593d3dc218.
//
// Solidity: event WithdrawalsPaused(bool paused)
func (_CrossChain *CrossChainFilterer) ParseWithdrawalsPaused(log types.Log) (*CrossChainWithdrawalsPaused, error) {
	event := new(CrossChainWithdrawalsPaused)
	if err := _CrossChain.contract.UnpackLog(event, "WithdrawalsPaused", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
