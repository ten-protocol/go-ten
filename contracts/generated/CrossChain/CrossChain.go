// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package CrossChain

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
	_ = abi.ConvertType
)

// CrossChainMetaData contains all meta data concerning the CrossChain contract.
var CrossChainMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"InvalidInitialization\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotInitializing\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ReentrancyGuardReentrantCall\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"version\",\"type\":\"uint64\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"paused\",\"type\":\"bool\"}],\"name\":\"WithdrawalsPaused\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes[]\",\"name\":\"crossChainHashes\",\"type\":\"bytes[]\"}],\"name\":\"isBundleAvailable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"isBundleSaved\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"isWithdrawalSpent\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"merkleMessageBus\",\"outputs\":[{\"internalType\":\"contractIMerkleTreeMessageBus\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"messageBus\",\"outputs\":[{\"internalType\":\"contractIMessageBus\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_pause\",\"type\":\"bool\"}],\"name\":\"pauseWithdrawals\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
	Bin: "0x6080604052348015600e575f5ffd5b50601633601a565b608a565b7f9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c19930080546001600160a01b031981166001600160a01b03848116918217845560405192169182907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0905f90a3505050565b6131c5806100975f395ff3fe608060405234801561000f575f5ffd5b50600436106100b9575f3560e01c8063a4ab2faa11610072578063e874eb2011610058578063e874eb201461019f578063f2fde38b146101b2578063f4cc87ba146101c5575f5ffd5b8063a4ab2faa14610179578063c4d66de81461018c575f5ffd5b806384154826116100a257806384154826146100ff5780638da5cb5b14610121578063a1a227fa14610159575f5ffd5b80632f0cb9e3146100bd578063715018a6146100f5575b5f5ffd5b6100df6100cb366004610728565b60016020525f908152604090205460ff1681565b6040516100ec9190610756565b60405180910390f35b6100fd6101d8565b005b6100df61010d366004610728565b60026020525f908152604090205460ff1681565b7f9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c199300546001600160a01b03166040516100ec919061077d565b60035461016c906001600160a01b031681565b6040516100ec91906107a8565b6100df610187366004610955565b6101eb565b6100fd61019a3660046109a9565b610267565b60045461016c906001600160a01b031681565b6100fd6101c03660046109a9565b6104a0565b6100fd6101d33660046109d9565b6104ff565b6101e061054f565b6101e95f6105c3565b565b5f80805b835181101561024f578184828151811061020b5761020b6109f6565b602002602001015161021c90610a13565b60405160200161022d929190610a51565b60408051601f19818403018152919052805160209091012091506001016101ef565b505f9081526002602052604090205460ff1692915050565b7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00805468010000000000000000810460ff16159067ffffffffffffffff165f811580156102b15750825b90505f8267ffffffffffffffff1660011480156102cd5750303b155b9050811580156102db575080155b15610312576040517ff92ee8a900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b845467ffffffffffffffff19166001178555831561034657845468ff00000000000000001916680100000000000000001785555b61034f86610640565b610357610651565b604051610363906106fe565b604051809103905ff08015801561037c573d5f5f3e3d5ffd5b506004805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b039290921691821781556040517f485cc95500000000000000000000000000000000000000000000000000000000815263485cc955916103e3918a91309101610a6c565b5f604051808303815f87803b1580156103fa575f5ffd5b505af115801561040c573d5f5f3e3d5ffd5b50506004546003805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0390921691909117905550505f805460ff19169055831561049857845468ff0000000000000000191685556040517fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d29061048f90600190610aa1565b60405180910390a15b505050505050565b6104a861054f565b6001600160a01b0381166104f3575f6040517f1e4fbdf70000000000000000000000000000000000000000000000000000000081526004016104ea919061077d565b60405180910390fd5b6104fc816105c3565b50565b61050761054f565b5f805460ff19168215151790556040517f129d33f7856617012aed60524381cfff7233cfc57df58d9f6613a5593d3dc21890610544908390610756565b60405180910390a150565b336105817f9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c199300546001600160a01b031690565b6001600160a01b0316146101e957336040517f118cdaa70000000000000000000000000000000000000000000000000000000081526004016104ea919061077d565b7f9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c199300805473ffffffffffffffffffffffffffffffffffffffff1981166001600160a01b03848116918217845560405192169182907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0905f90a3505050565b610648610661565b6104fc816106c8565b610659610661565b6101e96106d0565b7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a005468010000000000000000900460ff166101e9576040517fd7e6bcf800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6104a8610661565b6106d8610661565b60017f9b779b17422d0df92223018b32b4d1fa46e071723d6817e2486d003becc55f0055565b6126e080610ab083390190565b805b81146104fc575f5ffd5b80356107228161070b565b92915050565b5f6020828403121561073b5761073b5f5ffd5b6107458383610717565b9392505050565b8015155b82525050565b60208101610722828461074c565b5f6001600160a01b038216610722565b61075081610764565b602081016107228284610774565b5f61072282610764565b5f6107228261078b565b61075081610795565b60208101610722828461079f565b634e487b7160e01b5f52604160045260245ffd5b601f19601f830116810181811067ffffffffffffffff821117156107f0576107f06107b6565b6040525050565b5f61080160405190565b905061080d82826107ca565b919050565b5f67ffffffffffffffff82111561082b5761082b6107b6565b5060209081020190565b5f67ffffffffffffffff82111561084e5761084e6107b6565b601f19601f83011660200192915050565b82818337505f910152565b5f61087c61087784610835565b6107f7565b9050828152838383011115610892576108925f5ffd5b61074583602083018461085f565b5f82601f8301126108b2576108b25f5ffd5b6107458383356020850161086a565b5f6108ce61087784610812565b838152905060208082019084028301858111156108ec576108ec5f5ffd5b835b8181101561092a57803567ffffffffffffffff81111561090f5761090f5f5ffd5b61091b888288016108a0565b845250602092830192016108ee565b5050509392505050565b5f82601f830112610946576109465f5ffd5b610745838335602085016108c1565b5f60208284031215610968576109685f5ffd5b813567ffffffffffffffff811115610981576109815f5ffd5b61098d84828501610934565b949350505050565b61070d81610764565b803561072281610995565b5f602082840312156109bc576109bc5f5ffd5b610745838361099e565b80151561070d565b8035610722816109c6565b5f602082840312156109ec576109ec5f5ffd5b61074583836109ce565b634e487b7160e01b5f52603260045260245ffd5b5f610722825190565b5f610a1c825190565b60208301610a2981610a0a565b9250506020811015610a45575f1960086020839003021b821691505b50919050565b80610750565b60408101610a5f8285610a4b565b6107456020830184610a4b565b60408101610a7a8285610774565b6107456020830184610774565b5f67ffffffffffffffff8216610722565b61075081610a87565b602081016107228284610a9856fe6080604052348015600e575f5ffd5b50601633601a565b608a565b7f9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c19930080546001600160a01b031981166001600160a01b03848116918217845560405192169182907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0905f90a3505050565b612649806100975f395ff3fe608060405260043610610194575f3560e01c8063715018a6116100e0578063b1454caa11610089578063d547741f11610063578063d547741f1461050f578063e138a8d21461052e578063f2fde38b1461054d578063fb8940291461056c57610194565b8063b1454caa146104b1578063b201246f146104d1578063b6aed0cb146104f057610194565b80639730886d116100ba5780639730886d1461044c578063a217fddf1461046b578063ad7805e81461047e57610194565b8063715018a6146103915780638da5cb5b146103a557806391d14854146103e957610194565b8063248a9ca31161014257806336568abe1161011c57806336568abe1461033457806336d2da9014610353578063485cc9551461037257610194565b8063248a9ca3146102a95780632f2ff15d146102f657806333a88c721461031557610194565b80630fcfbd11116101735780630fcfbd111461024a5780630fe9188e146102695780631050afdd1461028a57610194565b8062a1b815146101c157806301ffc9a7146101eb57806302b4df1914610217575b34801561019f575f5ffd5b5060405162461bcd60e51b81526004016101b89061150a565b60405180910390fd5b3480156101cc575f5ffd5b506101d561058b565b6040516101e29190611522565b60405180910390f35b3480156101f6575f5ffd5b5061020a610205366004611551565b610614565b6040516101e29190611576565b348015610222575f5ffd5b506101d57f65c4b771cce18ff228842b3883a73079ee3e76bd08965f6dadb7cb56dbf6e19481565b348015610255575f5ffd5b506101d561026436600461159d565b61067c565b348015610274575f5ffd5b506102886102833660046115e6565b6106d9565b005b348015610295575f5ffd5b506102886102a4366004611627565b610740565b3480156102b4575f5ffd5b506101d56102c33660046115e6565b5f9081527f02dd7bc7dec4dceedda775e58dd541e08a116c6c53815c0bd028192f7b626800602052604090206001015490565b348015610301575f5ffd5b50610288610310366004611644565b610778565b348015610320575f5ffd5b5061020a61032f36600461159d565b6107c1565b34801561033f575f5ffd5b5061028861034e366004611644565b610811565b34801561035e575f5ffd5b5061028861036d366004611627565b610862565b34801561037d575f5ffd5b5061028861038c36600461167a565b6108d9565b34801561039c575f5ffd5b50610288610a83565b3480156103b0575f5ffd5b507f9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c199300546001600160a01b03166040516101e291906116a1565b3480156103f4575f5ffd5b5061020a610403366004611644565b5f9182527f02dd7bc7dec4dceedda775e58dd541e08a116c6c53815c0bd028192f7b626800602090815260408084206001600160a01b0393909316845291905290205460ff1690565b348015610457575f5ffd5b506102886104663660046116af565b610a96565b348015610476575f5ffd5b506101d55f81565b348015610489575f5ffd5b506101d57fe0d563514842a8c29151c49cd2698127f54dd344a9b2c74a42fe9be3e305fe9881565b6104c46104bf366004611771565b610bfb565b6040516101e291906117f9565b3480156104dc575f5ffd5b506102886104eb366004611861565b610d03565b3480156104fb575f5ffd5b5061028861050a3660046118c8565b610e01565b34801561051a575f5ffd5b50610288610529366004611644565b610e68565b348015610539575f5ffd5b506102886105483660046118f5565b610eab565b348015610558575f5ffd5b50610288610567366004611627565b610ff2565b348015610577575f5ffd5b50610288610586366004611627565b611048565b600354604080517f1a90a21900000000000000000000000000000000000000000000000000000000815290515f926001600160a01b031691631a90a2199160048083019260209291908290030181865afa1580156105eb573d5f5f3e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061060f9190611978565b905090565b5f6001600160e01b031982167f7965db0b00000000000000000000000000000000000000000000000000000000148061067657507f01ffc9a7000000000000000000000000000000000000000000000000000000006001600160e01b03198316145b92915050565b5f5f8260405160200161068f9190611b2a565b60408051601f1981840301815291815281516020928301205f81815292839052912054909150806106d25760405162461bcd60e51b81526004016101b890611b79565b9392505050565b7f65c4b771cce18ff228842b3883a73079ee3e76bd08965f6dadb7cb56dbf6e1946107038161107c565b5f82815260046020526040812054900361072f5760405162461bcd60e51b81526004016101b890611bbb565b505f90815260046020526040812055565b5f61074a8161107c565b6107747f65c4b771cce18ff228842b3883a73079ee3e76bd08965f6dadb7cb56dbf6e19483610e68565b5050565b5f8281527f02dd7bc7dec4dceedda775e58dd541e08a116c6c53815c0bd028192f7b62680060205260409020600101546107b18161107c565b6107bb8383611086565b50505050565b5f5f826040516020016107d49190611b2a565b60408051601f1981840301815291815281516020928301205f8181529283905291205490915080158015906108095750428111155b949350505050565b6001600160a01b0381163314610853576040517f6697b23200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61085d8282611152565b505050565b61086a6111f6565b5f816001600160a01b0316476040515f6040518083038185875af1925050503d805f81146108b3576040519150601f19603f3d011682016040523d82523d5f602084013e6108b8565b606091505b50509050806107745760405162461bcd60e51b81526004016101b890611bfd565b7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00805468010000000000000000810460ff16159067ffffffffffffffff165f811580156109235750825b90505f8267ffffffffffffffff16600114801561093f5750303b155b90508115801561094d575080155b15610984576040517ff92ee8a900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b845467ffffffffffffffff1916600117855583156109b857845468ff00000000000000001916680100000000000000001785555b6109c18761126a565b6109c961127b565b6109d35f88611086565b506109fe7f65c4b771cce18ff228842b3883a73079ee3e76bd08965f6dadb7cb56dbf6e19488611086565b50610a297fe0d563514842a8c29151c49cd2698127f54dd344a9b2c74a42fe9be3e305fe9887611086565b508315610a7a57845468ff0000000000000000191685556040517fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d290610a7190600190611c30565b60405180910390a15b50505050505050565b610a8b6111f6565b610a945f611283565b565b5f610aa2600130611c52565b9050610ad57f9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c199300546001600160a01b031690565b6001600160a01b0316336001600160a01b03161480610afc5750336001600160a01b038216145b610b185760405162461bcd60e51b81526004016101b890611ca7565b5f610b238342611cb7565b90505f84604051602001610b379190611b2a565b60408051601f1981840301815291815281516020928301205f8181529283905291205490915015610b7a5760405162461bcd60e51b81526004016101b890611d22565b5f81815260208181526040822084905560019190610b9a90880188611627565b6001600160a01b0316815260208101919091526040015f90812090610bc56080880160608901611d32565b63ffffffff1681526020808201929092526040015f9081208054600181018255908252919020869160040201610a7a8282612130565b6003545f906001600160a01b031615610cac575f610c1761058b565b905080341015610c395760405162461bcd60e51b81526004016101b890612192565b6003546040515f916001600160a01b03169083908381818185875af1925050503d805f8114610c83576040519150601f19603f3d011682016040523d82523d5f602084013e610c88565b606091505b5050905080610ca95760405162461bcd60e51b81526004016101b8906121fa565b50505b610cb53361130b565b90507fb93c37389233beb85a3a726c3f15c2d15533ee74cb602f20f490dfffef77593733828888888888604051610cf2979695949392919061220a565b60405180910390a195945050505050565b5f818152600460205260408120549003610d2f5760405162461bcd60e51b81526004016101b8906122c5565b5f81815260046020526040902054421015610d5c5760405162461bcd60e51b81526004016101b890612311565b5f84604051602001610d6e9190612395565b60405160208183030381529060405280519060200120604051602001610d9491906123d5565b604051602081830303815290604052805190602001209050610dde84848484604051602001610dc391906123fa565b60405160208183030381529060405280519060200120611368565b610dfa5760405162461bcd60e51b81526004016101b890612464565b5050505050565b7f65c4b771cce18ff228842b3883a73079ee3e76bd08965f6dadb7cb56dbf6e194610e2b8161107c565b5f8381526004602052604090205415610e565760405162461bcd60e51b81526004016101b8906124cc565b505f9182526004602052604090912055565b5f8281527f02dd7bc7dec4dceedda775e58dd541e08a116c6c53815c0bd028192f7b6268006020526040902060010154610ea18161107c565b6107bb8383611152565b5f818152600460205260408120549003610ed75760405162461bcd60e51b81526004016101b8906122c5565b5f81815260046020526040902054421015610f045760405162461bcd60e51b81526004016101b890612311565b5f610f126020860186611627565b610f2260408701602088016124dc565b610f326060880160408901611d32565b610f426080890160608a01611d32565b610f4f60808a018a611e64565b610f5f60c08c0160a08d016124f9565b604051602001610f75979695949392919061220a565b6040516020818303038152906040528051906020012090505f81604051602001610f9f9190612548565b604051602081830303815290604052805190602001209050610fce85858584604051602001610dc391906123fa565b610fea5760405162461bcd60e51b81526004016101b8906125b0565b505050505050565b610ffa6111f6565b6001600160a01b03811661103c575f6040517f1e4fbdf70000000000000000000000000000000000000000000000000000000081526004016101b891906116a1565b61104581611283565b50565b5f6110528161107c565b6107747f65c4b771cce18ff228842b3883a73079ee3e76bd08965f6dadb7cb56dbf6e19483610778565b611045813361137f565b5f8281527f02dd7bc7dec4dceedda775e58dd541e08a116c6c53815c0bd028192f7b626800602081815260408084206001600160a01b038616855290915282205460ff16611149575f848152602082815260408083206001600160a01b03871684529091529020805460ff191660011790556110ff3390565b6001600160a01b0316836001600160a01b0316857f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a46001915050610676565b5f915050610676565b5f8281527f02dd7bc7dec4dceedda775e58dd541e08a116c6c53815c0bd028192f7b626800602081815260408084206001600160a01b038616855290915282205460ff1615611149575f848152602082815260408083206001600160a01b0387168085529252808320805460ff1916905551339287917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a46001915050610676565b336112287f9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c199300546001600160a01b031690565b6001600160a01b031614610a9457336040517f118cdaa70000000000000000000000000000000000000000000000000000000081526004016101b891906116a1565b6112726113fd565b61104581611464565b610a946113fd565b7f9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c19930080547fffffffffffffffffffffffff000000000000000000000000000000000000000081166001600160a01b03848116918217845560405192169182907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0905f90a3505050565b6001600160a01b0381165f908152600260205260408120805467ffffffffffffffff16916001919061133d83856125c0565b92506101000a81548167ffffffffffffffff021916908367ffffffffffffffff160217905550919050565b5f8261137586868561146c565b1495945050505050565b5f8281527f02dd7bc7dec4dceedda775e58dd541e08a116c6c53815c0bd028192f7b626800602090815260408083206001600160a01b038516845290915290205460ff166107745780826040517fe2517d3f0000000000000000000000000000000000000000000000000000000081526004016101b89291906125e4565b7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a005468010000000000000000900460ff16610a94576040517fd7e6bcf800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b610ffa6113fd565b5f81815b848110156114a45761149a8287878481811061148e5761148e6125ff565b905060200201356114ad565b9150600101611470565b50949350505050565b5f8183106114c7575f8281526020849052604090206106d2565b505f9182526020526040902090565b600b8152602081017f756e737570706f72746564000000000000000000000000000000000000000000815290505b60200190565b60208082528101610676816114d6565b805b82525050565b60208101610676828461151a565b6001600160e01b031981165b8114611045575f5ffd5b803561067681611530565b5f60208284031215611564576115645f5ffd5b6106d28383611546565b80151561151c565b60208101610676828461156e565b5f60c08284031215611597576115975f5ffd5b50919050565b5f602082840312156115b0576115b05f5ffd5b813567ffffffffffffffff8111156115c9576115c95f5ffd5b61080984828501611584565b8061153c565b8035610676816115d5565b5f602082840312156115f9576115f95f5ffd5b6106d283836115db565b5f6001600160a01b038216610676565b61153c81611603565b803561067681611613565b5f6020828403121561163a5761163a5f5ffd5b6106d2838361161c565b5f5f60408385031215611658576116585f5ffd5b61166284846115db565b9150611671846020850161161c565b90509250929050565b5f5f6040838503121561168e5761168e5f5ffd5b611662848461161c565b61151c81611603565b602081016106768284611698565b5f5f604083850312156116c3576116c35f5ffd5b823567ffffffffffffffff8111156116dc576116dc5f5ffd5b6116e885828601611584565b92505061167184602085016115db565b63ffffffff811661153c565b8035610676816116f8565b5f5f83601f840112611722576117225f5ffd5b50813567ffffffffffffffff81111561173c5761173c5f5ffd5b602083019150836001820283011115611756576117565f5ffd5b9250929050565b60ff811661153c565b80356106768161175d565b5f5f5f5f5f60808688031215611788576117885f5ffd5b6117928787611704565b94506117a18760208801611704565b9350604086013567ffffffffffffffff8111156117bf576117bf5f5ffd5b6117cb8882890161170f565b93509350506117dd8760608801611766565b90509295509295909350565b67ffffffffffffffff811661151c565b6020810161067682846117e9565b5f60808284031215611597576115975f5ffd5b5f5f83601f84011261182d5761182d5f5ffd5b50813567ffffffffffffffff811115611847576118475f5ffd5b602083019150836020820283011115611756576117565f5ffd5b5f5f5f5f60c08587031215611877576118775f5ffd5b6118818686611807565b9350608085013567ffffffffffffffff81111561189f5761189f5f5ffd5b6118ab8782880161181a565b93509350506118bd8660a087016115db565b905092959194509250565b5f5f604083850312156118dc576118dc5f5ffd5b6118e684846115db565b915061167184602085016115db565b5f5f5f5f6060858703121561190b5761190b5f5ffd5b843567ffffffffffffffff811115611924576119245f5ffd5b61193087828801611584565b945050602085013567ffffffffffffffff81111561194f5761194f5f5ffd5b61195b8782880161181a565b93509350506118bd86604087016115db565b8051610676816115d5565b5f6020828403121561198b5761198b5f5ffd5b6106d2838361196d565b505f610676602083018361161c565b67ffffffffffffffff811661153c565b8035610676816119a4565b505f61067660208301836119b4565b505f6106766020830183611704565b63ffffffff811661151c565b5f808335601e1936859003018112611a0257611a025f5ffd5b830160208101925035905067ffffffffffffffff811115611a2457611a245f5ffd5b36819003821315611756576117565f5ffd5b82818337505f910152565b818352602083019250611a55828483611a36565b50601f01601f19160190565b505f6106766020830183611766565b60ff811661151c565b5f60c08301611a888380611995565b611a928582611698565b50611aa060208401846119bf565b611aad60208601826117e9565b50611abb60408401846119ce565b611ac860408601826119dd565b50611ad660608401846119ce565b611ae360608601826119dd565b50611af160808401846119e9565b8583036080870152611b04838284611a41565b92505050611b1560a0840184611a61565b611b2260a0860182611a70565b509392505050565b602080825281016106d28184611a79565b60218152602081017f54686973206d65737361676520776173206e65766572207375626d69747465648152601760f91b602082015290505b60400190565b6020808252810161067681611b3b565b601a8152602081017f537461746520726f6f7420646f6573206e6f742065786973742e00000000000081529050611504565b6020808252810161067681611b89565b60148152602081017f6661696c65642073656e64696e672076616c756500000000000000000000000081529050611504565b6020808252810161067681611bcb565b5f61067682611c1a565b90565b67ffffffffffffffff1690565b61151c81611c0d565b602081016106768284611c27565b634e487b7160e01b5f52601160045260245ffd5b6001600160a01b0391821691908116908282039081111561067657610676611c3e565b60118152602081017f4e6f74206f776e6572206f722073656c6600000000000000000000000000000081529050611504565b6020808252810161067681611c75565b8082018082111561067657610676611c3e565b60218152602081017f4d657373616765207375626d6974746564206d6f7265207468616e206f6e636581527f210000000000000000000000000000000000000000000000000000000000000060208201529050611b73565b6020808252810161067681611cca565b5f60208284031215611d4557611d455f5ffd5b6106d28383611704565b5f813561067681611613565b5f6001600160a01b03835b81169019929092169190911792915050565b5f61067682611603565b5f61067682611d78565b611d9582611d82565b611da0818354611d5b565b8255505050565b5f8135610676816119a4565b5f7bffffffffffffffff0000000000000000000000000000000000000000611d668460a01b90565b5f61067667ffffffffffffffff8316611c1a565b611df882611ddb565b611da0818354611db3565b5f8135610676816116f8565b5f6001600160e01b0319611d668460e01b90565b5f63ffffffff8216610676565b611e3982611e23565b611da0818354611e0f565b5f63ffffffff83611d66565b611e5982611e23565b611da0818354611e44565b5f808335601e1936859003018112611e7d57611e7d5f5ffd5b8301915050803567ffffffffffffffff811115611e9b57611e9b5f5ffd5b602082019150600181023603821315611756576117565f5ffd5b634e487b7160e01b5f52604160045260245ffd5b634e487b7160e01b5f52602260045260245ffd5b600281046001821680611ef157607f821691505b60208210810361159757611597611ec9565b5f610676611c178381565b611f1783611f03565b81545f1960089490940293841b1916921b91909117905550565b5f61085d818484611f0e565b8181101561077457611f4f5f82611f31565b600101611f3d565b601f82111561085d575f818152602090206020601f85010481016020851015611f7d5750805b610dfa6020601f860104830182611f3d565b8267ffffffffffffffff811115611fa857611fa8611eb5565b611fb28254611edd565b611fbd828285611f57565b505f601f821160018114611fef575f8315611fd85750848201355b5f19600885021c1981166002850217855550610fea565b5f84815260208120601f198516915b8281101561201e5787850135825560209485019460019092019101611ffe565b508482101561203a575f196008601f8716021c19878501351681555b5050505060020260010190555050565b61085d838383611f8f565b5f81356106768161175d565b5f60ff8216610676565b61207482612061565b815460ff191660ff821617611da0565b80828061209081611d4f565b905061209c8184611d8c565b505060208301806120ac82611da7565b90506120b88184611def565b505060408301806120c882611e03565b90506120d48184611e30565b50505060608201806120e582611e03565b90506120f48160018501611e50565b50506121036080830183611e64565b61211181836002860161204a565b505060a082018061212182612055565b90506107bb816003850161206b565b6107748282612084565b60258152602081017f496e73756666696369656e742066756e647320746f207075626c697368206d6581527f737361676500000000000000000000000000000000000000000000000000000060208201529050611b73565b602080825281016106768161213a565b60248152602081017f4661696c656420746f2073656e64206665657320746f206665657320636f6e7481527f726163740000000000000000000000000000000000000000000000000000000060208201529050611b73565b60208082528101610676816121a2565b60c08101612218828a611698565b61222560208301896117e9565b61223260408301886119dd565b61223f60608301876119dd565b8181036080830152612252818587611a41565b905061226160a0830184611a70565b98975050505050505050565b602a8152602081017f526f6f74206973206e6f74207075626c6973686564206f6e2074686973206d6581527f7373616765206275732e0000000000000000000000000000000000000000000060208201529050611b73565b602080825281016106768161226d565b60218152602081017f526f6f74206973206e6f7420636f6e736964657265642066696e616c207965748152601760f91b60208201529050611b73565b60208082528101610676816122d5565b505f61067660208301836115db565b61233a8180611995565b6123448382611698565b506123526020820182611995565b61235f6020840182611698565b5061236d6040820182612321565b61237a604084018261151a565b5061238860608201826119bf565b61085d60608401826117e9565b608081016106768284612330565b60018152602081017f760000000000000000000000000000000000000000000000000000000000000081529050611504565b604080825281016123e5816123a3565b9050610676602083018461151a565b8061151c565b61240481836123f4565b602001919050565b60338152602081017f496e76616c696420696e636c7573696f6e2070726f6f6620666f722076616c7581527f65207472616e73666572206d6573736167652e0000000000000000000000000060208201529050611b73565b602080825281016106768161240c565b60258152602081017f526f6f7420616c726561647920616464656420746f20746865206d657373616781527f652062757300000000000000000000000000000000000000000000000000000060208201529050611b73565b6020808252810161067681612474565b5f602082840312156124ef576124ef5f5ffd5b6106d283836119b4565b5f6020828403121561250c5761250c5f5ffd5b6106d28383611766565b60018152602081017f6d0000000000000000000000000000000000000000000000000000000000000081529050611504565b604080825281016123e581612516565b60308152602081017f496e76616c696420696e636c7573696f6e2070726f6f6620666f722063726f7381527f7320636861696e206d6573736167652e0000000000000000000000000000000060208201529050611b73565b6020808252810161067681612558565b67ffffffffffffffff91821691908116908282019081111561067657610676611c3e565b604081016125f28285611698565b6106d2602083018461151a565b634e487b7160e01b5f52603260045260245ffdfea2646970667358221220fee8d4da2d721f4a9bc844bf202189226aa77a891f0890aa3435f1cbd1f0090964736f6c634300081c0033a264697066735822122030341d880122b2a63e7c9484327a4d4c54e21fbf5332345480f9eb545a180b7764736f6c634300081c0033",
}

// CrossChainABI is the input ABI used to generate the binding from.
// Deprecated: Use CrossChainMetaData.ABI instead.
var CrossChainABI = CrossChainMetaData.ABI

// CrossChainBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use CrossChainMetaData.Bin instead.
var CrossChainBin = CrossChainMetaData.Bin

// DeployCrossChain deploys a new Ethereum contract, binding an instance of CrossChain to it.
func DeployCrossChain(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *CrossChain, error) {
	parsed, err := CrossChainMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(CrossChainBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &CrossChain{CrossChainCaller: CrossChainCaller{contract: contract}, CrossChainTransactor: CrossChainTransactor{contract: contract}, CrossChainFilterer: CrossChainFilterer{contract: contract}}, nil
}

// CrossChain is an auto generated Go binding around an Ethereum contract.
type CrossChain struct {
	CrossChainCaller     // Read-only binding to the contract
	CrossChainTransactor // Write-only binding to the contract
	CrossChainFilterer   // Log filterer for contract events
}

// CrossChainCaller is an auto generated read-only Go binding around an Ethereum contract.
type CrossChainCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// CrossChainTransactor is an auto generated write-only Go binding around an Ethereum contract.
type CrossChainTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// CrossChainFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type CrossChainFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// CrossChainSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type CrossChainSession struct {
	Contract     *CrossChain       // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// CrossChainCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type CrossChainCallerSession struct {
	Contract *CrossChainCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts     // Call options to use throughout this session
}

// CrossChainTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type CrossChainTransactorSession struct {
	Contract     *CrossChainTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts     // Transaction auth options to use throughout this session
}

// CrossChainRaw is an auto generated low-level Go binding around an Ethereum contract.
type CrossChainRaw struct {
	Contract *CrossChain // Generic contract binding to access the raw methods on
}

// CrossChainCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type CrossChainCallerRaw struct {
	Contract *CrossChainCaller // Generic read-only contract binding to access the raw methods on
}

// CrossChainTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type CrossChainTransactorRaw struct {
	Contract *CrossChainTransactor // Generic write-only contract binding to access the raw methods on
}

// NewCrossChain creates a new instance of CrossChain, bound to a specific deployed contract.
func NewCrossChain(address common.Address, backend bind.ContractBackend) (*CrossChain, error) {
	contract, err := bindCrossChain(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &CrossChain{CrossChainCaller: CrossChainCaller{contract: contract}, CrossChainTransactor: CrossChainTransactor{contract: contract}, CrossChainFilterer: CrossChainFilterer{contract: contract}}, nil
}

// NewCrossChainCaller creates a new read-only instance of CrossChain, bound to a specific deployed contract.
func NewCrossChainCaller(address common.Address, caller bind.ContractCaller) (*CrossChainCaller, error) {
	contract, err := bindCrossChain(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &CrossChainCaller{contract: contract}, nil
}

// NewCrossChainTransactor creates a new write-only instance of CrossChain, bound to a specific deployed contract.
func NewCrossChainTransactor(address common.Address, transactor bind.ContractTransactor) (*CrossChainTransactor, error) {
	contract, err := bindCrossChain(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &CrossChainTransactor{contract: contract}, nil
}

// NewCrossChainFilterer creates a new log filterer instance of CrossChain, bound to a specific deployed contract.
func NewCrossChainFilterer(address common.Address, filterer bind.ContractFilterer) (*CrossChainFilterer, error) {
	contract, err := bindCrossChain(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &CrossChainFilterer{contract: contract}, nil
}

// bindCrossChain binds a generic wrapper to an already deployed contract.
func bindCrossChain(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := CrossChainMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_CrossChain *CrossChainRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _CrossChain.Contract.CrossChainCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_CrossChain *CrossChainRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _CrossChain.Contract.CrossChainTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_CrossChain *CrossChainRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _CrossChain.Contract.CrossChainTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_CrossChain *CrossChainCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _CrossChain.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_CrossChain *CrossChainTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _CrossChain.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_CrossChain *CrossChainTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _CrossChain.Contract.contract.Transact(opts, method, params...)
}

// IsBundleAvailable is a free data retrieval call binding the contract method 0xa4ab2faa.
//
// Solidity: function isBundleAvailable(bytes[] crossChainHashes) view returns(bool)
func (_CrossChain *CrossChainCaller) IsBundleAvailable(opts *bind.CallOpts, crossChainHashes [][]byte) (bool, error) {
	var out []interface{}
	err := _CrossChain.contract.Call(opts, &out, "isBundleAvailable", crossChainHashes)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsBundleAvailable is a free data retrieval call binding the contract method 0xa4ab2faa.
//
// Solidity: function isBundleAvailable(bytes[] crossChainHashes) view returns(bool)
func (_CrossChain *CrossChainSession) IsBundleAvailable(crossChainHashes [][]byte) (bool, error) {
	return _CrossChain.Contract.IsBundleAvailable(&_CrossChain.CallOpts, crossChainHashes)
}

// IsBundleAvailable is a free data retrieval call binding the contract method 0xa4ab2faa.
//
// Solidity: function isBundleAvailable(bytes[] crossChainHashes) view returns(bool)
func (_CrossChain *CrossChainCallerSession) IsBundleAvailable(crossChainHashes [][]byte) (bool, error) {
	return _CrossChain.Contract.IsBundleAvailable(&_CrossChain.CallOpts, crossChainHashes)
}

// IsBundleSaved is a free data retrieval call binding the contract method 0x84154826.
//
// Solidity: function isBundleSaved(bytes32 ) view returns(bool)
func (_CrossChain *CrossChainCaller) IsBundleSaved(opts *bind.CallOpts, arg0 [32]byte) (bool, error) {
	var out []interface{}
	err := _CrossChain.contract.Call(opts, &out, "isBundleSaved", arg0)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsBundleSaved is a free data retrieval call binding the contract method 0x84154826.
//
// Solidity: function isBundleSaved(bytes32 ) view returns(bool)
func (_CrossChain *CrossChainSession) IsBundleSaved(arg0 [32]byte) (bool, error) {
	return _CrossChain.Contract.IsBundleSaved(&_CrossChain.CallOpts, arg0)
}

// IsBundleSaved is a free data retrieval call binding the contract method 0x84154826.
//
// Solidity: function isBundleSaved(bytes32 ) view returns(bool)
func (_CrossChain *CrossChainCallerSession) IsBundleSaved(arg0 [32]byte) (bool, error) {
	return _CrossChain.Contract.IsBundleSaved(&_CrossChain.CallOpts, arg0)
}

// IsWithdrawalSpent is a free data retrieval call binding the contract method 0x2f0cb9e3.
//
// Solidity: function isWithdrawalSpent(bytes32 ) view returns(bool)
func (_CrossChain *CrossChainCaller) IsWithdrawalSpent(opts *bind.CallOpts, arg0 [32]byte) (bool, error) {
	var out []interface{}
	err := _CrossChain.contract.Call(opts, &out, "isWithdrawalSpent", arg0)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsWithdrawalSpent is a free data retrieval call binding the contract method 0x2f0cb9e3.
//
// Solidity: function isWithdrawalSpent(bytes32 ) view returns(bool)
func (_CrossChain *CrossChainSession) IsWithdrawalSpent(arg0 [32]byte) (bool, error) {
	return _CrossChain.Contract.IsWithdrawalSpent(&_CrossChain.CallOpts, arg0)
}

// IsWithdrawalSpent is a free data retrieval call binding the contract method 0x2f0cb9e3.
//
// Solidity: function isWithdrawalSpent(bytes32 ) view returns(bool)
func (_CrossChain *CrossChainCallerSession) IsWithdrawalSpent(arg0 [32]byte) (bool, error) {
	return _CrossChain.Contract.IsWithdrawalSpent(&_CrossChain.CallOpts, arg0)
}

// MerkleMessageBus is a free data retrieval call binding the contract method 0xe874eb20.
//
// Solidity: function merkleMessageBus() view returns(address)
func (_CrossChain *CrossChainCaller) MerkleMessageBus(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _CrossChain.contract.Call(opts, &out, "merkleMessageBus")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// MerkleMessageBus is a free data retrieval call binding the contract method 0xe874eb20.
//
// Solidity: function merkleMessageBus() view returns(address)
func (_CrossChain *CrossChainSession) MerkleMessageBus() (common.Address, error) {
	return _CrossChain.Contract.MerkleMessageBus(&_CrossChain.CallOpts)
}

// MerkleMessageBus is a free data retrieval call binding the contract method 0xe874eb20.
//
// Solidity: function merkleMessageBus() view returns(address)
func (_CrossChain *CrossChainCallerSession) MerkleMessageBus() (common.Address, error) {
	return _CrossChain.Contract.MerkleMessageBus(&_CrossChain.CallOpts)
}

// MessageBus is a free data retrieval call binding the contract method 0xa1a227fa.
//
// Solidity: function messageBus() view returns(address)
func (_CrossChain *CrossChainCaller) MessageBus(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _CrossChain.contract.Call(opts, &out, "messageBus")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// MessageBus is a free data retrieval call binding the contract method 0xa1a227fa.
//
// Solidity: function messageBus() view returns(address)
func (_CrossChain *CrossChainSession) MessageBus() (common.Address, error) {
	return _CrossChain.Contract.MessageBus(&_CrossChain.CallOpts)
}

// MessageBus is a free data retrieval call binding the contract method 0xa1a227fa.
//
// Solidity: function messageBus() view returns(address)
func (_CrossChain *CrossChainCallerSession) MessageBus() (common.Address, error) {
	return _CrossChain.Contract.MessageBus(&_CrossChain.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_CrossChain *CrossChainCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _CrossChain.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_CrossChain *CrossChainSession) Owner() (common.Address, error) {
	return _CrossChain.Contract.Owner(&_CrossChain.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_CrossChain *CrossChainCallerSession) Owner() (common.Address, error) {
	return _CrossChain.Contract.Owner(&_CrossChain.CallOpts)
}

// Initialize is a paid mutator transaction binding the contract method 0xc4d66de8.
//
// Solidity: function initialize(address owner) returns()
func (_CrossChain *CrossChainTransactor) Initialize(opts *bind.TransactOpts, owner common.Address) (*types.Transaction, error) {
	return _CrossChain.contract.Transact(opts, "initialize", owner)
}

// Initialize is a paid mutator transaction binding the contract method 0xc4d66de8.
//
// Solidity: function initialize(address owner) returns()
func (_CrossChain *CrossChainSession) Initialize(owner common.Address) (*types.Transaction, error) {
	return _CrossChain.Contract.Initialize(&_CrossChain.TransactOpts, owner)
}

// Initialize is a paid mutator transaction binding the contract method 0xc4d66de8.
//
// Solidity: function initialize(address owner) returns()
func (_CrossChain *CrossChainTransactorSession) Initialize(owner common.Address) (*types.Transaction, error) {
	return _CrossChain.Contract.Initialize(&_CrossChain.TransactOpts, owner)
}

// PauseWithdrawals is a paid mutator transaction binding the contract method 0xf4cc87ba.
//
// Solidity: function pauseWithdrawals(bool _pause) returns()
func (_CrossChain *CrossChainTransactor) PauseWithdrawals(opts *bind.TransactOpts, _pause bool) (*types.Transaction, error) {
	return _CrossChain.contract.Transact(opts, "pauseWithdrawals", _pause)
}

// PauseWithdrawals is a paid mutator transaction binding the contract method 0xf4cc87ba.
//
// Solidity: function pauseWithdrawals(bool _pause) returns()
func (_CrossChain *CrossChainSession) PauseWithdrawals(_pause bool) (*types.Transaction, error) {
	return _CrossChain.Contract.PauseWithdrawals(&_CrossChain.TransactOpts, _pause)
}

// PauseWithdrawals is a paid mutator transaction binding the contract method 0xf4cc87ba.
//
// Solidity: function pauseWithdrawals(bool _pause) returns()
func (_CrossChain *CrossChainTransactorSession) PauseWithdrawals(_pause bool) (*types.Transaction, error) {
	return _CrossChain.Contract.PauseWithdrawals(&_CrossChain.TransactOpts, _pause)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_CrossChain *CrossChainTransactor) RenounceOwnership(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _CrossChain.contract.Transact(opts, "renounceOwnership")
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_CrossChain *CrossChainSession) RenounceOwnership() (*types.Transaction, error) {
	return _CrossChain.Contract.RenounceOwnership(&_CrossChain.TransactOpts)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_CrossChain *CrossChainTransactorSession) RenounceOwnership() (*types.Transaction, error) {
	return _CrossChain.Contract.RenounceOwnership(&_CrossChain.TransactOpts)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_CrossChain *CrossChainTransactor) TransferOwnership(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _CrossChain.contract.Transact(opts, "transferOwnership", newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_CrossChain *CrossChainSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _CrossChain.Contract.TransferOwnership(&_CrossChain.TransactOpts, newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_CrossChain *CrossChainTransactorSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _CrossChain.Contract.TransferOwnership(&_CrossChain.TransactOpts, newOwner)
}

// CrossChainInitializedIterator is returned from FilterInitialized and is used to iterate over the raw logs and unpacked data for Initialized events raised by the CrossChain contract.
type CrossChainInitializedIterator struct {
	Event *CrossChainInitialized // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *CrossChainInitializedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(CrossChainInitialized)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(CrossChainInitialized)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *CrossChainInitializedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *CrossChainInitializedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// CrossChainInitialized represents a Initialized event raised by the CrossChain contract.
type CrossChainInitialized struct {
	Version uint64
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterInitialized is a free log retrieval operation binding the contract event 0xc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d2.
//
// Solidity: event Initialized(uint64 version)
func (_CrossChain *CrossChainFilterer) FilterInitialized(opts *bind.FilterOpts) (*CrossChainInitializedIterator, error) {

	logs, sub, err := _CrossChain.contract.FilterLogs(opts, "Initialized")
	if err != nil {
		return nil, err
	}
	return &CrossChainInitializedIterator{contract: _CrossChain.contract, event: "Initialized", logs: logs, sub: sub}, nil
}

// WatchInitialized is a free log subscription operation binding the contract event 0xc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d2.
//
// Solidity: event Initialized(uint64 version)
func (_CrossChain *CrossChainFilterer) WatchInitialized(opts *bind.WatchOpts, sink chan<- *CrossChainInitialized) (event.Subscription, error) {

	logs, sub, err := _CrossChain.contract.WatchLogs(opts, "Initialized")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(CrossChainInitialized)
				if err := _CrossChain.contract.UnpackLog(event, "Initialized", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseInitialized is a log parse operation binding the contract event 0xc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d2.
//
// Solidity: event Initialized(uint64 version)
func (_CrossChain *CrossChainFilterer) ParseInitialized(log types.Log) (*CrossChainInitialized, error) {
	event := new(CrossChainInitialized)
	if err := _CrossChain.contract.UnpackLog(event, "Initialized", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// CrossChainOwnershipTransferredIterator is returned from FilterOwnershipTransferred and is used to iterate over the raw logs and unpacked data for OwnershipTransferred events raised by the CrossChain contract.
type CrossChainOwnershipTransferredIterator struct {
	Event *CrossChainOwnershipTransferred // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *CrossChainOwnershipTransferredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(CrossChainOwnershipTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(CrossChainOwnershipTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *CrossChainOwnershipTransferredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *CrossChainOwnershipTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// CrossChainOwnershipTransferred represents a OwnershipTransferred event raised by the CrossChain contract.
type CrossChainOwnershipTransferred struct {
	PreviousOwner common.Address
	NewOwner      common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterOwnershipTransferred is a free log retrieval operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_CrossChain *CrossChainFilterer) FilterOwnershipTransferred(opts *bind.FilterOpts, previousOwner []common.Address, newOwner []common.Address) (*CrossChainOwnershipTransferredIterator, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _CrossChain.contract.FilterLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return &CrossChainOwnershipTransferredIterator{contract: _CrossChain.contract, event: "OwnershipTransferred", logs: logs, sub: sub}, nil
}

// WatchOwnershipTransferred is a free log subscription operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_CrossChain *CrossChainFilterer) WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *CrossChainOwnershipTransferred, previousOwner []common.Address, newOwner []common.Address) (event.Subscription, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _CrossChain.contract.WatchLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(CrossChainOwnershipTransferred)
				if err := _CrossChain.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOwnershipTransferred is a log parse operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_CrossChain *CrossChainFilterer) ParseOwnershipTransferred(log types.Log) (*CrossChainOwnershipTransferred, error) {
	event := new(CrossChainOwnershipTransferred)
	if err := _CrossChain.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// CrossChainWithdrawalsPausedIterator is returned from FilterWithdrawalsPaused and is used to iterate over the raw logs and unpacked data for WithdrawalsPaused events raised by the CrossChain contract.
type CrossChainWithdrawalsPausedIterator struct {
	Event *CrossChainWithdrawalsPaused // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *CrossChainWithdrawalsPausedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(CrossChainWithdrawalsPaused)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(CrossChainWithdrawalsPaused)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *CrossChainWithdrawalsPausedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *CrossChainWithdrawalsPausedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// CrossChainWithdrawalsPaused represents a WithdrawalsPaused event raised by the CrossChain contract.
type CrossChainWithdrawalsPaused struct {
	Paused bool
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterWithdrawalsPaused is a free log retrieval operation binding the contract event 0x129d33f7856617012aed60524381cfff7233cfc57df58d9f6613a5593d3dc218.
//
// Solidity: event WithdrawalsPaused(bool paused)
func (_CrossChain *CrossChainFilterer) FilterWithdrawalsPaused(opts *bind.FilterOpts) (*CrossChainWithdrawalsPausedIterator, error) {

	logs, sub, err := _CrossChain.contract.FilterLogs(opts, "WithdrawalsPaused")
	if err != nil {
		return nil, err
	}
	return &CrossChainWithdrawalsPausedIterator{contract: _CrossChain.contract, event: "WithdrawalsPaused", logs: logs, sub: sub}, nil
}

// WatchWithdrawalsPaused is a free log subscription operation binding the contract event 0x129d33f7856617012aed60524381cfff7233cfc57df58d9f6613a5593d3dc218.
//
// Solidity: event WithdrawalsPaused(bool paused)
func (_CrossChain *CrossChainFilterer) WatchWithdrawalsPaused(opts *bind.WatchOpts, sink chan<- *CrossChainWithdrawalsPaused) (event.Subscription, error) {

	logs, sub, err := _CrossChain.contract.WatchLogs(opts, "WithdrawalsPaused")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(CrossChainWithdrawalsPaused)
				if err := _CrossChain.contract.UnpackLog(event, "WithdrawalsPaused", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseWithdrawalsPaused is a log parse operation binding the contract event 0x129d33f7856617012aed60524381cfff7233cfc57df58d9f6613a5593d3dc218.
//
// Solidity: event WithdrawalsPaused(bool paused)
func (_CrossChain *CrossChainFilterer) ParseWithdrawalsPaused(log types.Log) (*CrossChainWithdrawalsPaused, error) {
	event := new(CrossChainWithdrawalsPaused)
	if err := _CrossChain.contract.UnpackLog(event, "WithdrawalsPaused", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
