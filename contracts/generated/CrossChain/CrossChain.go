// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package CrossChain

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
	_ = abi.ConvertType
)

// StructsValueTransferMessage is an auto generated low-level Go binding around an user-defined struct.
type StructsValueTransferMessage struct {
	Sender   common.Address
	Receiver common.Address
	Amount   *big.Int
	Sequence uint64
}

// CrossChainMetaData contains all meta data concerning the CrossChain contract.
var CrossChainMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"InvalidInitialization\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotInitializing\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ReentrancyGuardReentrantCall\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"version\",\"type\":\"uint64\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"paused\",\"type\":\"bool\"}],\"name\":\"WithdrawalsPaused\",\"type\":\"event\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"sequence\",\"type\":\"uint64\"}],\"internalType\":\"structStructs.ValueTransferMessage\",\"name\":\"_msg\",\"type\":\"tuple\"},{\"internalType\":\"bytes32[]\",\"name\":\"proof\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes32\",\"name\":\"root\",\"type\":\"bytes32\"}],\"name\":\"extractNativeValue\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes[]\",\"name\":\"crossChainHashes\",\"type\":\"bytes[]\"}],\"name\":\"isBundleAvailable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"isBundleSaved\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"isWithdrawalSpent\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"merkleMessageBus\",\"outputs\":[{\"internalType\":\"contractIMerkleTreeMessageBus\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"messageBus\",\"outputs\":[{\"internalType\":\"contractIMessageBus\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_pause\",\"type\":\"bool\"}],\"name\":\"pauseWithdrawals\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
	Bin: "0x6080604052348015600e575f5ffd5b50601633601a565b608a565b7f9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c19930080546001600160a01b031981166001600160a01b03848116918217845560405192169182907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0905f90a3505050565b613b5e806100975f395ff3fe608060405234801561000f575f5ffd5b50600436106100c4575f3560e01c8063a1a227fa1161007d578063e874eb2011610058578063e874eb20146101bd578063f2fde38b146101d0578063f4cc87ba146101e3575f5ffd5b8063a1a227fa14610177578063a4ab2faa14610197578063c4d66de8146101aa575f5ffd5b8063715018a6116100ad578063715018a614610115578063841548261461011d5780638da5cb5b1461013f575f5ffd5b80632f0cb9e3146100c85780636af5266214610100575b5f5ffd5b6100ea6100d6366004610963565b60016020525f908152604090205460ff1681565b6040516100f79190610991565b60405180910390f35b61011361010e366004610a06565b6101f6565b005b6101136103b9565b6100ea61012b366004610963565b60026020525f908152604090205460ff1681565b7f9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c199300546001600160a01b03166040516100f79190610a86565b60035461018a906001600160a01b031681565b6040516100f79190610ab1565b6100ea6101a5366004610c5e565b6103cc565b6101136101b8366004610cb2565b610448565b60045461018a906001600160a01b031681565b6101136101de366004610cb2565b610681565b6101136101f1366004610ce2565b6106d7565b6101fe610727565b5f5460ff16156102295760405162461bcd60e51b815260040161022090610d33565b60405180910390fd5b600480546040517fb201246f0000000000000000000000000000000000000000000000000000000081526001600160a01b039091169163b201246f9161027791889188918891889101610e64565b5f6040518083038186803b15801561028d575f5ffd5b505afa15801561029f573d5f5f3e3d5ffd5b505050505f846040516020016102b59190610e9d565b60408051601f1981840301815291815281516020928301205f818152600190935291205490915060ff16156102fc5760405162461bcd60e51b815260040161022090610edd565b5f81815260016020818152604092839020805460ff19169092179091556003546001600160a01b0316916399a3ad219161033a918901908901610cb2565b87604001356040518363ffffffff1660e01b815260040161035c929190610eed565b5f604051808303815f87803b158015610373575f5ffd5b505af1158015610385573d5f5f3e3d5ffd5b50505050506103b360017f9b779b17422d0df92223018b32b4d1fa46e071723d6817e2486d003becc55f0055565b50505050565b6103c16107b0565b6103ca5f610824565b565b5f80805b835181101561043057818482815181106103ec576103ec610f08565b60200260200101516103fd90610f25565b60405160200161040e929190610f59565b60408051601f19818403018152919052805160209091012091506001016103d0565b505f9081526002602052604090205460ff1692915050565b7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00805468010000000000000000810460ff16159067ffffffffffffffff165f811580156104925750825b90505f8267ffffffffffffffff1660011480156104ae5750303b155b9050811580156104bc575080155b156104f3576040517ff92ee8a900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b845467ffffffffffffffff19166001178555831561052757845468ff00000000000000001916680100000000000000001785555b610530866108a1565b6105386108b2565b60405161054490610939565b604051809103905ff08015801561055d573d5f5f3e3d5ffd5b506004805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b039290921691821781556040517f485cc95500000000000000000000000000000000000000000000000000000000815263485cc955916105c4918a91309101610f67565b5f604051808303815f87803b1580156105db575f5ffd5b505af11580156105ed573d5f5f3e3d5ffd5b50506004546003805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0390921691909117905550505f805460ff19169055831561067957845468ff0000000000000000191685556040517fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d29061067090600190610f9c565b60405180910390a15b505050505050565b6106896107b0565b6001600160a01b0381166106cb575f6040517f1e4fbdf70000000000000000000000000000000000000000000000000000000081526004016102209190610a86565b6106d481610824565b50565b6106df6107b0565b5f805460ff19168215151790556040517f129d33f7856617012aed60524381cfff7233cfc57df58d9f6613a5593d3dc2189061071c908390610991565b60405180910390a150565b7f9b779b17422d0df92223018b32b4d1fa46e071723d6817e2486d003becc55f00805460011901610784576040517f3ee5aeb500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60029055565b60017f9b779b17422d0df92223018b32b4d1fa46e071723d6817e2486d003becc55f0055565b336107e27f9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c199300546001600160a01b031690565b6001600160a01b0316146103ca57336040517f118cdaa70000000000000000000000000000000000000000000000000000000081526004016102209190610a86565b7f9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c199300805473ffffffffffffffffffffffffffffffffffffffff1981166001600160a01b03848116918217845560405192169182907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0905f90a3505050565b6108a96108c2565b6106d481610929565b6108ba6108c2565b6103ca610931565b7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a005468010000000000000000900460ff166103ca576040517fd7e6bcf800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6106896108c2565b61078a6108c2565b612b7e80610fab83390190565b805b81146106d4575f5ffd5b803561095d81610946565b92915050565b5f60208284031215610976576109765f5ffd5b6109808383610952565b9392505050565b8015155b82525050565b6020810161095d8284610987565b5f608082840312156109b2576109b25f5ffd5b50919050565b5f5f83601f8401126109cb576109cb5f5ffd5b50813567ffffffffffffffff8111156109e5576109e55f5ffd5b6020830191508360208202830111156109ff576109ff5f5ffd5b9250929050565b5f5f5f5f60c08587031215610a1c57610a1c5f5ffd5b610a26868661099f565b9350608085013567ffffffffffffffff811115610a4457610a445f5ffd5b610a50878288016109b8565b9350935050610a628660a08701610952565b905092959194509250565b5f6001600160a01b03821661095d565b61098b81610a6d565b6020810161095d8284610a7d565b5f61095d82610a6d565b5f61095d82610a94565b61098b81610a9e565b6020810161095d8284610aa8565b634e487b7160e01b5f52604160045260245ffd5b601f19601f830116810181811067ffffffffffffffff82111715610af957610af9610abf565b6040525050565b5f610b0a60405190565b9050610b168282610ad3565b919050565b5f67ffffffffffffffff821115610b3457610b34610abf565b5060209081020190565b5f67ffffffffffffffff821115610b5757610b57610abf565b601f19601f83011660200192915050565b82818337505f910152565b5f610b85610b8084610b3e565b610b00565b9050828152838383011115610b9b57610b9b5f5ffd5b610980836020830184610b68565b5f82601f830112610bbb57610bbb5f5ffd5b61098083833560208501610b73565b5f610bd7610b8084610b1b565b83815290506020808201908402830185811115610bf557610bf55f5ffd5b835b81811015610c3357803567ffffffffffffffff811115610c1857610c185f5ffd5b610c2488828801610ba9565b84525060209283019201610bf7565b5050509392505050565b5f82601f830112610c4f57610c4f5f5ffd5b61098083833560208501610bca565b5f60208284031215610c7157610c715f5ffd5b813567ffffffffffffffff811115610c8a57610c8a5f5ffd5b610c9684828501610c3d565b949350505050565b61094881610a6d565b803561095d81610c9e565b5f60208284031215610cc557610cc55f5ffd5b6109808383610ca7565b801515610948565b803561095d81610ccf565b5f60208284031215610cf557610cf55f5ffd5b6109808383610cd7565b60168152602081017f7769746864726177616c73206172652070617573656400000000000000000000815290505b60200190565b6020808252810161095d81610cff565b505f61095d6020830183610ca7565b505f61095d6020830183610952565b8061098b565b67ffffffffffffffff8116610948565b803561095d81610d67565b505f61095d6020830183610d77565b67ffffffffffffffff811661098b565b610dab8180610d43565b610db58382610a7d565b50610dc36020820182610d43565b610dd06020840182610a7d565b50610dde6040820182610d52565b610deb6040840182610d61565b50610df96060820182610d82565b610e066060840182610d91565b505050565b82818337505050565b8183526020830192505f7f07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff831115610e4d57610e4d5f5ffd5b602083029250610e5e838584610e0b565b50500190565b60c08101610e728287610da1565b8181036080830152610e85818587610e14565b9050610e9460a0830184610d61565b95945050505050565b6080810161095d8284610da1565b60188152602081017f7769746864726177616c20616c7265616479207370656e74000000000000000081529050610d2d565b6020808252810161095d81610eab565b60408101610efb8285610a7d565b6109806020830184610d61565b634e487b7160e01b5f52603260045260245ffd5b5f61095d825190565b5f610f2e825190565b60208301610f3b81610f1c565b92505060208110156109b2575f196020919091036008021b16919050565b60408101610efb8285610d61565b60408101610f758285610a7d565b6109806020830184610a7d565b5f67ffffffffffffffff821661095d565b61098b81610f82565b6020810161095d8284610f9356fe6080604052348015600e575f5ffd5b50601633601a565b608a565b7f9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c19930080546001600160a01b031981166001600160a01b03848116918217845560405192169182907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0905f90a3505050565b612ae7806100975f395ff3fe6080604052600436106101b9575f3560e01c80638da5cb5b116100eb578063b1454caa11610089578063d547741f11610063578063d547741f146105e7578063e138a8d214610606578063f2fde38b14610625578063fb8940291461064457610229565b8063b1454caa14610589578063b201246f146105a9578063b6aed0cb146105c857610229565b806399a3ad21116100c557806399a3ad2114610505578063a217fddf14610524578063ab53bddc14610537578063ad7805e81461055657610229565b80638da5cb5b1461043f57806391d14854146104835780639730886d146104e657610229565b80632f2ff15d1161015857806336568abe1161013257806336568abe146103ce57806336d2da90146103ed578063485cc9551461040c578063715018a61461042b57610229565b80632f2ff15d1461037d57806333a88c721461039c578063346633fb146103bb57610229565b80630fcfbd11116101945780630fcfbd11146102d35780630fe9188e146102f25780631050afdd14610311578063248a9ca31461033057610229565b8062a1b8151461024a57806301ffc9a71461027457806302b4df19146102a057610229565b36610229576040517f346633fb000000000000000000000000000000000000000000000000000000008152309063346633fb9034906101fe90339083906004016118a7565b5f604051808303818588803b158015610215575f5ffd5b505af1158015610227573d5f5f3e3d5ffd5b005b60405162461bcd60e51b8152600401610241906118f6565b60405180910390fd5b348015610255575f5ffd5b5061025e610663565b60405161026b9190611906565b60405180910390f35b34801561027f575f5ffd5b5061029361028e366004611935565b6106ec565b60405161026b919061195a565b3480156102ab575f5ffd5b5061025e7f65c4b771cce18ff228842b3883a73079ee3e76bd08965f6dadb7cb56dbf6e19481565b3480156102de575f5ffd5b5061025e6102ed366004611981565b610754565b3480156102fd575f5ffd5b5061022761030c3660046119ca565b6107b1565b34801561031c575f5ffd5b5061022761032b3660046119fb565b610818565b34801561033b575f5ffd5b5061025e61034a3660046119ca565b5f9081527f02dd7bc7dec4dceedda775e58dd541e08a116c6c53815c0bd028192f7b626800602052604090206001015490565b348015610388575f5ffd5b50610227610397366004611a18565b610850565b3480156103a7575f5ffd5b506102936103b6366004611981565b610899565b6102276103c9366004611a4e565b6108e9565b3480156103d9575f5ffd5b506102276103e8366004611a18565b610a32565b3480156103f8575f5ffd5b506102276104073660046119fb565b610a83565b348015610417575f5ffd5b50610227610426366004611a7b565b610afa565b348015610436575f5ffd5b50610227610ca4565b34801561044a575f5ffd5b507f9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c199300546001600160a01b031660405161026b9190611a99565b34801561048e575f5ffd5b5061029361049d366004611a18565b5f9182527f02dd7bc7dec4dceedda775e58dd541e08a116c6c53815c0bd028192f7b626800602090815260408084206001600160a01b0393909316845291905290205460ff1690565b3480156104f1575f5ffd5b50610227610500366004611aa7565b610cb7565b348015610510575f5ffd5b5061022761051f366004611a4e565b610e1c565b34801561052f575f5ffd5b5061025e5f81565b348015610542575f5ffd5b50610227610551366004611a4e565b610e50565b348015610561575f5ffd5b5061025e7fe0d563514842a8c29151c49cd2698127f54dd344a9b2c74a42fe9be3e305fe9881565b61059c610597366004611b69565b610f18565b60405161026b9190611bf1565b3480156105b4575f5ffd5b506102276105c3366004611c59565b611020565b3480156105d3575f5ffd5b506102276105e2366004611cc0565b61111e565b3480156105f2575f5ffd5b50610227610601366004611a18565b611185565b348015610611575f5ffd5b50610227610620366004611cde565b6111c8565b348015610630575f5ffd5b5061022761063f3660046119fb565b61130f565b34801561064f575f5ffd5b5061022761065e3660046119fb565b611365565b600354604080517f1a90a21900000000000000000000000000000000000000000000000000000000815290515f926001600160a01b031691631a90a2199160048083019260209291908290030181865afa1580156106c3573d5f5f3e3d5ffd5b505050506040513d601f19601f820116820180604052508101906106e79190611d61565b905090565b5f6001600160e01b031982167f7965db0b00000000000000000000000000000000000000000000000000000000148061074e57507f01ffc9a7000000000000000000000000000000000000000000000000000000006001600160e01b03198316145b92915050565b5f5f826040516020016107679190611f13565b60408051601f1981840301815291815281516020928301205f81815292839052912054909150806107aa5760405162461bcd60e51b815260040161024190611f62565b9392505050565b7f65c4b771cce18ff228842b3883a73079ee3e76bd08965f6dadb7cb56dbf6e1946107db81611399565b5f8281526004602052604081205490036108075760405162461bcd60e51b815260040161024190611fa4565b505f90815260046020526040812055565b5f61082281611399565b61084c7f65c4b771cce18ff228842b3883a73079ee3e76bd08965f6dadb7cb56dbf6e19483611185565b5050565b5f8281527f02dd7bc7dec4dceedda775e58dd541e08a116c6c53815c0bd028192f7b626800602052604090206001015461088981611399565b61089383836113a3565b50505050565b5f5f826040516020016108ac9190611f13565b60408051601f1981840301815291815281516020928301205f8181529283905291205490915080158015906108e15750428111155b949350505050565b5f341180156108f757508034145b6109135760405162461bcd60e51b81526004016102419061200c565b60035434906001600160a01b0316156109d3575f61092f610663565b9050803410156109515760405162461bcd60e51b81526004016102419061204c565b61095b8134612070565b6003546040519193505f916001600160a01b039091169083908381818185875af1925050503d805f81146109aa576040519150601f19603f3d011682016040523d82523d5f602084013e6109af565b606091505b50509050806109d05760405162461bcd60e51b8152600401610241906120db565b50505b5f6109dd3361146f565b9050836001600160a01b0316336001600160a01b03167f50c536ac33a920f00755865b831d17bf4cff0b2e0345f65b16d52bfc004068b68484604051610a249291906120eb565b60405180910390a350505050565b6001600160a01b0381163314610a74576040517f6697b23200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b610a7e82826114cc565b505050565b610a8b611570565b5f816001600160a01b0316476040515f6040518083038185875af1925050503d805f8114610ad4576040519150601f19603f3d011682016040523d82523d5f602084013e610ad9565b606091505b505090508061084c5760405162461bcd60e51b815260040161024190612138565b7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00805468010000000000000000810460ff16159067ffffffffffffffff165f81158015610b445750825b90505f8267ffffffffffffffff166001148015610b605750303b155b905081158015610b6e575080155b15610ba5576040517ff92ee8a900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b845467ffffffffffffffff191660011785558315610bd957845468ff00000000000000001916680100000000000000001785555b610be2876115e4565b610bea6115f5565b610bf45f886113a3565b50610c1f7f65c4b771cce18ff228842b3883a73079ee3e76bd08965f6dadb7cb56dbf6e194886113a3565b50610c4a7fe0d563514842a8c29151c49cd2698127f54dd344a9b2c74a42fe9be3e305fe98876113a3565b508315610c9b57845468ff0000000000000000191685556040517fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d290610c929060019061216b565b60405180910390a15b50505050505050565b610cac611570565b610cb55f6115fd565b565b5f610cc3600130612179565b9050610cf67f9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c199300546001600160a01b031690565b6001600160a01b0316336001600160a01b03161480610d1d5750336001600160a01b038216145b610d395760405162461bcd60e51b8152600401610241906121ce565b5f610d4483426121de565b90505f84604051602001610d589190611f13565b60408051601f1981840301815291815281516020928301205f8181529283905291205490915015610d9b5760405162461bcd60e51b815260040161024190612249565b5f81815260208181526040822084905560019190610dbb908801886119fb565b6001600160a01b0316815260208101919091526040015f90812090610de66080880160608901612259565b63ffffffff1681526020808201929092526040015f9081208054600181018255908252919020869160040201610c9b8282612657565b7fe0d563514842a8c29151c49cd2698127f54dd344a9b2c74a42fe9be3e305fe98610e4681611399565b610a7e8383611685565b5f610e5c600130612179565b9050610e8f7f9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c199300546001600160a01b031690565b6001600160a01b0316336001600160a01b03161480610eb65750336001600160a01b038216145b610ed25760405162461bcd60e51b8152600401610241906121ce565b826001600160a01b03167fcd9850463422a7449c406a036e35e5edb6fbe35a64c9f12a2354be98a750c0d383604051610f0b9190611906565b60405180910390a2505050565b6003545f906001600160a01b031615610fc9575f610f34610663565b905080341015610f565760405162461bcd60e51b8152600401610241906126b9565b6003546040515f916001600160a01b03169083908381818185875af1925050503d805f8114610fa0576040519150601f19603f3d011682016040523d82523d5f602084013e610fa5565b606091505b5050905080610fc65760405162461bcd60e51b8152600401610241906120db565b50505b610fd23361146f565b90507fb93c37389233beb85a3a726c3f15c2d15533ee74cb602f20f490dfffef7759373382888888888860405161100f97969594939291906126c9565b60405180910390a195945050505050565b5f81815260046020526040812054900361104c5760405162461bcd60e51b815260040161024190612784565b5f818152600460205260409020544210156110795760405162461bcd60e51b8152600401610241906127d0565b5f8460405160200161108b9190612854565b604051602081830303815290604052805190602001206040516020016110b19190612894565b6040516020818303038152906040528051906020012090506110fb848484846040516020016110e091906128b3565b60405160208183030381529060405280519060200120611714565b6111175760405162461bcd60e51b81526004016102419061291d565b5050505050565b7f65c4b771cce18ff228842b3883a73079ee3e76bd08965f6dadb7cb56dbf6e19461114881611399565b5f83815260046020526040902054156111735760405162461bcd60e51b815260040161024190612985565b505f9182526004602052604090912055565b5f8281527f02dd7bc7dec4dceedda775e58dd541e08a116c6c53815c0bd028192f7b62680060205260409020600101546111be81611399565b61089383836114cc565b5f8181526004602052604081205490036111f45760405162461bcd60e51b815260040161024190612784565b5f818152600460205260409020544210156112215760405162461bcd60e51b8152600401610241906127d0565b5f61122f60208601866119fb565b61123f6040870160208801612995565b61124f6060880160408901612259565b61125f6080890160608a01612259565b61126c60808a018a61238b565b61127c60c08c0160a08d016129b2565b60405160200161129297969594939291906126c9565b6040516020818303038152906040528051906020012090505f816040516020016112bc9190612a01565b6040516020818303038152906040528051906020012090506112eb858585846040516020016110e091906128b3565b6113075760405162461bcd60e51b815260040161024190612a69565b505050505050565b611317611570565b6001600160a01b038116611359575f6040517f1e4fbdf70000000000000000000000000000000000000000000000000000000081526004016102419190611a99565b611362816115fd565b50565b5f61136f81611399565b61084c7f65c4b771cce18ff228842b3883a73079ee3e76bd08965f6dadb7cb56dbf6e19483610850565b611362813361172b565b5f8281527f02dd7bc7dec4dceedda775e58dd541e08a116c6c53815c0bd028192f7b626800602081815260408084206001600160a01b038616855290915282205460ff16611466575f848152602082815260408083206001600160a01b03871684529091529020805460ff1916600117905561141c3390565b6001600160a01b0316836001600160a01b0316857f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a4600191505061074e565b5f91505061074e565b6001600160a01b0381165f908152600260205260408120805467ffffffffffffffff1691600191906114a18385612a79565b92506101000a81548167ffffffffffffffff021916908367ffffffffffffffff160217905550919050565b5f8281527f02dd7bc7dec4dceedda775e58dd541e08a116c6c53815c0bd028192f7b626800602081815260408084206001600160a01b038616855290915282205460ff1615611466575f848152602082815260408083206001600160a01b0387168085529252808320805460ff1916905551339287917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a4600191505061074e565b336115a27f9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c199300546001600160a01b031690565b6001600160a01b031614610cb557336040517f118cdaa70000000000000000000000000000000000000000000000000000000081526004016102419190611a99565b6115ec6117a9565b61136281611810565b610cb56117a9565b7f9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c19930080547fffffffffffffffffffffffff000000000000000000000000000000000000000081166001600160a01b03848116918217845560405192169182907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0905f90a3505050565b804710156116a55760405162461bcd60e51b81526004016102419061204c565b5f826001600160a01b0316826040515f6040518083038185875af1925050503d805f81146116ee576040519150601f19603f3d011682016040523d82523d5f602084013e6116f3565b606091505b5050905080610a7e5760405162461bcd60e51b815260040161024190612138565b5f82611721868685611818565b1495945050505050565b5f8281527f02dd7bc7dec4dceedda775e58dd541e08a116c6c53815c0bd028192f7b626800602090815260408083206001600160a01b038516845290915290205460ff1661084c5780826040517fe2517d3f0000000000000000000000000000000000000000000000000000000081526004016102419291906118a7565b7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a005468010000000000000000900460ff16610cb5576040517fd7e6bcf800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6113176117a9565b5f81815b84811015611850576118468287878481811061183a5761183a612a9d565b90506020020135611859565b915060010161181c565b50949350505050565b5f818310611873575f8281526020849052604090206107aa565b505f9182526020526040902090565b5f6001600160a01b03821661074e565b61189b81611882565b82525050565b8061189b565b604081016118b58285611892565b6107aa60208301846118a1565b600b8152602081017f756e737570706f72746564000000000000000000000000000000000000000000815290505b60200190565b6020808252810161074e816118c2565b6020810161074e82846118a1565b6001600160e01b031981165b8114611362575f5ffd5b803561074e81611914565b5f60208284031215611948576119485f5ffd5b6107aa838361192a565b80151561189b565b6020810161074e8284611952565b5f60c0828403121561197b5761197b5f5ffd5b50919050565b5f60208284031215611994576119945f5ffd5b813567ffffffffffffffff8111156119ad576119ad5f5ffd5b6108e184828501611968565b80611920565b803561074e816119b9565b5f602082840312156119dd576119dd5f5ffd5b6107aa83836119bf565b61192081611882565b803561074e816119e7565b5f60208284031215611a0e57611a0e5f5ffd5b6107aa83836119f0565b5f5f60408385031215611a2c57611a2c5f5ffd5b611a3684846119bf565b9150611a4584602085016119f0565b90509250929050565b5f5f60408385031215611a6257611a625f5ffd5b611a6c84846119f0565b9150611a4584602085016119bf565b5f5f60408385031215611a8f57611a8f5f5ffd5b611a3684846119f0565b6020810161074e8284611892565b5f5f60408385031215611abb57611abb5f5ffd5b823567ffffffffffffffff811115611ad457611ad45f5ffd5b611ae085828601611968565b925050611a4584602085016119bf565b63ffffffff8116611920565b803561074e81611af0565b5f5f83601f840112611b1a57611b1a5f5ffd5b50813567ffffffffffffffff811115611b3457611b345f5ffd5b602083019150836001820283011115611b4e57611b4e5f5ffd5b9250929050565b60ff8116611920565b803561074e81611b55565b5f5f5f5f5f60808688031215611b8057611b805f5ffd5b611b8a8787611afc565b9450611b998760208801611afc565b9350604086013567ffffffffffffffff811115611bb757611bb75f5ffd5b611bc388828901611b07565b9350935050611bd58760608801611b5e565b90509295509295909350565b67ffffffffffffffff811661189b565b6020810161074e8284611be1565b5f6080828403121561197b5761197b5f5ffd5b5f5f83601f840112611c2557611c255f5ffd5b50813567ffffffffffffffff811115611c3f57611c3f5f5ffd5b602083019150836020820283011115611b4e57611b4e5f5ffd5b5f5f5f5f60c08587031215611c6f57611c6f5f5ffd5b611c798686611bff565b9350608085013567ffffffffffffffff811115611c9757611c975f5ffd5b611ca387828801611c12565b9350935050611cb58660a087016119bf565b905092959194509250565b5f5f60408385031215611cd457611cd45f5ffd5b611a6c84846119bf565b5f5f5f5f60608587031215611cf457611cf45f5ffd5b843567ffffffffffffffff811115611d0d57611d0d5f5ffd5b611d1987828801611968565b945050602085013567ffffffffffffffff811115611d3857611d385f5ffd5b611d4487828801611c12565b9350935050611cb586604087016119bf565b805161074e816119b9565b5f60208284031215611d7457611d745f5ffd5b6107aa8383611d56565b505f61074e60208301836119f0565b67ffffffffffffffff8116611920565b803561074e81611d8d565b505f61074e6020830183611d9d565b505f61074e6020830183611afc565b63ffffffff811661189b565b5f808335601e1936859003018112611deb57611deb5f5ffd5b830160208101925035905067ffffffffffffffff811115611e0d57611e0d5f5ffd5b36819003821315611b4e57611b4e5f5ffd5b82818337505f910152565b818352602083019250611e3e828483611e1f565b50601f01601f19160190565b505f61074e6020830183611b5e565b60ff811661189b565b5f60c08301611e718380611d7e565b611e7b8582611892565b50611e896020840184611da8565b611e966020860182611be1565b50611ea46040840184611db7565b611eb16040860182611dc6565b50611ebf6060840184611db7565b611ecc6060860182611dc6565b50611eda6080840184611dd2565b8583036080870152611eed838284611e2a565b92505050611efe60a0840184611e4a565b611f0b60a0860182611e59565b509392505050565b602080825281016107aa8184611e62565b60218152602081017f54686973206d65737361676520776173206e65766572207375626d69747465648152601760f91b602082015290505b60400190565b6020808252810161074e81611f24565b601a8152602081017f537461746520726f6f7420646f6573206e6f742065786973742e000000000000815290506118f0565b6020808252810161074e81611f72565b60308152602081017f417474656d7074696e6720746f2073656e642076616c756520776974686f757481527f2070726f766964696e672045746865720000000000000000000000000000000060208201529050611f5c565b6020808252810161074e81611fb4565b60208082527f496e73756666696369656e742066756e647320746f2073656e642076616c756591019081526118f0565b6020808252810161074e8161201c565b634e487b7160e01b5f52601160045260245ffd5b8181038181111561074e5761074e61205c565b60248152602081017f4661696c656420746f2073656e64206665657320746f206665657320636f6e7481527f726163740000000000000000000000000000000000000000000000000000000060208201529050611f5c565b6020808252810161074e81612083565b604081016120f982856118a1565b6107aa6020830184611be1565b60148152602081017f6661696c65642073656e64696e672076616c7565000000000000000000000000815290506118f0565b6020808252810161074e81612106565b5f61074e82612155565b90565b67ffffffffffffffff1690565b61189b81612148565b6020810161074e8284612162565b6001600160a01b0391821691908116908282039081111561074e5761074e61205c565b60118152602081017f4e6f74206f776e6572206f722073656c66000000000000000000000000000000815290506118f0565b6020808252810161074e8161219c565b8082018082111561074e5761074e61205c565b60218152602081017f4d657373616765207375626d6974746564206d6f7265207468616e206f6e636581527f210000000000000000000000000000000000000000000000000000000000000060208201529050611f5c565b6020808252810161074e816121f1565b5f6020828403121561226c5761226c5f5ffd5b6107aa8383611afc565b5f813561074e816119e7565b5f6001600160a01b03835b81169019929092169190911792915050565b5f61074e82611882565b5f61074e8261229f565b6122bc826122a9565b6122c7818354612282565b8255505050565b5f813561074e81611d8d565b5f7bffffffffffffffff000000000000000000000000000000000000000061228d8460a01b90565b5f61074e67ffffffffffffffff8316612155565b61231f82612302565b6122c78183546122da565b5f813561074e81611af0565b5f6001600160e01b031961228d8460e01b90565b5f63ffffffff821661074e565b6123608261234a565b6122c7818354612336565b5f63ffffffff8361228d565b6123808261234a565b6122c781835461236b565b5f808335601e19368590030181126123a4576123a45f5ffd5b8301915050803567ffffffffffffffff8111156123c2576123c25f5ffd5b602082019150600181023603821315611b4e57611b4e5f5ffd5b634e487b7160e01b5f52604160045260245ffd5b634e487b7160e01b5f52602260045260245ffd5b60028104600182168061241857607f821691505b60208210810361197b5761197b6123f0565b5f61074e6121528381565b61243e8361242a565b81545f1960089490940293841b1916921b91909117905550565b5f610a7e818484612435565b8181101561084c576124765f82612458565b600101612464565b601f821115610a7e575f818152602090206020601f850104810160208510156124a45750805b6111176020601f860104830182612464565b8267ffffffffffffffff8111156124cf576124cf6123dc565b6124d98254612404565b6124e482828561247e565b505f601f821160018114612516575f83156124ff5750848201355b5f19600885021c1981166002850217855550611307565b5f84815260208120601f198516915b828110156125455787850135825560209485019460019092019101612525565b5084821015612561575f196008601f8716021c19878501351681555b5050505060020260010190555050565b610a7e8383836124b6565b5f813561074e81611b55565b5f60ff821661074e565b61259b82612588565b815460ff191660ff8216176122c7565b8082806125b781612276565b90506125c381846122b3565b505060208301806125d3826122ce565b90506125df8184612316565b505060408301806125ef8261232a565b90506125fb8184612357565b505050606082018061260c8261232a565b905061261b8160018501612377565b505061262a608083018361238b565b612638818360028601612571565b505060a08201806126488261257c565b90506108938160038501612592565b61084c82826125ab565b60258152602081017f496e73756666696369656e742066756e647320746f207075626c697368206d6581527f737361676500000000000000000000000000000000000000000000000000000060208201529050611f5c565b6020808252810161074e81612661565b60c081016126d7828a611892565b6126e46020830189611be1565b6126f16040830188611dc6565b6126fe6060830187611dc6565b8181036080830152612711818587611e2a565b905061272060a0830184611e59565b98975050505050505050565b602a8152602081017f526f6f74206973206e6f74207075626c6973686564206f6e2074686973206d6581527f7373616765206275732e0000000000000000000000000000000000000000000060208201529050611f5c565b6020808252810161074e8161272c565b60218152602081017f526f6f74206973206e6f7420636f6e736964657265642066696e616c207965748152601760f91b60208201529050611f5c565b6020808252810161074e81612794565b505f61074e60208301836119bf565b6127f98180611d7e565b6128038382611892565b506128116020820182611d7e565b61281e6020840182611892565b5061282c60408201826127e0565b61283960408401826118a1565b506128476060820182611da8565b610a7e6060840182611be1565b6080810161074e82846127ef565b60018152602081017f7600000000000000000000000000000000000000000000000000000000000000815290506118f0565b604080825281016128a481612862565b905061074e60208301846118a1565b6128bd81836118a1565b602001919050565b60338152602081017f496e76616c696420696e636c7573696f6e2070726f6f6620666f722076616c7581527f65207472616e73666572206d6573736167652e0000000000000000000000000060208201529050611f5c565b6020808252810161074e816128c5565b60258152602081017f526f6f7420616c726561647920616464656420746f20746865206d657373616781527f652062757300000000000000000000000000000000000000000000000000000060208201529050611f5c565b6020808252810161074e8161292d565b5f602082840312156129a8576129a85f5ffd5b6107aa8383611d9d565b5f602082840312156129c5576129c55f5ffd5b6107aa8383611b5e565b60018152602081017f6d00000000000000000000000000000000000000000000000000000000000000815290506118f0565b604080825281016128a4816129cf565b60308152602081017f496e76616c696420696e636c7573696f6e2070726f6f6620666f722063726f7381527f7320636861696e206d6573736167652e0000000000000000000000000000000060208201529050611f5c565b6020808252810161074e81612a11565b67ffffffffffffffff91821691908116908282019081111561074e5761074e61205c565b634e487b7160e01b5f52603260045260245ffdfea2646970667358221220da106be3ef8562662328ee7cb3a002a2cc5d86f6a227a1f522791d3f2480129364736f6c634300081c0033a264697066735822122040f2743ac7011bc3a9918134901cbcb7300448806157b420b70a1d448c83c7c664736f6c634300081c0033",
}

// CrossChainABI is the input ABI used to generate the binding from.
// Deprecated: Use CrossChainMetaData.ABI instead.
var CrossChainABI = CrossChainMetaData.ABI

// CrossChainBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use CrossChainMetaData.Bin instead.
var CrossChainBin = CrossChainMetaData.Bin

// DeployCrossChain deploys a new Ethereum contract, binding an instance of CrossChain to it.
func DeployCrossChain(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *CrossChain, error) {
	parsed, err := CrossChainMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(CrossChainBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &CrossChain{CrossChainCaller: CrossChainCaller{contract: contract}, CrossChainTransactor: CrossChainTransactor{contract: contract}, CrossChainFilterer: CrossChainFilterer{contract: contract}}, nil
}

// CrossChain is an auto generated Go binding around an Ethereum contract.
type CrossChain struct {
	CrossChainCaller     // Read-only binding to the contract
	CrossChainTransactor // Write-only binding to the contract
	CrossChainFilterer   // Log filterer for contract events
}

// CrossChainCaller is an auto generated read-only Go binding around an Ethereum contract.
type CrossChainCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// CrossChainTransactor is an auto generated write-only Go binding around an Ethereum contract.
type CrossChainTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// CrossChainFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type CrossChainFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// CrossChainSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type CrossChainSession struct {
	Contract     *CrossChain       // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// CrossChainCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type CrossChainCallerSession struct {
	Contract *CrossChainCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts     // Call options to use throughout this session
}

// CrossChainTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type CrossChainTransactorSession struct {
	Contract     *CrossChainTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts     // Transaction auth options to use throughout this session
}

// CrossChainRaw is an auto generated low-level Go binding around an Ethereum contract.
type CrossChainRaw struct {
	Contract *CrossChain // Generic contract binding to access the raw methods on
}

// CrossChainCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type CrossChainCallerRaw struct {
	Contract *CrossChainCaller // Generic read-only contract binding to access the raw methods on
}

// CrossChainTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type CrossChainTransactorRaw struct {
	Contract *CrossChainTransactor // Generic write-only contract binding to access the raw methods on
}

// NewCrossChain creates a new instance of CrossChain, bound to a specific deployed contract.
func NewCrossChain(address common.Address, backend bind.ContractBackend) (*CrossChain, error) {
	contract, err := bindCrossChain(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &CrossChain{CrossChainCaller: CrossChainCaller{contract: contract}, CrossChainTransactor: CrossChainTransactor{contract: contract}, CrossChainFilterer: CrossChainFilterer{contract: contract}}, nil
}

// NewCrossChainCaller creates a new read-only instance of CrossChain, bound to a specific deployed contract.
func NewCrossChainCaller(address common.Address, caller bind.ContractCaller) (*CrossChainCaller, error) {
	contract, err := bindCrossChain(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &CrossChainCaller{contract: contract}, nil
}

// NewCrossChainTransactor creates a new write-only instance of CrossChain, bound to a specific deployed contract.
func NewCrossChainTransactor(address common.Address, transactor bind.ContractTransactor) (*CrossChainTransactor, error) {
	contract, err := bindCrossChain(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &CrossChainTransactor{contract: contract}, nil
}

// NewCrossChainFilterer creates a new log filterer instance of CrossChain, bound to a specific deployed contract.
func NewCrossChainFilterer(address common.Address, filterer bind.ContractFilterer) (*CrossChainFilterer, error) {
	contract, err := bindCrossChain(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &CrossChainFilterer{contract: contract}, nil
}

// bindCrossChain binds a generic wrapper to an already deployed contract.
func bindCrossChain(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := CrossChainMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_CrossChain *CrossChainRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _CrossChain.Contract.CrossChainCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_CrossChain *CrossChainRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _CrossChain.Contract.CrossChainTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_CrossChain *CrossChainRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _CrossChain.Contract.CrossChainTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_CrossChain *CrossChainCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _CrossChain.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_CrossChain *CrossChainTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _CrossChain.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_CrossChain *CrossChainTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _CrossChain.Contract.contract.Transact(opts, method, params...)
}

// IsBundleAvailable is a free data retrieval call binding the contract method 0xa4ab2faa.
//
// Solidity: function isBundleAvailable(bytes[] crossChainHashes) view returns(bool)
func (_CrossChain *CrossChainCaller) IsBundleAvailable(opts *bind.CallOpts, crossChainHashes [][]byte) (bool, error) {
	var out []interface{}
	err := _CrossChain.contract.Call(opts, &out, "isBundleAvailable", crossChainHashes)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsBundleAvailable is a free data retrieval call binding the contract method 0xa4ab2faa.
//
// Solidity: function isBundleAvailable(bytes[] crossChainHashes) view returns(bool)
func (_CrossChain *CrossChainSession) IsBundleAvailable(crossChainHashes [][]byte) (bool, error) {
	return _CrossChain.Contract.IsBundleAvailable(&_CrossChain.CallOpts, crossChainHashes)
}

// IsBundleAvailable is a free data retrieval call binding the contract method 0xa4ab2faa.
//
// Solidity: function isBundleAvailable(bytes[] crossChainHashes) view returns(bool)
func (_CrossChain *CrossChainCallerSession) IsBundleAvailable(crossChainHashes [][]byte) (bool, error) {
	return _CrossChain.Contract.IsBundleAvailable(&_CrossChain.CallOpts, crossChainHashes)
}

// IsBundleSaved is a free data retrieval call binding the contract method 0x84154826.
//
// Solidity: function isBundleSaved(bytes32 ) view returns(bool)
func (_CrossChain *CrossChainCaller) IsBundleSaved(opts *bind.CallOpts, arg0 [32]byte) (bool, error) {
	var out []interface{}
	err := _CrossChain.contract.Call(opts, &out, "isBundleSaved", arg0)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsBundleSaved is a free data retrieval call binding the contract method 0x84154826.
//
// Solidity: function isBundleSaved(bytes32 ) view returns(bool)
func (_CrossChain *CrossChainSession) IsBundleSaved(arg0 [32]byte) (bool, error) {
	return _CrossChain.Contract.IsBundleSaved(&_CrossChain.CallOpts, arg0)
}

// IsBundleSaved is a free data retrieval call binding the contract method 0x84154826.
//
// Solidity: function isBundleSaved(bytes32 ) view returns(bool)
func (_CrossChain *CrossChainCallerSession) IsBundleSaved(arg0 [32]byte) (bool, error) {
	return _CrossChain.Contract.IsBundleSaved(&_CrossChain.CallOpts, arg0)
}

// IsWithdrawalSpent is a free data retrieval call binding the contract method 0x2f0cb9e3.
//
// Solidity: function isWithdrawalSpent(bytes32 ) view returns(bool)
func (_CrossChain *CrossChainCaller) IsWithdrawalSpent(opts *bind.CallOpts, arg0 [32]byte) (bool, error) {
	var out []interface{}
	err := _CrossChain.contract.Call(opts, &out, "isWithdrawalSpent", arg0)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsWithdrawalSpent is a free data retrieval call binding the contract method 0x2f0cb9e3.
//
// Solidity: function isWithdrawalSpent(bytes32 ) view returns(bool)
func (_CrossChain *CrossChainSession) IsWithdrawalSpent(arg0 [32]byte) (bool, error) {
	return _CrossChain.Contract.IsWithdrawalSpent(&_CrossChain.CallOpts, arg0)
}

// IsWithdrawalSpent is a free data retrieval call binding the contract method 0x2f0cb9e3.
//
// Solidity: function isWithdrawalSpent(bytes32 ) view returns(bool)
func (_CrossChain *CrossChainCallerSession) IsWithdrawalSpent(arg0 [32]byte) (bool, error) {
	return _CrossChain.Contract.IsWithdrawalSpent(&_CrossChain.CallOpts, arg0)
}

// MerkleMessageBus is a free data retrieval call binding the contract method 0xe874eb20.
//
// Solidity: function merkleMessageBus() view returns(address)
func (_CrossChain *CrossChainCaller) MerkleMessageBus(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _CrossChain.contract.Call(opts, &out, "merkleMessageBus")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// MerkleMessageBus is a free data retrieval call binding the contract method 0xe874eb20.
//
// Solidity: function merkleMessageBus() view returns(address)
func (_CrossChain *CrossChainSession) MerkleMessageBus() (common.Address, error) {
	return _CrossChain.Contract.MerkleMessageBus(&_CrossChain.CallOpts)
}

// MerkleMessageBus is a free data retrieval call binding the contract method 0xe874eb20.
//
// Solidity: function merkleMessageBus() view returns(address)
func (_CrossChain *CrossChainCallerSession) MerkleMessageBus() (common.Address, error) {
	return _CrossChain.Contract.MerkleMessageBus(&_CrossChain.CallOpts)
}

// MessageBus is a free data retrieval call binding the contract method 0xa1a227fa.
//
// Solidity: function messageBus() view returns(address)
func (_CrossChain *CrossChainCaller) MessageBus(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _CrossChain.contract.Call(opts, &out, "messageBus")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// MessageBus is a free data retrieval call binding the contract method 0xa1a227fa.
//
// Solidity: function messageBus() view returns(address)
func (_CrossChain *CrossChainSession) MessageBus() (common.Address, error) {
	return _CrossChain.Contract.MessageBus(&_CrossChain.CallOpts)
}

// MessageBus is a free data retrieval call binding the contract method 0xa1a227fa.
//
// Solidity: function messageBus() view returns(address)
func (_CrossChain *CrossChainCallerSession) MessageBus() (common.Address, error) {
	return _CrossChain.Contract.MessageBus(&_CrossChain.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_CrossChain *CrossChainCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _CrossChain.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_CrossChain *CrossChainSession) Owner() (common.Address, error) {
	return _CrossChain.Contract.Owner(&_CrossChain.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_CrossChain *CrossChainCallerSession) Owner() (common.Address, error) {
	return _CrossChain.Contract.Owner(&_CrossChain.CallOpts)
}

// ExtractNativeValue is a paid mutator transaction binding the contract method 0x6af52662.
//
// Solidity: function extractNativeValue((address,address,uint256,uint64) _msg, bytes32[] proof, bytes32 root) returns()
func (_CrossChain *CrossChainTransactor) ExtractNativeValue(opts *bind.TransactOpts, _msg StructsValueTransferMessage, proof [][32]byte, root [32]byte) (*types.Transaction, error) {
	return _CrossChain.contract.Transact(opts, "extractNativeValue", _msg, proof, root)
}

// ExtractNativeValue is a paid mutator transaction binding the contract method 0x6af52662.
//
// Solidity: function extractNativeValue((address,address,uint256,uint64) _msg, bytes32[] proof, bytes32 root) returns()
func (_CrossChain *CrossChainSession) ExtractNativeValue(_msg StructsValueTransferMessage, proof [][32]byte, root [32]byte) (*types.Transaction, error) {
	return _CrossChain.Contract.ExtractNativeValue(&_CrossChain.TransactOpts, _msg, proof, root)
}

// ExtractNativeValue is a paid mutator transaction binding the contract method 0x6af52662.
//
// Solidity: function extractNativeValue((address,address,uint256,uint64) _msg, bytes32[] proof, bytes32 root) returns()
func (_CrossChain *CrossChainTransactorSession) ExtractNativeValue(_msg StructsValueTransferMessage, proof [][32]byte, root [32]byte) (*types.Transaction, error) {
	return _CrossChain.Contract.ExtractNativeValue(&_CrossChain.TransactOpts, _msg, proof, root)
}

// Initialize is a paid mutator transaction binding the contract method 0xc4d66de8.
//
// Solidity: function initialize(address owner) returns()
func (_CrossChain *CrossChainTransactor) Initialize(opts *bind.TransactOpts, owner common.Address) (*types.Transaction, error) {
	return _CrossChain.contract.Transact(opts, "initialize", owner)
}

// Initialize is a paid mutator transaction binding the contract method 0xc4d66de8.
//
// Solidity: function initialize(address owner) returns()
func (_CrossChain *CrossChainSession) Initialize(owner common.Address) (*types.Transaction, error) {
	return _CrossChain.Contract.Initialize(&_CrossChain.TransactOpts, owner)
}

// Initialize is a paid mutator transaction binding the contract method 0xc4d66de8.
//
// Solidity: function initialize(address owner) returns()
func (_CrossChain *CrossChainTransactorSession) Initialize(owner common.Address) (*types.Transaction, error) {
	return _CrossChain.Contract.Initialize(&_CrossChain.TransactOpts, owner)
}

// PauseWithdrawals is a paid mutator transaction binding the contract method 0xf4cc87ba.
//
// Solidity: function pauseWithdrawals(bool _pause) returns()
func (_CrossChain *CrossChainTransactor) PauseWithdrawals(opts *bind.TransactOpts, _pause bool) (*types.Transaction, error) {
	return _CrossChain.contract.Transact(opts, "pauseWithdrawals", _pause)
}

// PauseWithdrawals is a paid mutator transaction binding the contract method 0xf4cc87ba.
//
// Solidity: function pauseWithdrawals(bool _pause) returns()
func (_CrossChain *CrossChainSession) PauseWithdrawals(_pause bool) (*types.Transaction, error) {
	return _CrossChain.Contract.PauseWithdrawals(&_CrossChain.TransactOpts, _pause)
}

// PauseWithdrawals is a paid mutator transaction binding the contract method 0xf4cc87ba.
//
// Solidity: function pauseWithdrawals(bool _pause) returns()
func (_CrossChain *CrossChainTransactorSession) PauseWithdrawals(_pause bool) (*types.Transaction, error) {
	return _CrossChain.Contract.PauseWithdrawals(&_CrossChain.TransactOpts, _pause)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_CrossChain *CrossChainTransactor) RenounceOwnership(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _CrossChain.contract.Transact(opts, "renounceOwnership")
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_CrossChain *CrossChainSession) RenounceOwnership() (*types.Transaction, error) {
	return _CrossChain.Contract.RenounceOwnership(&_CrossChain.TransactOpts)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_CrossChain *CrossChainTransactorSession) RenounceOwnership() (*types.Transaction, error) {
	return _CrossChain.Contract.RenounceOwnership(&_CrossChain.TransactOpts)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_CrossChain *CrossChainTransactor) TransferOwnership(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _CrossChain.contract.Transact(opts, "transferOwnership", newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_CrossChain *CrossChainSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _CrossChain.Contract.TransferOwnership(&_CrossChain.TransactOpts, newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_CrossChain *CrossChainTransactorSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _CrossChain.Contract.TransferOwnership(&_CrossChain.TransactOpts, newOwner)
}

// CrossChainInitializedIterator is returned from FilterInitialized and is used to iterate over the raw logs and unpacked data for Initialized events raised by the CrossChain contract.
type CrossChainInitializedIterator struct {
	Event *CrossChainInitialized // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *CrossChainInitializedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(CrossChainInitialized)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(CrossChainInitialized)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *CrossChainInitializedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *CrossChainInitializedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// CrossChainInitialized represents a Initialized event raised by the CrossChain contract.
type CrossChainInitialized struct {
	Version uint64
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterInitialized is a free log retrieval operation binding the contract event 0xc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d2.
//
// Solidity: event Initialized(uint64 version)
func (_CrossChain *CrossChainFilterer) FilterInitialized(opts *bind.FilterOpts) (*CrossChainInitializedIterator, error) {

	logs, sub, err := _CrossChain.contract.FilterLogs(opts, "Initialized")
	if err != nil {
		return nil, err
	}
	return &CrossChainInitializedIterator{contract: _CrossChain.contract, event: "Initialized", logs: logs, sub: sub}, nil
}

// WatchInitialized is a free log subscription operation binding the contract event 0xc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d2.
//
// Solidity: event Initialized(uint64 version)
func (_CrossChain *CrossChainFilterer) WatchInitialized(opts *bind.WatchOpts, sink chan<- *CrossChainInitialized) (event.Subscription, error) {

	logs, sub, err := _CrossChain.contract.WatchLogs(opts, "Initialized")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(CrossChainInitialized)
				if err := _CrossChain.contract.UnpackLog(event, "Initialized", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseInitialized is a log parse operation binding the contract event 0xc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d2.
//
// Solidity: event Initialized(uint64 version)
func (_CrossChain *CrossChainFilterer) ParseInitialized(log types.Log) (*CrossChainInitialized, error) {
	event := new(CrossChainInitialized)
	if err := _CrossChain.contract.UnpackLog(event, "Initialized", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// CrossChainOwnershipTransferredIterator is returned from FilterOwnershipTransferred and is used to iterate over the raw logs and unpacked data for OwnershipTransferred events raised by the CrossChain contract.
type CrossChainOwnershipTransferredIterator struct {
	Event *CrossChainOwnershipTransferred // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *CrossChainOwnershipTransferredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(CrossChainOwnershipTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(CrossChainOwnershipTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *CrossChainOwnershipTransferredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *CrossChainOwnershipTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// CrossChainOwnershipTransferred represents a OwnershipTransferred event raised by the CrossChain contract.
type CrossChainOwnershipTransferred struct {
	PreviousOwner common.Address
	NewOwner      common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterOwnershipTransferred is a free log retrieval operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_CrossChain *CrossChainFilterer) FilterOwnershipTransferred(opts *bind.FilterOpts, previousOwner []common.Address, newOwner []common.Address) (*CrossChainOwnershipTransferredIterator, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _CrossChain.contract.FilterLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return &CrossChainOwnershipTransferredIterator{contract: _CrossChain.contract, event: "OwnershipTransferred", logs: logs, sub: sub}, nil
}

// WatchOwnershipTransferred is a free log subscription operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_CrossChain *CrossChainFilterer) WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *CrossChainOwnershipTransferred, previousOwner []common.Address, newOwner []common.Address) (event.Subscription, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _CrossChain.contract.WatchLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(CrossChainOwnershipTransferred)
				if err := _CrossChain.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOwnershipTransferred is a log parse operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_CrossChain *CrossChainFilterer) ParseOwnershipTransferred(log types.Log) (*CrossChainOwnershipTransferred, error) {
	event := new(CrossChainOwnershipTransferred)
	if err := _CrossChain.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// CrossChainWithdrawalsPausedIterator is returned from FilterWithdrawalsPaused and is used to iterate over the raw logs and unpacked data for WithdrawalsPaused events raised by the CrossChain contract.
type CrossChainWithdrawalsPausedIterator struct {
	Event *CrossChainWithdrawalsPaused // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *CrossChainWithdrawalsPausedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(CrossChainWithdrawalsPaused)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(CrossChainWithdrawalsPaused)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *CrossChainWithdrawalsPausedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *CrossChainWithdrawalsPausedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// CrossChainWithdrawalsPaused represents a WithdrawalsPaused event raised by the CrossChain contract.
type CrossChainWithdrawalsPaused struct {
	Paused bool
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterWithdrawalsPaused is a free log retrieval operation binding the contract event 0x129d33f7856617012aed60524381cfff7233cfc57df58d9f6613a5593d3dc218.
//
// Solidity: event WithdrawalsPaused(bool paused)
func (_CrossChain *CrossChainFilterer) FilterWithdrawalsPaused(opts *bind.FilterOpts) (*CrossChainWithdrawalsPausedIterator, error) {

	logs, sub, err := _CrossChain.contract.FilterLogs(opts, "WithdrawalsPaused")
	if err != nil {
		return nil, err
	}
	return &CrossChainWithdrawalsPausedIterator{contract: _CrossChain.contract, event: "WithdrawalsPaused", logs: logs, sub: sub}, nil
}

// WatchWithdrawalsPaused is a free log subscription operation binding the contract event 0x129d33f7856617012aed60524381cfff7233cfc57df58d9f6613a5593d3dc218.
//
// Solidity: event WithdrawalsPaused(bool paused)
func (_CrossChain *CrossChainFilterer) WatchWithdrawalsPaused(opts *bind.WatchOpts, sink chan<- *CrossChainWithdrawalsPaused) (event.Subscription, error) {

	logs, sub, err := _CrossChain.contract.WatchLogs(opts, "WithdrawalsPaused")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(CrossChainWithdrawalsPaused)
				if err := _CrossChain.contract.UnpackLog(event, "WithdrawalsPaused", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseWithdrawalsPaused is a log parse operation binding the contract event 0x129d33f7856617012aed60524381cfff7233cfc57df58d9f6613a5593d3dc218.
//
// Solidity: event WithdrawalsPaused(bool paused)
func (_CrossChain *CrossChainFilterer) ParseWithdrawalsPaused(log types.Log) (*CrossChainWithdrawalsPaused, error) {
	event := new(CrossChainWithdrawalsPaused)
	if err := _CrossChain.contract.UnpackLog(event, "WithdrawalsPaused", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
