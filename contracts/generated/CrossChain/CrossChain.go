// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package CrossChain

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
	_ = abi.ConvertType
)

// CrossChainMetaData contains all meta data concerning the CrossChain contract.
var CrossChainMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"InvalidInitialization\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotInitializing\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ReentrancyGuardReentrantCall\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"version\",\"type\":\"uint64\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferStarted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"paused\",\"type\":\"bool\"}],\"name\":\"WithdrawalsPaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes[]\",\"name\":\"crossChainHashes\",\"type\":\"bytes[]\"}],\"name\":\"isBundleAvailable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"bundleHash\",\"type\":\"bytes32\"}],\"name\":\"isBundleSaved\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isBundleSaved\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"withdrawalHash\",\"type\":\"bytes32\"}],\"name\":\"isWithdrawalSpent\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isWithdrawalSpent\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"merkleMessageBus\",\"outputs\":[{\"internalType\":\"contractIMerkleTreeMessageBus\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"messageBus\",\"outputs\":[{\"internalType\":\"contractIMessageBus\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_pause\",\"type\":\"bool\"}],\"name\":\"pauseWithdrawals\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
	Bin: "0x6080604052348015600e575f5ffd5b50601633601a565b60c4565b7f237e158222e3e6968b72b9db0d8043aacf074ad9f650f0d1606b4d82ee432c0080546001600160a01b03191681556050826054565b5050565b7f9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c19930080546001600160a01b031981166001600160a01b03848116918217845560405192169182907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0905f90a3505050565b6134e5806100d15f395ff3fe608060405234801561000f575f5ffd5b50600436106100cf575f3560e01c8063a4ab2faa1161007d578063e874eb2011610058578063e874eb20146101a2578063f2fde38b146101b5578063f4cc87ba146101c8575f5ffd5b8063a4ab2faa14610174578063c4d66de814610187578063e30c39781461019a575f5ffd5b806384154826116100ad578063841548261461011d5780638da5cb5b1461013f578063a1a227fa14610154575f5ffd5b80632f0cb9e3146100d3578063715018a61461010b57806379ba509714610115575b5f5ffd5b6100f56100e1366004610833565b60016020525f908152604090205460ff1681565b6040516101029190610861565b60405180910390f35b6101136101db565b005b61011361021e565b6100f561012b366004610833565b60026020525f908152604090205460ff1681565b61014761025d565b6040516101029190610888565b600354610167906001600160a01b031681565b60405161010291906108b3565b6100f5610182366004610a60565b610291565b610113610195366004610ab4565b61030d565b61014761052c565b600454610167906001600160a01b031681565b6101136101c3366004610ab4565b610554565b6101136101d6366004610ae4565b6105d9565b6101e3610629565b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161021590610b01565b60405180910390fd5b338061022861052c565b6001600160a01b031614610251578060405163118cdaa760e01b81526004016102159190610888565b61025a8161065d565b50565b5f807f9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c1993005b546001600160a01b031692915050565b5f80805b83518110156102f557818482815181106102b1576102b1610b62565b60200260200101516102c290610b7f565b6040516020016102d3929190610bbd565b60408051601f1981840301815291905280516020909101209150600101610295565b505f9081526002602052604090205460ff1692915050565b7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00805468010000000000000000810460ff16159067ffffffffffffffff165f811580156103575750825b90505f8267ffffffffffffffff1660011480156103735750303b155b905081158015610381575080155b156103b8576040517ff92ee8a900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b845467ffffffffffffffff1916600117855583156103ec57845468ff00000000000000001916680100000000000000001785555b6103f586610699565b6103fd6106aa565b60405161040990610809565b604051809103905ff080158015610422573d5f5f3e3d5ffd5b50600480546001600160a01b0319166001600160a01b039290921691821781556040517f485cc95500000000000000000000000000000000000000000000000000000000815263485cc9559161047c918a91309101610bd8565b5f604051808303815f87803b158015610493575f5ffd5b505af11580156104a5573d5f5f3e3d5ffd5b5050600454600380546001600160a01b0319166001600160a01b0390921691909117905550505f805460ff19169055831561052457845468ff0000000000000000191685556040517fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d29061051b90600190610c0d565b60405180910390a15b505050505050565b5f807f237e158222e3e6968b72b9db0d8043aacf074ad9f650f0d1606b4d82ee432c00610281565b61055c610629565b7f237e158222e3e6968b72b9db0d8043aacf074ad9f650f0d1606b4d82ee432c0080546001600160a01b0319166001600160a01b03831690811782556105a061025d565b6001600160a01b03167f38d16b8cac22d99fc7c124b9cd0de2d3fa1faef420bfe791d8c362d765e2270060405160405180910390a35050565b6105e1610629565b5f805460ff19168215151790556040517f129d33f7856617012aed60524381cfff7233cfc57df58d9f6613a5593d3dc2189061061e908390610861565b60405180910390a150565b3361063261025d565b6001600160a01b03161461065b573360405163118cdaa760e01b81526004016102159190610888565b565b7f237e158222e3e6968b72b9db0d8043aacf074ad9f650f0d1606b4d82ee432c0080546001600160a01b0319168155610695826106ba565b5050565b6106a161072a565b61025a81610791565b6106b261072a565b61065b6107db565b7f9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c19930080546001600160a01b031981166001600160a01b03848116918217845560405192169182907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0905f90a3505050565b7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a005468010000000000000000900460ff1661065b576040517fd7e6bcf800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61079961072a565b6001600160a01b038116610251575f6040517f1e4fbdf70000000000000000000000000000000000000000000000000000000081526004016102159190610888565b6107e361072a565b60017f9b779b17422d0df92223018b32b4d1fa46e071723d6817e2486d003becc55f0055565b61289480610c1c83390190565b805b811461025a575f5ffd5b803561082d81610816565b92915050565b5f60208284031215610846576108465f5ffd5b6108508383610822565b9392505050565b8015155b82525050565b6020810161082d8284610857565b5f6001600160a01b03821661082d565b61085b8161086f565b6020810161082d828461087f565b5f61082d8261086f565b5f61082d82610896565b61085b816108a0565b6020810161082d82846108aa565b634e487b7160e01b5f52604160045260245ffd5b601f19601f830116810181811067ffffffffffffffff821117156108fb576108fb6108c1565b6040525050565b5f61090c60405190565b905061091882826108d5565b919050565b5f67ffffffffffffffff821115610936576109366108c1565b5060209081020190565b5f67ffffffffffffffff821115610959576109596108c1565b601f19601f83011660200192915050565b82818337505f910152565b5f61098761098284610940565b610902565b905082815283838301111561099d5761099d5f5ffd5b61085083602083018461096a565b5f82601f8301126109bd576109bd5f5ffd5b61085083833560208501610975565b5f6109d96109828461091d565b838152905060208082019084028301858111156109f7576109f75f5ffd5b835b81811015610a3557803567ffffffffffffffff811115610a1a57610a1a5f5ffd5b610a26888288016109ab565b845250602092830192016109f9565b5050509392505050565b5f82601f830112610a5157610a515f5ffd5b610850838335602085016109cc565b5f60208284031215610a7357610a735f5ffd5b813567ffffffffffffffff811115610a8c57610a8c5f5ffd5b610a9884828501610a3f565b949350505050565b6108188161086f565b803561082d81610aa0565b5f60208284031215610ac757610ac75f5ffd5b6108508383610aa9565b801515610818565b803561082d81610ad1565b5f60208284031215610af757610af75f5ffd5b6108508383610ad9565b6020808252810161082d81603481527f556e72656e6f756e6361626c654f776e61626c6532537465703a2063616e6e6f60208201527f742072656e6f756e6365206f776e657273686970000000000000000000000000604082015260600190565b634e487b7160e01b5f52603260045260245ffd5b5f61082d825190565b5f610b88825190565b60208301610b9581610b76565b9250506020811015610bb1575f1960086020839003021b821691505b50919050565b8061085b565b60408101610bcb8285610bb7565b6108506020830184610bb7565b60408101610be6828561087f565b610850602083018461087f565b5f67ffffffffffffffff821661082d565b61085b81610bf3565b6020810161082d8284610c0456fe6080604052348015600e575f5ffd5b50601633601a565b60c4565b7f237e158222e3e6968b72b9db0d8043aacf074ad9f650f0d1606b4d82ee432c0080546001600160a01b03191681556050826054565b5050565b7f9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c19930080546001600160a01b031981166001600160a01b03848116918217845560405192169182907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0905f90a3505050565b6127c3806100d15f395ff3fe6080604052600436106101aa575f3560e01c806379ba5097116100eb578063b201246f11610089578063e138a8d211610063578063e138a8d214610535578063e30c397814610554578063f2fde38b14610568578063fb89402914610587576101aa565b8063b201246f146104d8578063b6aed0cb146104f7578063d547741f14610516576101aa565b80639730886d116100c55780639730886d14610453578063a217fddf14610472578063ad7805e814610485578063b1454caa146104b8576101aa565b806379ba5097146103bb5780638da5cb5b146103cf57806391d14854146103f0576101aa565b8063248a9ca31161015857806336568abe1161013257806336568abe1461034a57806336d2da9014610369578063485cc95514610388578063715018a6146103a7576101aa565b8063248a9ca3146102bf5780632f2ff15d1461030c57806333a88c721461032b576101aa565b80630fcfbd11116101895780630fcfbd11146102605780630fe9188e1461027f5780631050afdd146102a0576101aa565b8062a1b815146101d757806301ffc9a71461020157806302b4df191461022d575b3480156101b5575f5ffd5b5060405162461bcd60e51b81526004016101ce9061161c565b60405180910390fd5b3480156101e2575f5ffd5b506101eb6105a6565b6040516101f89190611634565b60405180910390f35b34801561020c575f5ffd5b5061022061021b366004611663565b61062f565b6040516101f89190611688565b348015610238575f5ffd5b506101eb7f65c4b771cce18ff228842b3883a73079ee3e76bd08965f6dadb7cb56dbf6e19481565b34801561026b575f5ffd5b506101eb61027a3660046116af565b610697565b34801561028a575f5ffd5b5061029e6102993660046116f8565b6106f4565b005b3480156102ab575f5ffd5b5061029e6102ba366004611739565b61075b565b3480156102ca575f5ffd5b506101eb6102d93660046116f8565b5f9081527f02dd7bc7dec4dceedda775e58dd541e08a116c6c53815c0bd028192f7b626800602052604090206001015490565b348015610317575f5ffd5b5061029e610326366004611756565b610793565b348015610336575f5ffd5b506102206103453660046116af565b6107dc565b348015610355575f5ffd5b5061029e610364366004611756565b61082c565b348015610374575f5ffd5b5061029e610383366004611739565b61087d565b348015610393575f5ffd5b5061029e6103a236600461178c565b6108f4565b3480156103b2575f5ffd5b5061029e610a9e565b3480156103c6575f5ffd5b5061029e610abe565b3480156103da575f5ffd5b506103e3610afd565b6040516101f891906117b3565b3480156103fb575f5ffd5b5061022061040a366004611756565b5f9182527f02dd7bc7dec4dceedda775e58dd541e08a116c6c53815c0bd028192f7b626800602090815260408084206001600160a01b0393909316845291905290205460ff1690565b34801561045e575f5ffd5b5061029e61046d3660046117c1565b610b31565b34801561047d575f5ffd5b506101eb5f81565b348015610490575f5ffd5b506101eb7fe0d563514842a8c29151c49cd2698127f54dd344a9b2c74a42fe9be3e305fe9881565b6104cb6104c6366004611883565b610c6d565b6040516101f8919061190b565b3480156104e3575f5ffd5b5061029e6104f2366004611973565b610d75565b348015610502575f5ffd5b5061029e6105113660046119da565b610e73565b348015610521575f5ffd5b5061029e610530366004611756565b610eda565b348015610540575f5ffd5b5061029e61054f366004611a07565b610f1d565b34801561055f575f5ffd5b506103e3611064565b348015610573575f5ffd5b5061029e610582366004611739565b61108c565b348015610592575f5ffd5b5061029e6105a1366004611739565b61111e565b600354604080517f1a90a21900000000000000000000000000000000000000000000000000000000815290515f926001600160a01b031691631a90a2199160048083019260209291908290030181865afa158015610606573d5f5f3e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061062a9190611a8a565b905090565b5f6001600160e01b031982167f7965db0b00000000000000000000000000000000000000000000000000000000148061069157507f01ffc9a7000000000000000000000000000000000000000000000000000000006001600160e01b03198316145b92915050565b5f5f826040516020016106aa9190611c3c565b60408051601f1981840301815291815281516020928301205f81815292839052912054909150806106ed5760405162461bcd60e51b81526004016101ce90611c8b565b9392505050565b7f65c4b771cce18ff228842b3883a73079ee3e76bd08965f6dadb7cb56dbf6e19461071e81611152565b5f82815260046020526040812054900361074a5760405162461bcd60e51b81526004016101ce90611ccd565b505f90815260046020526040812055565b5f61076581611152565b61078f7f65c4b771cce18ff228842b3883a73079ee3e76bd08965f6dadb7cb56dbf6e19483610eda565b5050565b5f8281527f02dd7bc7dec4dceedda775e58dd541e08a116c6c53815c0bd028192f7b62680060205260409020600101546107cc81611152565b6107d6838361115c565b50505050565b5f5f826040516020016107ef9190611c3c565b60408051601f1981840301815291815281516020928301205f8181529283905291205490915080158015906108245750428111155b949350505050565b6001600160a01b038116331461086e576040517f6697b23200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6108788282611228565b505050565b6108856112cc565b5f816001600160a01b0316476040515f6040518083038185875af1925050503d805f81146108ce576040519150601f19603f3d011682016040523d82523d5f602084013e6108d3565b606091505b505090508061078f5760405162461bcd60e51b81526004016101ce90611d0f565b7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00805468010000000000000000810460ff16159067ffffffffffffffff165f8115801561093e5750825b90505f8267ffffffffffffffff16600114801561095a5750303b155b905081158015610968575080155b1561099f576040517ff92ee8a900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b845467ffffffffffffffff1916600117855583156109d357845468ff00000000000000001916680100000000000000001785555b6109dc87611300565b6109e4611311565b6109ee5f8861115c565b50610a197f65c4b771cce18ff228842b3883a73079ee3e76bd08965f6dadb7cb56dbf6e1948861115c565b50610a447fe0d563514842a8c29151c49cd2698127f54dd344a9b2c74a42fe9be3e305fe988761115c565b508315610a9557845468ff0000000000000000191685556040517fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d290610a8c90600190611d42565b60405180910390a15b50505050505050565b610aa66112cc565b60405162461bcd60e51b81526004016101ce90611da8565b3380610ac8611064565b6001600160a01b031614610af1578060405163118cdaa760e01b81526004016101ce91906117b3565b610afa81611319565b50565b5f807f9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c1993005b546001600160a01b031692915050565b5f610b3d600130611dcc565b9050610b47610afd565b6001600160a01b0316336001600160a01b03161480610b6e5750336001600160a01b038216145b610b8a5760405162461bcd60e51b81526004016101ce90611e21565b5f610b958342611e31565b90505f84604051602001610ba99190611c3c565b60408051601f1981840301815291815281516020928301205f8181529283905291205490915015610bec5760405162461bcd60e51b81526004016101ce90611e9c565b5f81815260208181526040822084905560019190610c0c90880188611739565b6001600160a01b0316815260208101919091526040015f90812090610c376080880160608901611eac565b63ffffffff1681526020808201929092526040015f9081208054600181018255908252919020869160040201610a9582826122aa565b6003545f906001600160a01b031615610d1e575f610c896105a6565b905080341015610cab5760405162461bcd60e51b81526004016101ce9061230c565b6003546040515f916001600160a01b03169083908381818185875af1925050503d805f8114610cf5576040519150601f19603f3d011682016040523d82523d5f602084013e610cfa565b606091505b5050905080610d1b5760405162461bcd60e51b81526004016101ce90612374565b50505b610d273361135e565b90507fb93c37389233beb85a3a726c3f15c2d15533ee74cb602f20f490dfffef77593733828888888888604051610d649796959493929190612384565b60405180910390a195945050505050565b5f818152600460205260408120549003610da15760405162461bcd60e51b81526004016101ce9061243f565b5f81815260046020526040902054421015610dce5760405162461bcd60e51b81526004016101ce9061248b565b5f84604051602001610de0919061250f565b60405160208183030381529060405280519060200120604051602001610e06919061254f565b604051602081830303815290604052805190602001209050610e5084848484604051602001610e359190612574565b604051602081830303815290604052805190602001206113bb565b610e6c5760405162461bcd60e51b81526004016101ce906125de565b5050505050565b7f65c4b771cce18ff228842b3883a73079ee3e76bd08965f6dadb7cb56dbf6e194610e9d81611152565b5f8381526004602052604090205415610ec85760405162461bcd60e51b81526004016101ce90612646565b505f9182526004602052604090912055565b5f8281527f02dd7bc7dec4dceedda775e58dd541e08a116c6c53815c0bd028192f7b6268006020526040902060010154610f1381611152565b6107d68383611228565b5f818152600460205260408120549003610f495760405162461bcd60e51b81526004016101ce9061243f565b5f81815260046020526040902054421015610f765760405162461bcd60e51b81526004016101ce9061248b565b5f610f846020860186611739565b610f946040870160208801612656565b610fa46060880160408901611eac565b610fb46080890160608a01611eac565b610fc160808a018a611fde565b610fd160c08c0160a08d01612673565b604051602001610fe79796959493929190612384565b6040516020818303038152906040528051906020012090505f8160405160200161101191906126c2565b60405160208183030381529060405280519060200120905061104085858584604051602001610e359190612574565b61105c5760405162461bcd60e51b81526004016101ce9061272a565b505050505050565b5f807f237e158222e3e6968b72b9db0d8043aacf074ad9f650f0d1606b4d82ee432c00610b21565b6110946112cc565b7f237e158222e3e6968b72b9db0d8043aacf074ad9f650f0d1606b4d82ee432c00805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b03831690811782556110e5610afd565b6001600160a01b03167f38d16b8cac22d99fc7c124b9cd0de2d3fa1faef420bfe791d8c362d765e2270060405160405180910390a35050565b5f61112881611152565b61078f7f65c4b771cce18ff228842b3883a73079ee3e76bd08965f6dadb7cb56dbf6e19483610793565b610afa81336113d2565b5f8281527f02dd7bc7dec4dceedda775e58dd541e08a116c6c53815c0bd028192f7b626800602081815260408084206001600160a01b038616855290915282205460ff1661121f575f848152602082815260408083206001600160a01b03871684529091529020805460ff191660011790556111d53390565b6001600160a01b0316836001600160a01b0316857f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a46001915050610691565b5f915050610691565b5f8281527f02dd7bc7dec4dceedda775e58dd541e08a116c6c53815c0bd028192f7b626800602081815260408084206001600160a01b038616855290915282205460ff161561121f575f848152602082815260408083206001600160a01b0387168085529252808320805460ff1916905551339287917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a46001915050610691565b336112d5610afd565b6001600160a01b0316146112fe573360405163118cdaa760e01b81526004016101ce91906117b3565b565b611308611450565b610afa816114b7565b6112fe611450565b7f237e158222e3e6968b72b9db0d8043aacf074ad9f650f0d1606b4d82ee432c00805473ffffffffffffffffffffffffffffffffffffffff1916815561078f82611501565b6001600160a01b0381165f908152600260205260408120805467ffffffffffffffff169160019190611390838561273a565b92506101000a81548167ffffffffffffffff021916908367ffffffffffffffff160217905550919050565b5f826113c886868561157e565b1495945050505050565b5f8281527f02dd7bc7dec4dceedda775e58dd541e08a116c6c53815c0bd028192f7b626800602090815260408083206001600160a01b038516845290915290205460ff1661078f5780826040517fe2517d3f0000000000000000000000000000000000000000000000000000000081526004016101ce92919061275e565b7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a005468010000000000000000900460ff166112fe576040517fd7e6bcf800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6114bf611450565b6001600160a01b038116610af1575f6040517f1e4fbdf70000000000000000000000000000000000000000000000000000000081526004016101ce91906117b3565b7f9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c199300805473ffffffffffffffffffffffffffffffffffffffff1981166001600160a01b03848116918217845560405192169182907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0905f90a3505050565b5f81815b848110156115b6576115ac828787848181106115a0576115a0612779565b905060200201356115bf565b9150600101611582565b50949350505050565b5f8183106115d9575f8281526020849052604090206106ed565b505f9182526020526040902090565b600b8152602081017f756e737570706f72746564000000000000000000000000000000000000000000815290505b60200190565b60208082528101610691816115e8565b805b82525050565b60208101610691828461162c565b6001600160e01b031981165b8114610afa575f5ffd5b803561069181611642565b5f60208284031215611676576116765f5ffd5b6106ed8383611658565b80151561162e565b602081016106918284611680565b5f60c082840312156116a9576116a95f5ffd5b50919050565b5f602082840312156116c2576116c25f5ffd5b813567ffffffffffffffff8111156116db576116db5f5ffd5b61082484828501611696565b8061164e565b8035610691816116e7565b5f6020828403121561170b5761170b5f5ffd5b6106ed83836116ed565b5f6001600160a01b038216610691565b61164e81611715565b803561069181611725565b5f6020828403121561174c5761174c5f5ffd5b6106ed838361172e565b5f5f6040838503121561176a5761176a5f5ffd5b61177484846116ed565b9150611783846020850161172e565b90509250929050565b5f5f604083850312156117a0576117a05f5ffd5b611774848461172e565b61162e81611715565b6020810161069182846117aa565b5f5f604083850312156117d5576117d55f5ffd5b823567ffffffffffffffff8111156117ee576117ee5f5ffd5b6117fa85828601611696565b92505061178384602085016116ed565b63ffffffff811661164e565b80356106918161180a565b5f5f83601f840112611834576118345f5ffd5b50813567ffffffffffffffff81111561184e5761184e5f5ffd5b602083019150836001820283011115611868576118685f5ffd5b9250929050565b60ff811661164e565b80356106918161186f565b5f5f5f5f5f6080868803121561189a5761189a5f5ffd5b6118a48787611816565b94506118b38760208801611816565b9350604086013567ffffffffffffffff8111156118d1576118d15f5ffd5b6118dd88828901611821565b93509350506118ef8760608801611878565b90509295509295909350565b67ffffffffffffffff811661162e565b6020810161069182846118fb565b5f608082840312156116a9576116a95f5ffd5b5f5f83601f84011261193f5761193f5f5ffd5b50813567ffffffffffffffff811115611959576119595f5ffd5b602083019150836020820283011115611868576118685f5ffd5b5f5f5f5f60c08587031215611989576119895f5ffd5b6119938686611919565b9350608085013567ffffffffffffffff8111156119b1576119b15f5ffd5b6119bd8782880161192c565b93509350506119cf8660a087016116ed565b905092959194509250565b5f5f604083850312156119ee576119ee5f5ffd5b6119f884846116ed565b915061178384602085016116ed565b5f5f5f5f60608587031215611a1d57611a1d5f5ffd5b843567ffffffffffffffff811115611a3657611a365f5ffd5b611a4287828801611696565b945050602085013567ffffffffffffffff811115611a6157611a615f5ffd5b611a6d8782880161192c565b93509350506119cf86604087016116ed565b8051610691816116e7565b5f60208284031215611a9d57611a9d5f5ffd5b6106ed8383611a7f565b505f610691602083018361172e565b67ffffffffffffffff811661164e565b803561069181611ab6565b505f6106916020830183611ac6565b505f6106916020830183611816565b63ffffffff811661162e565b5f808335601e1936859003018112611b1457611b145f5ffd5b830160208101925035905067ffffffffffffffff811115611b3657611b365f5ffd5b36819003821315611868576118685f5ffd5b82818337505f910152565b818352602083019250611b67828483611b48565b50601f01601f19160190565b505f6106916020830183611878565b60ff811661162e565b5f60c08301611b9a8380611aa7565b611ba485826117aa565b50611bb26020840184611ad1565b611bbf60208601826118fb565b50611bcd6040840184611ae0565b611bda6040860182611aef565b50611be86060840184611ae0565b611bf56060860182611aef565b50611c036080840184611afb565b8583036080870152611c16838284611b53565b92505050611c2760a0840184611b73565b611c3460a0860182611b82565b509392505050565b602080825281016106ed8184611b8b565b60218152602081017f54686973206d65737361676520776173206e65766572207375626d69747465648152601760f91b602082015290505b60400190565b6020808252810161069181611c4d565b601a8152602081017f537461746520726f6f7420646f6573206e6f742065786973742e00000000000081529050611616565b6020808252810161069181611c9b565b60148152602081017f6661696c65642073656e64696e672076616c756500000000000000000000000081529050611616565b6020808252810161069181611cdd565b5f61069182611d2c565b90565b67ffffffffffffffff1690565b61162e81611d1f565b602081016106918284611d39565b60348152602081017f556e72656e6f756e6361626c654f776e61626c6532537465703a2063616e6e6f81527f742072656e6f756e6365206f776e65727368697000000000000000000000000060208201529050611c85565b6020808252810161069181611d50565b634e487b7160e01b5f52601160045260245ffd5b6001600160a01b0391821691908116908282039081111561069157610691611db8565b60118152602081017f4e6f74206f776e6572206f722073656c6600000000000000000000000000000081529050611616565b6020808252810161069181611def565b8082018082111561069157610691611db8565b60218152602081017f4d657373616765207375626d6974746564206d6f7265207468616e206f6e636581527f210000000000000000000000000000000000000000000000000000000000000060208201529050611c85565b6020808252810161069181611e44565b5f60208284031215611ebf57611ebf5f5ffd5b6106ed8383611816565b5f813561069181611725565b5f6001600160a01b03835b81169019929092169190911792915050565b5f61069182611715565b5f61069182611ef2565b611f0f82611efc565b611f1a818354611ed5565b8255505050565b5f813561069181611ab6565b5f7bffffffffffffffff0000000000000000000000000000000000000000611ee08460a01b90565b5f61069167ffffffffffffffff8316611d2c565b611f7282611f55565b611f1a818354611f2d565b5f81356106918161180a565b5f6001600160e01b0319611ee08460e01b90565b5f63ffffffff8216610691565b611fb382611f9d565b611f1a818354611f89565b5f63ffffffff83611ee0565b611fd382611f9d565b611f1a818354611fbe565b5f808335601e1936859003018112611ff757611ff75f5ffd5b8301915050803567ffffffffffffffff811115612015576120155f5ffd5b602082019150600181023603821315611868576118685f5ffd5b634e487b7160e01b5f52604160045260245ffd5b634e487b7160e01b5f52602260045260245ffd5b60028104600182168061206b57607f821691505b6020821081036116a9576116a9612043565b5f610691611d298381565b6120918361207d565b81545f1960089490940293841b1916921b91909117905550565b5f610878818484612088565b8181101561078f576120c95f826120ab565b6001016120b7565b601f821115610878575f818152602090206020601f850104810160208510156120f75750805b610e6c6020601f8601048301826120b7565b8267ffffffffffffffff8111156121225761212261202f565b61212c8254612057565b6121378282856120d1565b505f601f821160018114612169575f83156121525750848201355b5f19600885021c198116600285021785555061105c565b5f84815260208120601f198516915b828110156121985787850135825560209485019460019092019101612178565b50848210156121b4575f196008601f8716021c19878501351681555b5050505060020260010190555050565b610878838383612109565b5f81356106918161186f565b5f60ff8216610691565b6121ee826121db565b815460ff191660ff821617611f1a565b80828061220a81611ec9565b90506122168184611f06565b5050602083018061222682611f21565b90506122328184611f69565b5050604083018061224282611f7d565b905061224e8184611faa565b505050606082018061225f82611f7d565b905061226e8160018501611fca565b505061227d6080830183611fde565b61228b8183600286016121c4565b505060a082018061229b826121cf565b90506107d681600385016121e5565b61078f82826121fe565b60258152602081017f496e73756666696369656e742066756e647320746f207075626c697368206d6581527f737361676500000000000000000000000000000000000000000000000000000060208201529050611c85565b60208082528101610691816122b4565b60248152602081017f4661696c656420746f2073656e64206665657320746f206665657320636f6e7481527f726163740000000000000000000000000000000000000000000000000000000060208201529050611c85565b602080825281016106918161231c565b60c08101612392828a6117aa565b61239f60208301896118fb565b6123ac6040830188611aef565b6123b96060830187611aef565b81810360808301526123cc818587611b53565b90506123db60a0830184611b82565b98975050505050505050565b602a8152602081017f526f6f74206973206e6f74207075626c6973686564206f6e2074686973206d6581527f7373616765206275732e0000000000000000000000000000000000000000000060208201529050611c85565b60208082528101610691816123e7565b60218152602081017f526f6f74206973206e6f7420636f6e736964657265642066696e616c207965748152601760f91b60208201529050611c85565b602080825281016106918161244f565b505f61069160208301836116ed565b6124b48180611aa7565b6124be83826117aa565b506124cc6020820182611aa7565b6124d960208401826117aa565b506124e7604082018261249b565b6124f4604084018261162c565b506125026060820182611ad1565b61087860608401826118fb565b6080810161069182846124aa565b60018152602081017f760000000000000000000000000000000000000000000000000000000000000081529050611616565b6040808252810161255f8161251d565b9050610691602083018461162c565b8061162e565b61257e818361256e565b602001919050565b60338152602081017f496e76616c696420696e636c7573696f6e2070726f6f6620666f722076616c7581527f65207472616e73666572206d6573736167652e0000000000000000000000000060208201529050611c85565b6020808252810161069181612586565b60258152602081017f526f6f7420616c726561647920616464656420746f20746865206d657373616781527f652062757300000000000000000000000000000000000000000000000000000060208201529050611c85565b60208082528101610691816125ee565b5f60208284031215612669576126695f5ffd5b6106ed8383611ac6565b5f60208284031215612686576126865f5ffd5b6106ed8383611878565b60018152602081017f6d0000000000000000000000000000000000000000000000000000000000000081529050611616565b6040808252810161255f81612690565b60308152602081017f496e76616c696420696e636c7573696f6e2070726f6f6620666f722063726f7381527f7320636861696e206d6573736167652e0000000000000000000000000000000060208201529050611c85565b60208082528101610691816126d2565b67ffffffffffffffff91821691908116908282019081111561069157610691611db8565b6040810161276c82856117aa565b6106ed602083018461162c565b634e487b7160e01b5f52603260045260245ffdfea2646970667358221220ca6579f3e33c0410155fde17bb5a723a8d4cc483e1ac5ba32ddfcf6ce200b7ed64736f6c634300081c0033a26469706673582212207008b25f7dba739e92ae6cd259221b6bb023adb23e58e863ea331a829832f92764736f6c634300081c0033",
}

// CrossChainABI is the input ABI used to generate the binding from.
// Deprecated: Use CrossChainMetaData.ABI instead.
var CrossChainABI = CrossChainMetaData.ABI

// CrossChainBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use CrossChainMetaData.Bin instead.
var CrossChainBin = CrossChainMetaData.Bin

// DeployCrossChain deploys a new Ethereum contract, binding an instance of CrossChain to it.
func DeployCrossChain(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *CrossChain, error) {
	parsed, err := CrossChainMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(CrossChainBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &CrossChain{CrossChainCaller: CrossChainCaller{contract: contract}, CrossChainTransactor: CrossChainTransactor{contract: contract}, CrossChainFilterer: CrossChainFilterer{contract: contract}}, nil
}

// CrossChain is an auto generated Go binding around an Ethereum contract.
type CrossChain struct {
	CrossChainCaller     // Read-only binding to the contract
	CrossChainTransactor // Write-only binding to the contract
	CrossChainFilterer   // Log filterer for contract events
}

// CrossChainCaller is an auto generated read-only Go binding around an Ethereum contract.
type CrossChainCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// CrossChainTransactor is an auto generated write-only Go binding around an Ethereum contract.
type CrossChainTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// CrossChainFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type CrossChainFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// CrossChainSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type CrossChainSession struct {
	Contract     *CrossChain       // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// CrossChainCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type CrossChainCallerSession struct {
	Contract *CrossChainCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts     // Call options to use throughout this session
}

// CrossChainTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type CrossChainTransactorSession struct {
	Contract     *CrossChainTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts     // Transaction auth options to use throughout this session
}

// CrossChainRaw is an auto generated low-level Go binding around an Ethereum contract.
type CrossChainRaw struct {
	Contract *CrossChain // Generic contract binding to access the raw methods on
}

// CrossChainCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type CrossChainCallerRaw struct {
	Contract *CrossChainCaller // Generic read-only contract binding to access the raw methods on
}

// CrossChainTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type CrossChainTransactorRaw struct {
	Contract *CrossChainTransactor // Generic write-only contract binding to access the raw methods on
}

// NewCrossChain creates a new instance of CrossChain, bound to a specific deployed contract.
func NewCrossChain(address common.Address, backend bind.ContractBackend) (*CrossChain, error) {
	contract, err := bindCrossChain(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &CrossChain{CrossChainCaller: CrossChainCaller{contract: contract}, CrossChainTransactor: CrossChainTransactor{contract: contract}, CrossChainFilterer: CrossChainFilterer{contract: contract}}, nil
}

// NewCrossChainCaller creates a new read-only instance of CrossChain, bound to a specific deployed contract.
func NewCrossChainCaller(address common.Address, caller bind.ContractCaller) (*CrossChainCaller, error) {
	contract, err := bindCrossChain(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &CrossChainCaller{contract: contract}, nil
}

// NewCrossChainTransactor creates a new write-only instance of CrossChain, bound to a specific deployed contract.
func NewCrossChainTransactor(address common.Address, transactor bind.ContractTransactor) (*CrossChainTransactor, error) {
	contract, err := bindCrossChain(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &CrossChainTransactor{contract: contract}, nil
}

// NewCrossChainFilterer creates a new log filterer instance of CrossChain, bound to a specific deployed contract.
func NewCrossChainFilterer(address common.Address, filterer bind.ContractFilterer) (*CrossChainFilterer, error) {
	contract, err := bindCrossChain(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &CrossChainFilterer{contract: contract}, nil
}

// bindCrossChain binds a generic wrapper to an already deployed contract.
func bindCrossChain(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := CrossChainMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_CrossChain *CrossChainRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _CrossChain.Contract.CrossChainCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_CrossChain *CrossChainRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _CrossChain.Contract.CrossChainTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_CrossChain *CrossChainRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _CrossChain.Contract.CrossChainTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_CrossChain *CrossChainCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _CrossChain.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_CrossChain *CrossChainTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _CrossChain.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_CrossChain *CrossChainTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _CrossChain.Contract.contract.Transact(opts, method, params...)
}

// IsBundleAvailable is a free data retrieval call binding the contract method 0xa4ab2faa.
//
// Solidity: function isBundleAvailable(bytes[] crossChainHashes) view returns(bool)
func (_CrossChain *CrossChainCaller) IsBundleAvailable(opts *bind.CallOpts, crossChainHashes [][]byte) (bool, error) {
	var out []interface{}
	err := _CrossChain.contract.Call(opts, &out, "isBundleAvailable", crossChainHashes)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsBundleAvailable is a free data retrieval call binding the contract method 0xa4ab2faa.
//
// Solidity: function isBundleAvailable(bytes[] crossChainHashes) view returns(bool)
func (_CrossChain *CrossChainSession) IsBundleAvailable(crossChainHashes [][]byte) (bool, error) {
	return _CrossChain.Contract.IsBundleAvailable(&_CrossChain.CallOpts, crossChainHashes)
}

// IsBundleAvailable is a free data retrieval call binding the contract method 0xa4ab2faa.
//
// Solidity: function isBundleAvailable(bytes[] crossChainHashes) view returns(bool)
func (_CrossChain *CrossChainCallerSession) IsBundleAvailable(crossChainHashes [][]byte) (bool, error) {
	return _CrossChain.Contract.IsBundleAvailable(&_CrossChain.CallOpts, crossChainHashes)
}

// IsBundleSaved is a free data retrieval call binding the contract method 0x84154826.
//
// Solidity: function isBundleSaved(bytes32 bundleHash) view returns(bool isBundleSaved)
func (_CrossChain *CrossChainCaller) IsBundleSaved(opts *bind.CallOpts, bundleHash [32]byte) (bool, error) {
	var out []interface{}
	err := _CrossChain.contract.Call(opts, &out, "isBundleSaved", bundleHash)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsBundleSaved is a free data retrieval call binding the contract method 0x84154826.
//
// Solidity: function isBundleSaved(bytes32 bundleHash) view returns(bool isBundleSaved)
func (_CrossChain *CrossChainSession) IsBundleSaved(bundleHash [32]byte) (bool, error) {
	return _CrossChain.Contract.IsBundleSaved(&_CrossChain.CallOpts, bundleHash)
}

// IsBundleSaved is a free data retrieval call binding the contract method 0x84154826.
//
// Solidity: function isBundleSaved(bytes32 bundleHash) view returns(bool isBundleSaved)
func (_CrossChain *CrossChainCallerSession) IsBundleSaved(bundleHash [32]byte) (bool, error) {
	return _CrossChain.Contract.IsBundleSaved(&_CrossChain.CallOpts, bundleHash)
}

// IsWithdrawalSpent is a free data retrieval call binding the contract method 0x2f0cb9e3.
//
// Solidity: function isWithdrawalSpent(bytes32 withdrawalHash) view returns(bool isWithdrawalSpent)
func (_CrossChain *CrossChainCaller) IsWithdrawalSpent(opts *bind.CallOpts, withdrawalHash [32]byte) (bool, error) {
	var out []interface{}
	err := _CrossChain.contract.Call(opts, &out, "isWithdrawalSpent", withdrawalHash)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsWithdrawalSpent is a free data retrieval call binding the contract method 0x2f0cb9e3.
//
// Solidity: function isWithdrawalSpent(bytes32 withdrawalHash) view returns(bool isWithdrawalSpent)
func (_CrossChain *CrossChainSession) IsWithdrawalSpent(withdrawalHash [32]byte) (bool, error) {
	return _CrossChain.Contract.IsWithdrawalSpent(&_CrossChain.CallOpts, withdrawalHash)
}

// IsWithdrawalSpent is a free data retrieval call binding the contract method 0x2f0cb9e3.
//
// Solidity: function isWithdrawalSpent(bytes32 withdrawalHash) view returns(bool isWithdrawalSpent)
func (_CrossChain *CrossChainCallerSession) IsWithdrawalSpent(withdrawalHash [32]byte) (bool, error) {
	return _CrossChain.Contract.IsWithdrawalSpent(&_CrossChain.CallOpts, withdrawalHash)
}

// MerkleMessageBus is a free data retrieval call binding the contract method 0xe874eb20.
//
// Solidity: function merkleMessageBus() view returns(address)
func (_CrossChain *CrossChainCaller) MerkleMessageBus(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _CrossChain.contract.Call(opts, &out, "merkleMessageBus")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// MerkleMessageBus is a free data retrieval call binding the contract method 0xe874eb20.
//
// Solidity: function merkleMessageBus() view returns(address)
func (_CrossChain *CrossChainSession) MerkleMessageBus() (common.Address, error) {
	return _CrossChain.Contract.MerkleMessageBus(&_CrossChain.CallOpts)
}

// MerkleMessageBus is a free data retrieval call binding the contract method 0xe874eb20.
//
// Solidity: function merkleMessageBus() view returns(address)
func (_CrossChain *CrossChainCallerSession) MerkleMessageBus() (common.Address, error) {
	return _CrossChain.Contract.MerkleMessageBus(&_CrossChain.CallOpts)
}

// MessageBus is a free data retrieval call binding the contract method 0xa1a227fa.
//
// Solidity: function messageBus() view returns(address)
func (_CrossChain *CrossChainCaller) MessageBus(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _CrossChain.contract.Call(opts, &out, "messageBus")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// MessageBus is a free data retrieval call binding the contract method 0xa1a227fa.
//
// Solidity: function messageBus() view returns(address)
func (_CrossChain *CrossChainSession) MessageBus() (common.Address, error) {
	return _CrossChain.Contract.MessageBus(&_CrossChain.CallOpts)
}

// MessageBus is a free data retrieval call binding the contract method 0xa1a227fa.
//
// Solidity: function messageBus() view returns(address)
func (_CrossChain *CrossChainCallerSession) MessageBus() (common.Address, error) {
	return _CrossChain.Contract.MessageBus(&_CrossChain.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_CrossChain *CrossChainCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _CrossChain.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_CrossChain *CrossChainSession) Owner() (common.Address, error) {
	return _CrossChain.Contract.Owner(&_CrossChain.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_CrossChain *CrossChainCallerSession) Owner() (common.Address, error) {
	return _CrossChain.Contract.Owner(&_CrossChain.CallOpts)
}

// PendingOwner is a free data retrieval call binding the contract method 0xe30c3978.
//
// Solidity: function pendingOwner() view returns(address)
func (_CrossChain *CrossChainCaller) PendingOwner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _CrossChain.contract.Call(opts, &out, "pendingOwner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// PendingOwner is a free data retrieval call binding the contract method 0xe30c3978.
//
// Solidity: function pendingOwner() view returns(address)
func (_CrossChain *CrossChainSession) PendingOwner() (common.Address, error) {
	return _CrossChain.Contract.PendingOwner(&_CrossChain.CallOpts)
}

// PendingOwner is a free data retrieval call binding the contract method 0xe30c3978.
//
// Solidity: function pendingOwner() view returns(address)
func (_CrossChain *CrossChainCallerSession) PendingOwner() (common.Address, error) {
	return _CrossChain.Contract.PendingOwner(&_CrossChain.CallOpts)
}

// RenounceOwnership is a free data retrieval call binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() view returns()
func (_CrossChain *CrossChainCaller) RenounceOwnership(opts *bind.CallOpts) error {
	var out []interface{}
	err := _CrossChain.contract.Call(opts, &out, "renounceOwnership")

	if err != nil {
		return err
	}

	return err

}

// RenounceOwnership is a free data retrieval call binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() view returns()
func (_CrossChain *CrossChainSession) RenounceOwnership() error {
	return _CrossChain.Contract.RenounceOwnership(&_CrossChain.CallOpts)
}

// RenounceOwnership is a free data retrieval call binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() view returns()
func (_CrossChain *CrossChainCallerSession) RenounceOwnership() error {
	return _CrossChain.Contract.RenounceOwnership(&_CrossChain.CallOpts)
}

// AcceptOwnership is a paid mutator transaction binding the contract method 0x79ba5097.
//
// Solidity: function acceptOwnership() returns()
func (_CrossChain *CrossChainTransactor) AcceptOwnership(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _CrossChain.contract.Transact(opts, "acceptOwnership")
}

// AcceptOwnership is a paid mutator transaction binding the contract method 0x79ba5097.
//
// Solidity: function acceptOwnership() returns()
func (_CrossChain *CrossChainSession) AcceptOwnership() (*types.Transaction, error) {
	return _CrossChain.Contract.AcceptOwnership(&_CrossChain.TransactOpts)
}

// AcceptOwnership is a paid mutator transaction binding the contract method 0x79ba5097.
//
// Solidity: function acceptOwnership() returns()
func (_CrossChain *CrossChainTransactorSession) AcceptOwnership() (*types.Transaction, error) {
	return _CrossChain.Contract.AcceptOwnership(&_CrossChain.TransactOpts)
}

// Initialize is a paid mutator transaction binding the contract method 0xc4d66de8.
//
// Solidity: function initialize(address owner) returns()
func (_CrossChain *CrossChainTransactor) Initialize(opts *bind.TransactOpts, owner common.Address) (*types.Transaction, error) {
	return _CrossChain.contract.Transact(opts, "initialize", owner)
}

// Initialize is a paid mutator transaction binding the contract method 0xc4d66de8.
//
// Solidity: function initialize(address owner) returns()
func (_CrossChain *CrossChainSession) Initialize(owner common.Address) (*types.Transaction, error) {
	return _CrossChain.Contract.Initialize(&_CrossChain.TransactOpts, owner)
}

// Initialize is a paid mutator transaction binding the contract method 0xc4d66de8.
//
// Solidity: function initialize(address owner) returns()
func (_CrossChain *CrossChainTransactorSession) Initialize(owner common.Address) (*types.Transaction, error) {
	return _CrossChain.Contract.Initialize(&_CrossChain.TransactOpts, owner)
}

// PauseWithdrawals is a paid mutator transaction binding the contract method 0xf4cc87ba.
//
// Solidity: function pauseWithdrawals(bool _pause) returns()
func (_CrossChain *CrossChainTransactor) PauseWithdrawals(opts *bind.TransactOpts, _pause bool) (*types.Transaction, error) {
	return _CrossChain.contract.Transact(opts, "pauseWithdrawals", _pause)
}

// PauseWithdrawals is a paid mutator transaction binding the contract method 0xf4cc87ba.
//
// Solidity: function pauseWithdrawals(bool _pause) returns()
func (_CrossChain *CrossChainSession) PauseWithdrawals(_pause bool) (*types.Transaction, error) {
	return _CrossChain.Contract.PauseWithdrawals(&_CrossChain.TransactOpts, _pause)
}

// PauseWithdrawals is a paid mutator transaction binding the contract method 0xf4cc87ba.
//
// Solidity: function pauseWithdrawals(bool _pause) returns()
func (_CrossChain *CrossChainTransactorSession) PauseWithdrawals(_pause bool) (*types.Transaction, error) {
	return _CrossChain.Contract.PauseWithdrawals(&_CrossChain.TransactOpts, _pause)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_CrossChain *CrossChainTransactor) TransferOwnership(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _CrossChain.contract.Transact(opts, "transferOwnership", newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_CrossChain *CrossChainSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _CrossChain.Contract.TransferOwnership(&_CrossChain.TransactOpts, newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_CrossChain *CrossChainTransactorSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _CrossChain.Contract.TransferOwnership(&_CrossChain.TransactOpts, newOwner)
}

// CrossChainInitializedIterator is returned from FilterInitialized and is used to iterate over the raw logs and unpacked data for Initialized events raised by the CrossChain contract.
type CrossChainInitializedIterator struct {
	Event *CrossChainInitialized // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *CrossChainInitializedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(CrossChainInitialized)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(CrossChainInitialized)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *CrossChainInitializedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *CrossChainInitializedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// CrossChainInitialized represents a Initialized event raised by the CrossChain contract.
type CrossChainInitialized struct {
	Version uint64
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterInitialized is a free log retrieval operation binding the contract event 0xc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d2.
//
// Solidity: event Initialized(uint64 version)
func (_CrossChain *CrossChainFilterer) FilterInitialized(opts *bind.FilterOpts) (*CrossChainInitializedIterator, error) {

	logs, sub, err := _CrossChain.contract.FilterLogs(opts, "Initialized")
	if err != nil {
		return nil, err
	}
	return &CrossChainInitializedIterator{contract: _CrossChain.contract, event: "Initialized", logs: logs, sub: sub}, nil
}

// WatchInitialized is a free log subscription operation binding the contract event 0xc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d2.
//
// Solidity: event Initialized(uint64 version)
func (_CrossChain *CrossChainFilterer) WatchInitialized(opts *bind.WatchOpts, sink chan<- *CrossChainInitialized) (event.Subscription, error) {

	logs, sub, err := _CrossChain.contract.WatchLogs(opts, "Initialized")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(CrossChainInitialized)
				if err := _CrossChain.contract.UnpackLog(event, "Initialized", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseInitialized is a log parse operation binding the contract event 0xc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d2.
//
// Solidity: event Initialized(uint64 version)
func (_CrossChain *CrossChainFilterer) ParseInitialized(log types.Log) (*CrossChainInitialized, error) {
	event := new(CrossChainInitialized)
	if err := _CrossChain.contract.UnpackLog(event, "Initialized", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// CrossChainOwnershipTransferStartedIterator is returned from FilterOwnershipTransferStarted and is used to iterate over the raw logs and unpacked data for OwnershipTransferStarted events raised by the CrossChain contract.
type CrossChainOwnershipTransferStartedIterator struct {
	Event *CrossChainOwnershipTransferStarted // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *CrossChainOwnershipTransferStartedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(CrossChainOwnershipTransferStarted)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(CrossChainOwnershipTransferStarted)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *CrossChainOwnershipTransferStartedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *CrossChainOwnershipTransferStartedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// CrossChainOwnershipTransferStarted represents a OwnershipTransferStarted event raised by the CrossChain contract.
type CrossChainOwnershipTransferStarted struct {
	PreviousOwner common.Address
	NewOwner      common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterOwnershipTransferStarted is a free log retrieval operation binding the contract event 0x38d16b8cac22d99fc7c124b9cd0de2d3fa1faef420bfe791d8c362d765e22700.
//
// Solidity: event OwnershipTransferStarted(address indexed previousOwner, address indexed newOwner)
func (_CrossChain *CrossChainFilterer) FilterOwnershipTransferStarted(opts *bind.FilterOpts, previousOwner []common.Address, newOwner []common.Address) (*CrossChainOwnershipTransferStartedIterator, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _CrossChain.contract.FilterLogs(opts, "OwnershipTransferStarted", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return &CrossChainOwnershipTransferStartedIterator{contract: _CrossChain.contract, event: "OwnershipTransferStarted", logs: logs, sub: sub}, nil
}

// WatchOwnershipTransferStarted is a free log subscription operation binding the contract event 0x38d16b8cac22d99fc7c124b9cd0de2d3fa1faef420bfe791d8c362d765e22700.
//
// Solidity: event OwnershipTransferStarted(address indexed previousOwner, address indexed newOwner)
func (_CrossChain *CrossChainFilterer) WatchOwnershipTransferStarted(opts *bind.WatchOpts, sink chan<- *CrossChainOwnershipTransferStarted, previousOwner []common.Address, newOwner []common.Address) (event.Subscription, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _CrossChain.contract.WatchLogs(opts, "OwnershipTransferStarted", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(CrossChainOwnershipTransferStarted)
				if err := _CrossChain.contract.UnpackLog(event, "OwnershipTransferStarted", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOwnershipTransferStarted is a log parse operation binding the contract event 0x38d16b8cac22d99fc7c124b9cd0de2d3fa1faef420bfe791d8c362d765e22700.
//
// Solidity: event OwnershipTransferStarted(address indexed previousOwner, address indexed newOwner)
func (_CrossChain *CrossChainFilterer) ParseOwnershipTransferStarted(log types.Log) (*CrossChainOwnershipTransferStarted, error) {
	event := new(CrossChainOwnershipTransferStarted)
	if err := _CrossChain.contract.UnpackLog(event, "OwnershipTransferStarted", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// CrossChainOwnershipTransferredIterator is returned from FilterOwnershipTransferred and is used to iterate over the raw logs and unpacked data for OwnershipTransferred events raised by the CrossChain contract.
type CrossChainOwnershipTransferredIterator struct {
	Event *CrossChainOwnershipTransferred // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *CrossChainOwnershipTransferredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(CrossChainOwnershipTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(CrossChainOwnershipTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *CrossChainOwnershipTransferredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *CrossChainOwnershipTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// CrossChainOwnershipTransferred represents a OwnershipTransferred event raised by the CrossChain contract.
type CrossChainOwnershipTransferred struct {
	PreviousOwner common.Address
	NewOwner      common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterOwnershipTransferred is a free log retrieval operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_CrossChain *CrossChainFilterer) FilterOwnershipTransferred(opts *bind.FilterOpts, previousOwner []common.Address, newOwner []common.Address) (*CrossChainOwnershipTransferredIterator, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _CrossChain.contract.FilterLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return &CrossChainOwnershipTransferredIterator{contract: _CrossChain.contract, event: "OwnershipTransferred", logs: logs, sub: sub}, nil
}

// WatchOwnershipTransferred is a free log subscription operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_CrossChain *CrossChainFilterer) WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *CrossChainOwnershipTransferred, previousOwner []common.Address, newOwner []common.Address) (event.Subscription, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _CrossChain.contract.WatchLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(CrossChainOwnershipTransferred)
				if err := _CrossChain.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOwnershipTransferred is a log parse operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_CrossChain *CrossChainFilterer) ParseOwnershipTransferred(log types.Log) (*CrossChainOwnershipTransferred, error) {
	event := new(CrossChainOwnershipTransferred)
	if err := _CrossChain.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// CrossChainWithdrawalsPausedIterator is returned from FilterWithdrawalsPaused and is used to iterate over the raw logs and unpacked data for WithdrawalsPaused events raised by the CrossChain contract.
type CrossChainWithdrawalsPausedIterator struct {
	Event *CrossChainWithdrawalsPaused // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *CrossChainWithdrawalsPausedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(CrossChainWithdrawalsPaused)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(CrossChainWithdrawalsPaused)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *CrossChainWithdrawalsPausedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *CrossChainWithdrawalsPausedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// CrossChainWithdrawalsPaused represents a WithdrawalsPaused event raised by the CrossChain contract.
type CrossChainWithdrawalsPaused struct {
	Paused bool
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterWithdrawalsPaused is a free log retrieval operation binding the contract event 0x129d33f7856617012aed60524381cfff7233cfc57df58d9f6613a5593d3dc218.
//
// Solidity: event WithdrawalsPaused(bool paused)
func (_CrossChain *CrossChainFilterer) FilterWithdrawalsPaused(opts *bind.FilterOpts) (*CrossChainWithdrawalsPausedIterator, error) {

	logs, sub, err := _CrossChain.contract.FilterLogs(opts, "WithdrawalsPaused")
	if err != nil {
		return nil, err
	}
	return &CrossChainWithdrawalsPausedIterator{contract: _CrossChain.contract, event: "WithdrawalsPaused", logs: logs, sub: sub}, nil
}

// WatchWithdrawalsPaused is a free log subscription operation binding the contract event 0x129d33f7856617012aed60524381cfff7233cfc57df58d9f6613a5593d3dc218.
//
// Solidity: event WithdrawalsPaused(bool paused)
func (_CrossChain *CrossChainFilterer) WatchWithdrawalsPaused(opts *bind.WatchOpts, sink chan<- *CrossChainWithdrawalsPaused) (event.Subscription, error) {

	logs, sub, err := _CrossChain.contract.WatchLogs(opts, "WithdrawalsPaused")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(CrossChainWithdrawalsPaused)
				if err := _CrossChain.contract.UnpackLog(event, "WithdrawalsPaused", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseWithdrawalsPaused is a log parse operation binding the contract event 0x129d33f7856617012aed60524381cfff7233cfc57df58d9f6613a5593d3dc218.
//
// Solidity: event WithdrawalsPaused(bool paused)
func (_CrossChain *CrossChainFilterer) ParseWithdrawalsPaused(log types.Log) (*CrossChainWithdrawalsPaused, error) {
	event := new(CrossChainWithdrawalsPaused)
	if err := _CrossChain.contract.UnpackLog(event, "WithdrawalsPaused", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
