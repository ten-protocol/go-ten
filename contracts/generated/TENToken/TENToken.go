// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package TENToken

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
	_ = abi.ConvertType
)

// CheckpointsCheckpoint208 is an auto generated low-level Go binding around an user-defined struct.
type CheckpointsCheckpoint208 struct {
	Key   *big.Int
	Value *big.Int
}

// TENTokenMetaData contains all meta data concerning the TENToken contract.
var TENTokenMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"CheckpointUnorderedInsertion\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ECDSAInvalidSignature\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"length\",\"type\":\"uint256\"}],\"name\":\"ECDSAInvalidSignatureLength\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"ECDSAInvalidSignatureS\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"increasedSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cap\",\"type\":\"uint256\"}],\"name\":\"ERC20ExceededSafeSupply\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"allowance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"}],\"name\":\"ERC20InsufficientAllowance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"}],\"name\":\"ERC20InsufficientBalance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"approver\",\"type\":\"address\"}],\"name\":\"ERC20InvalidApprover\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"ERC20InvalidReceiver\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"ERC20InvalidSender\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"ERC20InvalidSpender\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"ERC2612ExpiredSignature\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"ERC2612InvalidSigner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"timepoint\",\"type\":\"uint256\"},{\"internalType\":\"uint48\",\"name\":\"clock\",\"type\":\"uint48\"}],\"name\":\"ERC5805FutureLookup\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ERC6372InconsistentClock\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"EnforcedPause\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ExpectedPause\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"currentNonce\",\"type\":\"uint256\"}],\"name\":\"InvalidAccountNonce\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidInitialization\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotInitializing\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"bits\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"SafeCastOverflowedUintDowncast\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"}],\"name\":\"VotesExpiredSignature\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"delegator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fromDelegate\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"toDelegate\",\"type\":\"address\"}],\"name\":\"DelegateChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"delegate\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"previousVotes\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newVotes\",\"type\":\"uint256\"}],\"name\":\"DelegateVotesChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"EIP712DomainChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"version\",\"type\":\"uint64\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"CLOCK_MODE\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DOMAIN_SEPARATOR\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"pos\",\"type\":\"uint32\"}],\"name\":\"checkpoints\",\"outputs\":[{\"components\":[{\"internalType\":\"uint48\",\"name\":\"_key\",\"type\":\"uint48\"},{\"internalType\":\"uint208\",\"name\":\"_value\",\"type\":\"uint208\"}],\"internalType\":\"structCheckpoints.Checkpoint208\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"clock\",\"outputs\":[{\"internalType\":\"uint48\",\"name\":\"\",\"type\":\"uint48\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"delegatee\",\"type\":\"address\"}],\"name\":\"delegate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"delegatee\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"delegateBySig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"delegates\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"eip712Domain\",\"outputs\":[{\"internalType\":\"bytes1\",\"name\":\"fields\",\"type\":\"bytes1\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"version\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"verifyingContract\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"salt\",\"type\":\"bytes32\"},{\"internalType\":\"uint256[]\",\"name\":\"extensions\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"timepoint\",\"type\":\"uint256\"}],\"name\":\"getPastTotalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"timepoint\",\"type\":\"uint256\"}],\"name\":\"getPastVotes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getVotes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"initialOwner\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"nonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"numCheckpoints\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"permit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
	Bin: "0x60806040523461002257610011610026565b60405161345a610186823961345a90f35b5f80fd5b61002e6100a9565b565b61003d9060401c60ff1690565b90565b61003d9054610030565b61003d905b6001600160401b031690565b61003d905461004a565b61003d9061004f906001600160401b031682565b9061008961003d6100a592610065565b82546001600160401b0319166001600160401b03919091161790565b9055565b5f6100b261013f565b016100bc81610040565b61012e576100c98161005b565b6001600160401b03919082908116036100e0575050565b8161010f7fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d29361012993610079565b604051918291826001600160401b03909116815260200190565b0390a1565b63f92ee8a960e01b5f908152600490fd5b61003d61017d565b61003d61003d61003d9290565b61003d7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00610147565b61003d61015456fe60806040526004361015610011575f80fd5b5f3560e01c806306fdde03146101f0578063095ea7b3146101eb57806318160ddd146101e657806323b872dd146101e1578063313ce567146101dc5780633644e515146101d75780633a46b1a8146101d25780633f4ba83a146101cd578063485cc955146101c85780634bf5d7e9146101c3578063587cde1e146101be5780635c19a95c146101b95780635c975abb146101b45780636fcfff45146101af57806370a08231146101aa578063715018a6146101a55780637ecebe00146101a05780638456cb591461019b57806384b0196e146101965780638da5cb5b146101915780638e539e8c1461018c57806391ddadf41461018757806395d89b41146101825780639ab24eb01461017d578063a9059cbb14610178578063c3cda52014610173578063d505accf1461016e578063dd62ed3e14610169578063f1127ed8146101645763f2fde38b036101ff57610916565b6108ee565b61086b565b61084c565b6107ce565b610749565b61072e565b610713565b6106df565b6106c4565b610695565b610661565b610561565b610546565b61052e565b610513565b6104e1565b6104c6565b6104ae565b610479565b61044a565b610431565b6103f1565b6103d5565b6103ba565b61038b565b61036f565b61031a565b6102ec565b61025a565b5f9103126101ff57565b5f80fd5b90825f9392825e0152565b61022f61023860209361024293610223815190565b80835293849260200190565b95869101610203565b601f01601f191690565b0190565b60208082526102579291019061020e565b90565b346101ff5761026a3660046101f5565b610281610275610a5b565b60405191829182610246565b0390f35b6001600160a01b031690565b6001600160a01b0381165b036101ff57565b905035906102b082610291565b565b8061029c565b905035906102b0826102b2565b91906040838203126101ff576102579060206102e182866102a3565b94016102b8565b9052565b346101ff576102816103086103023660046102c5565b90610a88565b60405191829182901515815260200190565b346101ff5761032a3660046101f5565b610281610335610aa9565b6040515b9182918290815260200190565b90916060828403126101ff5761025761035f84846102a3565b9360406102e182602087016102a3565b346101ff57610281610308610385366004610346565b91610ad2565b346101ff5761039b3660046101f5565b6102816103a6610afb565b6040519182918260ff909116815260200190565b346101ff576103ca3660046101f5565b610281610335610b05565b346101ff576102816103356103eb3660046102c5565b90610b61565b346101ff576104013660046101f5565b610409610bc8565b604051005b91906040838203126101ff5761025790602061042a82866102a3565b94016102a3565b346101ff5761040961044436600461040e565b90610f65565b346101ff5761045a3660046101f5565b610281610275610faa565b906020828203126101ff57610257916102a3565b346101ff5761028161049461048f366004610465565b611021565b604051918291826001600160a01b03909116815260200190565b346101ff576104096104c1366004610465565b61105c565b346101ff576104d63660046101f5565b61028161030861107e565b346101ff576102816104fc6104f7366004610465565b6110a7565b6040519182918263ffffffff909116815260200190565b346101ff57610281610335610529366004610465565b6110b0565b346101ff5761053e3660046101f5565b610409611122565b346101ff5761028161033561055c366004610465565b61112a565b346101ff576105713660046101f5565b610409611146565b90610599610592610588845190565b8084529260200190565b9260200190565b905f5b8181106105a95750505090565b9091926105c66105bf6001928651815260200190565b9460200190565b92910161059c565b9395919461063d6106356106549561062761064d956102579c9a61061a60e08c01925f8d01907fff00000000000000000000000000000000000000000000000000000000000000169052565b8a820360208c015261020e565b9088820360408a015261020e565b976060870152565b6001600160a01b03166080850152565b60a0830152565b60c0818403910152610579565b346101ff576106713660046101f5565b61028161067c611201565b9361068c97959793919360405190565b978897886105ce565b346101ff576106a53660046101f5565b6102816104946112c8565b906020828203126101ff57610257916102b8565b346101ff576102816103356106da3660046106b0565b6112f1565b346101ff576106ef3660046101f5565b6102816106fa611329565b6040519182918265ffffffffffff909116815260200190565b346101ff576107233660046101f5565b610281610275611331565b346101ff57610281610335610744366004610465565b61135c565b346101ff5761028161030861075f3660046102c5565b90611375565b60ff811661029c565b905035906102b082610765565b909160c0828403126101ff5761079183836102a3565b9261079f81602085016102b8565b926107ad82604083016102b8565b926102576107be846060850161076e565b9360a06102e182608087016102b8565b346101ff576104096107e136600461077b565b949390939291926113b9565b60e0818303126101ff5761080182826102a3565b9261080f83602084016102a3565b9261081d81604085016102b8565b9261082b82606083016102b8565b9261025761083c846080850161076e565b9360c06102e18260a087016102b8565b346101ff5761040961085f3660046107ed565b959490949391936114fd565b346101ff5761028161033561088136600461040e565b906115f4565b63ffffffff811661029c565b905035906102b082610887565b91906040838203126101ff576102579060206108bc82866102a3565b9401610893565b6040810192916102b09190805165ffffffffffff1682526020908101516001600160d01b0316910152565b346101ff5761028161090a6109043660046108a0565b9061165a565b604051918291826108c3565b346101ff57610409610929366004610465565b6116de565b634e487b7160e01b5f52602260045260245ffd5b9060016002830492168015610962575b602083101461095d57565b61092e565b91607f1691610952565b80545f93929161098861097e83610942565b8085529360200190565b91600181169081156109d757506001146109a157505050565b6109b291929394505f5260205f2090565b915f925b8184106109c35750500190565b8054848401526020909301926001016109b6565b92949550505060ff1916825215156020020190565b906102579161096c565b634e487b7160e01b5f52604160045260245ffd5b90601f01601f1916810190811067ffffffffffffffff821117610a2c57604052565b6109f6565b906102b0610a4b92610a4260405190565b938480926109ec565b0383610a0a565b61025790610a31565b61025760037f52c63247e1f47db19d5ce0460030c497f067ca4cebf71ba98eeadabe20bace005b01610a52565b610a939190336116e7565b600190565b6102579081565b6102579054610a98565b6102577f52c63247e1f47db19d5ce0460030c497f067ca4cebf71ba98eeadabe20bace02610a9f565b610a93929190610ae383338361171b565b61178c565b610af56102576102579290565b60ff1690565b6102576012610ae8565b61025761182b565b610285610257610257926001600160a01b031690565b61025790610b0d565b61025790610b23565b90610b3f90610b2c565b5f5260205260405f2090565b610257610257610257926001600160d01b031690565b61025791610baa610ba4610257610bb094610b795f90565b5060017fe8b26c30fad74198956032a3533d903385d56dd795af560196f9c78d4af40d005b01610b35565b91611848565b906118fd565b610b4b565b610bbd6119d1565b6102b06102b0611aae565b6102b0610bb5565b6102579060401c610af5565b6102579054610bd0565b610257905b67ffffffffffffffff1690565b6102579054610be6565b610beb6102576102579290565b6102576102576102579290565b9067ffffffffffffffff905b9181191691161790565b610beb6102576102579267ffffffffffffffff1690565b90610c59610257610c6092610c32565b8254610c1c565b9055565b9068ff00000000000000009060401b610c28565b90610c88610257610c6092151590565b8254610c64565b6102e890610c02565b6020810192916102b09190610c8f565b610cb0611ab6565b908190610ccc610cc6610cc284610bdc565b1590565b92610bf8565b93610cd65f610c02565b67ffffffffffffffff86161480610df3575b600195610d05610cf788610c02565b9167ffffffffffffffff1690565b149081610dcb575b155b9081610dc2575b50610d9657610d3f9183610d365f610d2d89610c02565b97019687610c49565b610d8757610ef5565b610d47575050565b7fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d291610d765f610d8293610c78565b60405191829182610c98565b0390a1565b610d918686610c78565b610ef5565b7ff92ee8a9000000000000000000000000000000000000000000000000000000005f90815260045b035ffd5b1590505f610d16565b9050610d0f610dd930610b2c565b3b610dea610de65f610c0f565b9190565b14919050610d0d565b5082610ce8565b906102b0610e0760405190565b9283610a0a565b67ffffffffffffffff8111610a2c57602090601f01601f19160190565b90610e3d610e3883610e0e565b610dfa565b918252565b610e4c6009610e2b565b7f54454e20546f6b656e0000000000000000000000000000000000000000000000602082015290565b610257610e42565b610e876003610e2b565b7f54454e0000000000000000000000000000000000000000000000000000000000602082015290565b610257610e7d565b634e487b7160e01b5f52601160045260245ffd5b60ff16604d8111610edd57600a0a90565b610eb8565b81810292918115918404141715610edd57565b610f226102b092610f15610f07610e75565b610f0f610eb0565b90611ad5565b610f1d611ae7565b611b04565b610f32610f2d610e75565b611b6b565b610f3a611ae7565b610f5f610f4d610f48610afb565b610ecc565b610f5a633b9aca00610c0f565b610ee2565b90611b74565b906102b091610ca8565b610f79601d610e2b565b7f6d6f64653d626c6f636b6e756d6265722666726f6d3d64656661756c74000000602082015290565b610257610f6f565b610fb2611329565b610fd7610fcb610fc0611bc1565b65ffffffffffff1690565b9165ffffffffffff1690565b03610fe457610257610fa2565b7f6ff07140000000000000000000000000000000000000000000000000000000005f908152600490fd5b61025790610285565b610257905461100e565b6110576102579161102f5f90565b505f7fe8b26c30fad74198956032a3533d903385d56dd795af560196f9c78d4af40d00610b9e565b611017565b6102b09033611bf0565b611bf0565b61025790610af5565b610257905461106b565b6102577fcd5ed15c6e187e77e9aee88184c21f4f2182ab5827cb3b7e07fbedcd63f03300611074565b61025790611c8b565b6110e6610257916110be5f90565b505f7f52c63247e1f47db19d5ce0460030c497f067ca4cebf71ba98eeadabe20bace00610b9e565b610a9f565b6110f36119d1565b6102b0611111565b6102856102576102579290565b610257906110fb565b6102b061111d5f611108565b611ca9565b6102b06110eb565b61025790611d21565b61113b6119d1565b6102b06102b0611d8b565b6102b0611133565b1561115557565b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601560248201527f4549503731323a20556e696e697469616c697a656400000000000000000000006044820152606490fd5b67ffffffffffffffff8111610a2c5760208091020190565b90610e3d610e38836111b4565b369037565b906102b06111f46111ee846111cc565b936111b4565b601f1901602084016111d9565b6112487fa16a46d94261c7517cc8ff89f61c0ce93598e3c849801011dee649a6a557d10061122e81610a9f565b61123a610de65f610c0f565b1490816112a8575b5061114e565b611250611d93565b90611259611dbe565b9061126330610b2c565b61126c5f610c0f565b61127d6112785f610c0f565b6111de565b7f0f000000000000000000000000000000000000000000000000000000000000009594934693929190565b6112b59150600101610a9f565b6112c1610de65f610c0f565b145f611242565b6102577f9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c199300611017565b610bb0610257916112ff5f90565b50610baa7fe8b26c30fad74198956032a3533d903385d56dd795af560196f9c78d4af40d02610ba4565b610257611bc1565b61025760047f52c63247e1f47db19d5ce0460030c497f067ca4cebf71ba98eeadabe20bace00610a82565b610bb061137061025761025793610b795f90565b611de9565b610a9391903361178c565b6113b56102b0946113ae60609498979561139e608086019a5f870152565b6001600160a01b03166020850152565b6040830152565b0152565b9195949193909286421161144f579161144891611066936114438661142b896102b09b9c61141f6114077fe48329057bfd03d55e49b547132e39cffd9c1820ad7b9d4c5307691425d15adf90565b9161141160405190565b958694602086019485611380565b90810382520382610a0a565b61143d611436825190565b9160200190565b20611df0565b611e34565b9182611e71565b7f4683af0e000000000000000000000000000000000000000000000000000000005f9081526004889052602490fd5b91946114cc6113b5929897956114c560a0966114b56102b09a6114a560c08a019e5f8b0152565b6001600160a01b03166020890152565b6001600160a01b03166040870152565b6060850152565b6080830152565b6001600160a01b0390911681526040810192916102b0916020905b01906001600160a01b03169052565b959193969490929661150c8890565b42116115c5576114438461142b8961156e9798999a9b61141f61154c7f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c990565b9161155684611ed7565b8d61156060405190565b97889660208801968761147e565b936001600160a01b0381166001600160a01b03861603611593576102b09394506116e7565b610dbe5f91867f4b800e46000000000000000000000000000000000000000000000000000000008452600484016114d3565b7f62791302000000000000000000000000000000000000000000000000000000005f9081526004899052602490fd5b6102579161162f6110e6926116065f90565b5060017f52c63247e1f47db19d5ce0460030c497f067ca4cebf71ba98eeadabe20bace00610b9e565b610b35565b6102576040610dfa565b611646611634565b905f82525f6020830152565b61025761163e565b9061025791611667611652565b50611f1d565b6102b0906116796119d1565b6116825f611108565b6001600160a01b0381166001600160a01b038316146116a557506102b090611ca9565b7f1e4fbdf7000000000000000000000000000000000000000000000000000000005f9081526001600160a01b039091166004526024035ffd5b6102b09061166d565b916001916102b093611f35565b6001600160a01b0390911681526060810193926102b09290916040916113b5906020830152565b9161172682846115f4565b5f198110611735575b50505050565b81811061175a579161174b61175194925f940390565b91611f35565b5f80808061172f565b7ffb8f41b2000000000000000000000000000000000000000000000000000000005f9081529350610dbe9260046116f4565b9291906117985f611108565b936001600160a01b0385166001600160a01b038216146117f4576001600160a01b0385166001600160a01b038316146117d6576102b0939450612070565b63ec442f0560e01b5f9081526001600160a01b038616600452602490fd5b7f96c6fd1e000000000000000000000000000000000000000000000000000000005f9081526001600160a01b038616600452602490fd5b6102576120b3565b6102576102576102579265ffffffffffff1690565b611850611329565b61185981611833565b82101561186a575061025790612146565b7fecd3f81e000000000000000000000000000000000000000000000000000000005f90815260049290925265ffffffffffff16602452604490fd5b91908203918211610edd57565b61025790610fc0565b61025790546118b2565b91908201809211610edd57565b6102579060301c5b6001600160d01b031690565b61025790546118d2565b6118da6102576102579290565b906119289082549061190e5f610c0f565b908261191a6005610c0f565b8111611974575b5084612436565b6119315f610c0f565b81036119425750506102575f6118f0565b61196e5f91611964610de68461025796019261195e6001610c0f565b906118a5565b5f5260205f200190565b016118e6565b8061195e611984929593956121d3565b9061199c610fc05f611996858a611964565b016118bb565b65ffffffffffff851610156119b45750915b5f611921565b9291506119cb906119c56001610c0f565b906118c5565b906119ae565b6119d96112c8565b339081906001600160a01b0316036119ee5750565b7f118cdaa7000000000000000000000000000000000000000000000000000000005f9081526001600160a01b039091166004526024035ffd5b611a2f6124a8565b6102b0611a57565b9060ff90610c28565b90611a50610257610c6092151590565b8254611a37565b611a845f807fcd5ed15c6e187e77e9aee88184c21f4f2182ab5827cb3b7e07fbedcd63f033005b01611a40565b7f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa610d8233610494565b6102b0611a27565b61025761250c565b906102b091611acb612514565b906102b09161272c565b906102b091611abe565b6102b0612514565b6102b0611adf565b6102b090611afb612514565b6102b090612742565b6102b090611aef565b6102b090611b19612514565b611b59565b611b286001610e2b565b7f3100000000000000000000000000000000000000000000000000000000000000602082015290565b610257611b1e565b6102b090611b65611b51565b906127cb565b6102b090611b0d565b9190611b7f5f611108565b926001600160a01b0384166001600160a01b03821614611ba3576102b09293612070565b63ec442f0560e01b5f9081526001600160a01b038516600452602490fd5b61025743612146565b906001600160a01b0390610c28565b90611be9610257610c6092610b2c565b8254611bca565b6102b091611c857fe8b26c30fad74198956032a3533d903385d56dd795af560196f9c78d4af40d0092611c3783611c32835f611c2b82611021565b9801610b35565b611bd9565b611c4081610b2c565b611c4985610b2c565b611c5285610b2c565b917f3134e8a2e6d97e929a7e54011ea5485d7d196dd5f0ba4d4ef95803e8e3fc257f611c7d60405190565b5f90a46127d5565b916127f1565b611ca4611c9f61025761025793610b795f90565b612979565b6129b4565b611cee611ce87f9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c199300611ce384611cdd83611017565b92611bd9565b610b2c565b91610b2c565b907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0611d1960405190565b80805b0390a3565b610257906129ea565b611d326129f8565b6102b0611d6160015f7fcd5ed15c6e187e77e9aee88184c21f4f2182ab5827cb3b7e07fbedcd63f03300611a7e565b7f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258610d8233610494565b6102b0611d2a565b61025760027fa16a46d94261c7517cc8ff89f61c0ce93598e3c849801011dee649a6a557d100610a82565b61025760037fa16a46d94261c7517cc8ff89f61c0ce93598e3c849801011dee649a6a557d100610a82565b8054611928565b61025790611dfc61182b565b604291604051917f19010000000000000000000000000000000000000000000000000000000000008352600283015260228201522090565b916102579391611e4b93611e455f90565b50612a6c565b90929192612b5f565b6001600160a01b0390911681526040810192916102b09160200152565b611e7a81611ed7565b91829003611e86575050565b7f752d88c0000000000000000000000000000000000000000000000000000000005f90815291610dbe916004611e54565b905f1990610c28565b90611ed0610257610c6092610c0f565b8254611eb7565b611f05905f5b505f7f5ab42ced628888259c08ac98db1eb0cf702fc1501344311d8b100cd1bfe4bb00610b9e565b610257611f1182610a9f565b91600183015b90611ec0565b90611f3061025761025793610b79611652565b612cda565b909192611f5f7f52c63247e1f47db19d5ce0460030c497f067ca4cebf71ba98eeadabe20bace0090565b611f685f611108565b6001600160a01b0381166001600160a01b03851614612037576001600160a01b0381166001600160a01b03861614611ffe575084611fb08561162f866001611fb59601610b35565b611ec0565b611fbe57505050565b611d1c611ff4611fee7f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92593610b2c565b93610b2c565b9361033960405190565b7f94280d62000000000000000000000000000000000000000000000000000000005f9081526001600160a01b039091166004526024035ffd5b7fe602df05000000000000000000000000000000000000000000000000000000005f9081526001600160a01b039091166004526024035ffd5b906102b09291612cf8565b909594926102b0946120ac6114ee926120a560809661209e60a088019c5f890152565b6020870152565b6040850152565b6060830152565b7f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f6121076120df612d7e565b6120e7612e12565b9061141f6120f430610b2c565b604051958694602086019446928661207b565b612112611436825190565b2090565b6102e890610ae8565b9160206102b09294936113b560408201965f830190612116565b610fc06102576102579290565b61215565ffffffffffff611833565b81116121645761025790612139565b610dbe5f916306dfcc6560e41b835260306004840161211f565b61025790612192610de66102579460ff1690565b901c90565b610257906121ab610de66102579460ff1690565b901b90565b634e487b7160e01b5f52601260045260245ffd5b81156121ce570490565b6121b0565b60016121de81610c0f565b821115612432579061233d6123386102576123316122fd6122fd6123276123026122fd61231d6122fd6122fd8c6102426102579f6122f36122fd61230c612316936122e36122dd8861222f84610c0f565b9061224a700100000000000000000000000000000000610c0f565b8b101561240a575b61226468010000000000000000610c0f565b8110156123e8575b61227a640100000000610c0f565b8110156123c6575b61228e62010000610c0f565b8110156123a4575b6122a1610100610c0f565b811015612382575b6122b36010610c0f565b81101561235a575b6122c8610de66004610c0f565b1015612342575b6122d96003610c0f565b0290565b91610ae8565b9e8f9c8d809b819782809661217e565b610242818d6121c4565b61217e565b610242818a6121c4565b61024281876121c4565b80926121c4565b610242818c6121c4565b61024281896121c4565b80946121c4565b821190565b900390565b6123559061234f85610ae8565b90612197565b6122cf565b61237161237c9161236b6004610ae8565b9061217e565b9161234f6002610ae8565b906122bb565b61239361239e9161236b6008610ae8565b9161234f6004610ae8565b906122a9565b6123b56123c09161236b6010610ae8565b9161234f6008610ae8565b90612296565b6123d76123e29161236b6020610ae8565b9161234f6010610ae8565b90612282565b6123f96124049161236b6040610ae8565b9161234f6020610ae8565b9061226c565b5061242c61242161241b6080610ae8565b8c61217e565b9161234f6040610ae8565b90612252565b5090565b939190926124415f90565b505b808210156124a0576124558183612e72565b906124695f61199684895f5260205f200190565b61247a65ffffffffffff8716610fcb565b11156124895750915b91612443565b92915061249a906119c56001610c0f565b90612483565b925050915090565b6124b3610cc261107e565b6124b957565b7f8dfc202b000000000000000000000000000000000000000000000000000000005f908152600490fd5b6102577ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00610c0f565b6102576124e3565b61251f610cc2612e96565b61252557565b7fd7e6bcf8000000000000000000000000000000000000000000000000000000005f908152600490fd5b906102b09161255c612514565b6126eb565b634e487b7160e01b5f525f60045260245ffd5b915f1960089290920291821b911b610c28565b9190612598610257610c6093610c0f565b908354612574565b6102b0915f91612587565b8181106125b6575050565b806125c35f6001936125a0565b016125ab565b9190601f81116125d857505050565b6125e86102b0935f5260205f2090565b906020601f84018190048301931061260a575b6020601f9091010401906125ab565b90915081906125fb565b9061261d815190565b9067ffffffffffffffff8211610a2c576126418261263b8554610942565b856125c9565b602090601f831160011461267a57610c6092915f918361266f575b50505f19600883021c1916906002021790565b015190505f8061265c565b601f1983169161268d855f5260205f2090565b925f5b8181106126c9575091600293918560019694106126b1575b50505002019055565b01515f196008601f8516021c191690555f80806126a8565b91936020600181928787015181550195019201612690565b906102b091612614565b9060046102b09261272661271c7f52c63247e1f47db19d5ce0460030c497f067ca4cebf71ba98eeadabe20bace0090565b91600383016126e1565b016126e1565b906102b09161254f565b6102b090611679612514565b6102b090612736565b906102b091612758612514565b61276b565b90611ed0610257610c609290565b6127af6102b0926127a661279c7fa16a46d94261c7517cc8ff89f61c0ce93598e3c849801011dee649a6a557d10090565b93600285016126e1565b600383016126e1565b60016127ba5f610c0f565b916127c5838261275d565b0161275d565b906102b09161274b565b610257906110b0565b9081526040810192916102b09160200152565b7fe8b26c30fad74198956032a3533d903385d56dd795af560196f9c78d4af40d009291906001600160a01b0382166001600160a01b038216141580612968575b61283b5750505050565b612870906128485f611108565b906001600160a01b0382166001600160a01b03821603612904575b506001600160a01b031690565b6001600160a01b03821603612886575b8061172f565b6128e3611ce86128d67fdec2bacdd2f05b59de34da9b523dff8be42e5e38e818c82fdb0bae774387a724946128cd610de66128c78760016128dd9b01610b35565b92612ee0565b60015b90612f19565b9590610b4b565b94610b4b565b926128f96128f060405190565b928392836127de565b0390a25f8080612880565b7fdec2bacdd2f05b59de34da9b523dff8be42e5e38e818c82fdb0bae774387a72481612952611ce86128d661293f6128dd9660018d01610b35565b61294b610de68c612ee0565b60026128d0565b9261295f6128f060405190565b0390a25f612863565b506129725f610c0f565b8311612831565b5f610257916129855f90565b50015490565b6102576102576102579263ffffffff1690565b6129ab6102576102579290565b63ffffffff1690565b6129c163ffffffff61298b565b81116129d0576102579061299e565b610dbe5f916306dfcc6560e41b835260206004840161211f565b6110e661025791611edd5f90565b612a0061107e565b612a0657565b7fd93c0665000000000000000000000000000000000000000000000000000000005f908152600490fd5b61025790610c0f565b6113b56102b0946113ae606094989795612a57608086019a5f870152565b60ff166020850152565b6040513d5f823e3d90fd5b9091612a7784612a30565b612aa3610de67f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0610c0f565b11612b1f5790612ac46020945f9493612abb60405190565b94859485612a39565b838052039060015afa15612b1a575f51612add5f611108565b6001600160a01b0381166001600160a01b03831614612b075750612b005f610c0f565b90915f9190565b9050612b125f610c0f565b909160019190565b612a61565b505050612b2b5f611108565b9160039190565b634e487b7160e01b5f52602160045260245ffd5b60041115612b5057565b612b32565b906102b082612b46565b612b685f612b55565b612b7182612b55565b03612b7a575050565b612b846001612b55565b612b8d82612b55565b03612bbc577ff645eedf000000000000000000000000000000000000000000000000000000005f908152600490fd5b612bc66002612b55565b612bcf82612b55565b03612c10575f610dbe612be184612a30565b7ffce698f700000000000000000000000000000000000000000000000000000000835260048301526024820190565b612c23612c1d6003612b55565b91612b55565b14612c2b5750565b7fd78bce0c000000000000000000000000000000000000000000000000000000005f908152600491909152602490fd5b634e487b7160e01b5f52603260045260245ffd5b8054821015612c8f57612c876001915f5260205f2090565b910201905f90565b612c5b565b906102b0612cc15f612ca4611634565b9461196e612cb38383016118bb565b65ffffffffffff1687840152565b6001600160d01b03166020840152565b61025790612c94565b610257915f612cf292612ceb611652565b5001612c6f565b50612cd1565b929190612d06828286612f92565b612d126102855f611108565b6001600160a01b03851614612d2c575b6102b09293612fad565b612d34610aa9565b93612d3d612f9d565b808611612d4c57509350612d22565b610dbe5f91877f1cb15d26000000000000000000000000000000000000000000000000000000008452600484016127de565b7fa16a46d94261c7517cc8ff89f61c0ce93598e3c849801011dee649a6a557d100612daa610257611d93565b90612db3825190565b612dbf610de65f610c0f565b1115612dd15750612112611436825190565b612ddb9150610a9f565b612de45f610c0f565b8114612ded5790565b507fc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a47090565b7fa16a46d94261c7517cc8ff89f61c0ce93598e3c849801011dee649a6a557d100612e3e610257611dbe565b90612e47825190565b612e53610de65f610c0f565b1115612e655750612112611436825190565b612ddb9150600101610a9f565b6119c561025792612e805f90565b508083169218612e906002610c0f565b906121c4565b6102575f612ea2611ab6565b01610bdc565b612ec3906001600160d01b03165b916001600160d01b031690565b9003906001600160d01b038211610edd57565b6102579190612ea8565b612ef06001600160d01b03610b4b565b8111612eff57610257906118f0565b610dbe5f916306dfcc6560e41b835260d06004840161211f565b90612f41612f4793612f285f90565b50612f31611329565b92612f3b85611de9565b906133ff565b9161306d565b9091565b612f5d906001600160d01b0316612eb6565b01906001600160d01b038211610edd57565b6102579190612f4b565b906102b09291612f876129f8565b906102b09291613088565b906102b09291612f79565b6102576001600160d01b03610b4b565b9061302d6130276102b09493612fe07fe8b26c30fad74198956032a3533d903385d56dd795af560196f9c78d4af40d0090565b613011612fec5f611108565b6001600160a01b0381166001600160a01b0385161461304c576001600160a01b031690565b6001600160a01b03861614613033575b50611021565b91611021565b906127f1565b6002613046910161294b610de688612ee0565b50613021565b61305f600284016128cd610de68b612ee0565b50506001600160a01b031690565b906130835f612f47949361307e5f90565b500190565b6132de565b7f52c63247e1f47db19d5ce0460030c497f067ca4cebf71ba98eeadabe20bace00826130b35f611108565b6001600160a01b0381166001600160a01b03851603613159577fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9383611ff493613116611fee946102856002611d1c9901611f178d61311183610a9f565b6118c5565b6001600160a01b0382160361313e57506002611ce39101611f178961313a83610a9f565b0390565b611ce39161314c9190610b35565b611f178961024283610a9f565b9050816131696110e68583610b35565b8681106131b85793611d1c9386613116611ff495610285611fee96611fb0876131b28f7fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9e0390565b92610b35565b610dbe875f92877fe450d38c000000000000000000000000000000000000000000000000000000008552600485016116f4565b9065ffffffffffff90610c28565b610fc06102576102579265ffffffffffff1690565b9061321e610257610c60926131f9565b82546131eb565b9065ffffffffffff199060301b610c28565b6118da610257610257926001600160d01b031690565b9061325d610257610c6092613237565b8254613225565b6102b09161329690602090613288613282825165ffffffffffff1690565b8561320e565b01516001600160d01b031690565b9061324d565b91906132ab576102b091613264565b612561565b9081549168010000000000000000831015610a2c57826132d89160016102b095018155612c6f565b9061329c565b91929180546132ec5f610c0f565b8111156133bd576133106133055f9261195e6001610c0f565b835f5260205f200190565b0161331a816118bb565b90613324816118e6565b9365ffffffffffff811665ffffffffffff84161161339357869261334f65ffffffffffff8316610fcb565b0361335f5750610de6925061324d565b915050610de69161337f613371611634565b65ffffffffffff9093168352565b6001600160d01b03861660208301526132b0565b7f2520601d000000000000000000000000000000000000000000000000000000005f908152600490fd5b50906133e2916133ce613371611634565b6001600160d01b03851660208301526132b0565b610de65f6118f0565b634e487b7160e01b5f52605160045260245ffd5b9190918060021461341a576001036133eb5761025791612f6f565b5061025791612ed656fea2646970667358221220c5bf8457776e00614a0d4dd2011100b7be6d0f7e152b7a23ebe0fc0551bbd94164736f6c634300081c0033",
}

// TENTokenABI is the input ABI used to generate the binding from.
// Deprecated: Use TENTokenMetaData.ABI instead.
var TENTokenABI = TENTokenMetaData.ABI

// TENTokenBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use TENTokenMetaData.Bin instead.
var TENTokenBin = TENTokenMetaData.Bin

// DeployTENToken deploys a new Ethereum contract, binding an instance of TENToken to it.
func DeployTENToken(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *TENToken, error) {
	parsed, err := TENTokenMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(TENTokenBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &TENToken{TENTokenCaller: TENTokenCaller{contract: contract}, TENTokenTransactor: TENTokenTransactor{contract: contract}, TENTokenFilterer: TENTokenFilterer{contract: contract}}, nil
}

// TENToken is an auto generated Go binding around an Ethereum contract.
type TENToken struct {
	TENTokenCaller     // Read-only binding to the contract
	TENTokenTransactor // Write-only binding to the contract
	TENTokenFilterer   // Log filterer for contract events
}

// TENTokenCaller is an auto generated read-only Go binding around an Ethereum contract.
type TENTokenCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// TENTokenTransactor is an auto generated write-only Go binding around an Ethereum contract.
type TENTokenTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// TENTokenFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type TENTokenFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// TENTokenSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type TENTokenSession struct {
	Contract     *TENToken         // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// TENTokenCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type TENTokenCallerSession struct {
	Contract *TENTokenCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts   // Call options to use throughout this session
}

// TENTokenTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type TENTokenTransactorSession struct {
	Contract     *TENTokenTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts   // Transaction auth options to use throughout this session
}

// TENTokenRaw is an auto generated low-level Go binding around an Ethereum contract.
type TENTokenRaw struct {
	Contract *TENToken // Generic contract binding to access the raw methods on
}

// TENTokenCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type TENTokenCallerRaw struct {
	Contract *TENTokenCaller // Generic read-only contract binding to access the raw methods on
}

// TENTokenTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type TENTokenTransactorRaw struct {
	Contract *TENTokenTransactor // Generic write-only contract binding to access the raw methods on
}

// NewTENToken creates a new instance of TENToken, bound to a specific deployed contract.
func NewTENToken(address common.Address, backend bind.ContractBackend) (*TENToken, error) {
	contract, err := bindTENToken(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &TENToken{TENTokenCaller: TENTokenCaller{contract: contract}, TENTokenTransactor: TENTokenTransactor{contract: contract}, TENTokenFilterer: TENTokenFilterer{contract: contract}}, nil
}

// NewTENTokenCaller creates a new read-only instance of TENToken, bound to a specific deployed contract.
func NewTENTokenCaller(address common.Address, caller bind.ContractCaller) (*TENTokenCaller, error) {
	contract, err := bindTENToken(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &TENTokenCaller{contract: contract}, nil
}

// NewTENTokenTransactor creates a new write-only instance of TENToken, bound to a specific deployed contract.
func NewTENTokenTransactor(address common.Address, transactor bind.ContractTransactor) (*TENTokenTransactor, error) {
	contract, err := bindTENToken(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &TENTokenTransactor{contract: contract}, nil
}

// NewTENTokenFilterer creates a new log filterer instance of TENToken, bound to a specific deployed contract.
func NewTENTokenFilterer(address common.Address, filterer bind.ContractFilterer) (*TENTokenFilterer, error) {
	contract, err := bindTENToken(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &TENTokenFilterer{contract: contract}, nil
}

// bindTENToken binds a generic wrapper to an already deployed contract.
func bindTENToken(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := TENTokenMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_TENToken *TENTokenRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _TENToken.Contract.TENTokenCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_TENToken *TENTokenRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _TENToken.Contract.TENTokenTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_TENToken *TENTokenRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _TENToken.Contract.TENTokenTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_TENToken *TENTokenCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _TENToken.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_TENToken *TENTokenTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _TENToken.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_TENToken *TENTokenTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _TENToken.Contract.contract.Transact(opts, method, params...)
}

// CLOCKMODE is a free data retrieval call binding the contract method 0x4bf5d7e9.
//
// Solidity: function CLOCK_MODE() view returns(string)
func (_TENToken *TENTokenCaller) CLOCKMODE(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _TENToken.contract.Call(opts, &out, "CLOCK_MODE")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// CLOCKMODE is a free data retrieval call binding the contract method 0x4bf5d7e9.
//
// Solidity: function CLOCK_MODE() view returns(string)
func (_TENToken *TENTokenSession) CLOCKMODE() (string, error) {
	return _TENToken.Contract.CLOCKMODE(&_TENToken.CallOpts)
}

// CLOCKMODE is a free data retrieval call binding the contract method 0x4bf5d7e9.
//
// Solidity: function CLOCK_MODE() view returns(string)
func (_TENToken *TENTokenCallerSession) CLOCKMODE() (string, error) {
	return _TENToken.Contract.CLOCKMODE(&_TENToken.CallOpts)
}

// DOMAINSEPARATOR is a free data retrieval call binding the contract method 0x3644e515.
//
// Solidity: function DOMAIN_SEPARATOR() view returns(bytes32)
func (_TENToken *TENTokenCaller) DOMAINSEPARATOR(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _TENToken.contract.Call(opts, &out, "DOMAIN_SEPARATOR")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// DOMAINSEPARATOR is a free data retrieval call binding the contract method 0x3644e515.
//
// Solidity: function DOMAIN_SEPARATOR() view returns(bytes32)
func (_TENToken *TENTokenSession) DOMAINSEPARATOR() ([32]byte, error) {
	return _TENToken.Contract.DOMAINSEPARATOR(&_TENToken.CallOpts)
}

// DOMAINSEPARATOR is a free data retrieval call binding the contract method 0x3644e515.
//
// Solidity: function DOMAIN_SEPARATOR() view returns(bytes32)
func (_TENToken *TENTokenCallerSession) DOMAINSEPARATOR() ([32]byte, error) {
	return _TENToken.Contract.DOMAINSEPARATOR(&_TENToken.CallOpts)
}

// Allowance is a free data retrieval call binding the contract method 0xdd62ed3e.
//
// Solidity: function allowance(address owner, address spender) view returns(uint256)
func (_TENToken *TENTokenCaller) Allowance(opts *bind.CallOpts, owner common.Address, spender common.Address) (*big.Int, error) {
	var out []interface{}
	err := _TENToken.contract.Call(opts, &out, "allowance", owner, spender)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// Allowance is a free data retrieval call binding the contract method 0xdd62ed3e.
//
// Solidity: function allowance(address owner, address spender) view returns(uint256)
func (_TENToken *TENTokenSession) Allowance(owner common.Address, spender common.Address) (*big.Int, error) {
	return _TENToken.Contract.Allowance(&_TENToken.CallOpts, owner, spender)
}

// Allowance is a free data retrieval call binding the contract method 0xdd62ed3e.
//
// Solidity: function allowance(address owner, address spender) view returns(uint256)
func (_TENToken *TENTokenCallerSession) Allowance(owner common.Address, spender common.Address) (*big.Int, error) {
	return _TENToken.Contract.Allowance(&_TENToken.CallOpts, owner, spender)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address account) view returns(uint256)
func (_TENToken *TENTokenCaller) BalanceOf(opts *bind.CallOpts, account common.Address) (*big.Int, error) {
	var out []interface{}
	err := _TENToken.contract.Call(opts, &out, "balanceOf", account)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address account) view returns(uint256)
func (_TENToken *TENTokenSession) BalanceOf(account common.Address) (*big.Int, error) {
	return _TENToken.Contract.BalanceOf(&_TENToken.CallOpts, account)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address account) view returns(uint256)
func (_TENToken *TENTokenCallerSession) BalanceOf(account common.Address) (*big.Int, error) {
	return _TENToken.Contract.BalanceOf(&_TENToken.CallOpts, account)
}

// Checkpoints is a free data retrieval call binding the contract method 0xf1127ed8.
//
// Solidity: function checkpoints(address account, uint32 pos) view returns((uint48,uint208))
func (_TENToken *TENTokenCaller) Checkpoints(opts *bind.CallOpts, account common.Address, pos uint32) (CheckpointsCheckpoint208, error) {
	var out []interface{}
	err := _TENToken.contract.Call(opts, &out, "checkpoints", account, pos)

	if err != nil {
		return *new(CheckpointsCheckpoint208), err
	}

	out0 := *abi.ConvertType(out[0], new(CheckpointsCheckpoint208)).(*CheckpointsCheckpoint208)

	return out0, err

}

// Checkpoints is a free data retrieval call binding the contract method 0xf1127ed8.
//
// Solidity: function checkpoints(address account, uint32 pos) view returns((uint48,uint208))
func (_TENToken *TENTokenSession) Checkpoints(account common.Address, pos uint32) (CheckpointsCheckpoint208, error) {
	return _TENToken.Contract.Checkpoints(&_TENToken.CallOpts, account, pos)
}

// Checkpoints is a free data retrieval call binding the contract method 0xf1127ed8.
//
// Solidity: function checkpoints(address account, uint32 pos) view returns((uint48,uint208))
func (_TENToken *TENTokenCallerSession) Checkpoints(account common.Address, pos uint32) (CheckpointsCheckpoint208, error) {
	return _TENToken.Contract.Checkpoints(&_TENToken.CallOpts, account, pos)
}

// Clock is a free data retrieval call binding the contract method 0x91ddadf4.
//
// Solidity: function clock() view returns(uint48)
func (_TENToken *TENTokenCaller) Clock(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _TENToken.contract.Call(opts, &out, "clock")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// Clock is a free data retrieval call binding the contract method 0x91ddadf4.
//
// Solidity: function clock() view returns(uint48)
func (_TENToken *TENTokenSession) Clock() (*big.Int, error) {
	return _TENToken.Contract.Clock(&_TENToken.CallOpts)
}

// Clock is a free data retrieval call binding the contract method 0x91ddadf4.
//
// Solidity: function clock() view returns(uint48)
func (_TENToken *TENTokenCallerSession) Clock() (*big.Int, error) {
	return _TENToken.Contract.Clock(&_TENToken.CallOpts)
}

// Decimals is a free data retrieval call binding the contract method 0x313ce567.
//
// Solidity: function decimals() view returns(uint8)
func (_TENToken *TENTokenCaller) Decimals(opts *bind.CallOpts) (uint8, error) {
	var out []interface{}
	err := _TENToken.contract.Call(opts, &out, "decimals")

	if err != nil {
		return *new(uint8), err
	}

	out0 := *abi.ConvertType(out[0], new(uint8)).(*uint8)

	return out0, err

}

// Decimals is a free data retrieval call binding the contract method 0x313ce567.
//
// Solidity: function decimals() view returns(uint8)
func (_TENToken *TENTokenSession) Decimals() (uint8, error) {
	return _TENToken.Contract.Decimals(&_TENToken.CallOpts)
}

// Decimals is a free data retrieval call binding the contract method 0x313ce567.
//
// Solidity: function decimals() view returns(uint8)
func (_TENToken *TENTokenCallerSession) Decimals() (uint8, error) {
	return _TENToken.Contract.Decimals(&_TENToken.CallOpts)
}

// Delegates is a free data retrieval call binding the contract method 0x587cde1e.
//
// Solidity: function delegates(address account) view returns(address)
func (_TENToken *TENTokenCaller) Delegates(opts *bind.CallOpts, account common.Address) (common.Address, error) {
	var out []interface{}
	err := _TENToken.contract.Call(opts, &out, "delegates", account)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Delegates is a free data retrieval call binding the contract method 0x587cde1e.
//
// Solidity: function delegates(address account) view returns(address)
func (_TENToken *TENTokenSession) Delegates(account common.Address) (common.Address, error) {
	return _TENToken.Contract.Delegates(&_TENToken.CallOpts, account)
}

// Delegates is a free data retrieval call binding the contract method 0x587cde1e.
//
// Solidity: function delegates(address account) view returns(address)
func (_TENToken *TENTokenCallerSession) Delegates(account common.Address) (common.Address, error) {
	return _TENToken.Contract.Delegates(&_TENToken.CallOpts, account)
}

// Eip712Domain is a free data retrieval call binding the contract method 0x84b0196e.
//
// Solidity: function eip712Domain() view returns(bytes1 fields, string name, string version, uint256 chainId, address verifyingContract, bytes32 salt, uint256[] extensions)
func (_TENToken *TENTokenCaller) Eip712Domain(opts *bind.CallOpts) (struct {
	Fields            [1]byte
	Name              string
	Version           string
	ChainId           *big.Int
	VerifyingContract common.Address
	Salt              [32]byte
	Extensions        []*big.Int
}, error) {
	var out []interface{}
	err := _TENToken.contract.Call(opts, &out, "eip712Domain")

	outstruct := new(struct {
		Fields            [1]byte
		Name              string
		Version           string
		ChainId           *big.Int
		VerifyingContract common.Address
		Salt              [32]byte
		Extensions        []*big.Int
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.Fields = *abi.ConvertType(out[0], new([1]byte)).(*[1]byte)
	outstruct.Name = *abi.ConvertType(out[1], new(string)).(*string)
	outstruct.Version = *abi.ConvertType(out[2], new(string)).(*string)
	outstruct.ChainId = *abi.ConvertType(out[3], new(*big.Int)).(**big.Int)
	outstruct.VerifyingContract = *abi.ConvertType(out[4], new(common.Address)).(*common.Address)
	outstruct.Salt = *abi.ConvertType(out[5], new([32]byte)).(*[32]byte)
	outstruct.Extensions = *abi.ConvertType(out[6], new([]*big.Int)).(*[]*big.Int)

	return *outstruct, err

}

// Eip712Domain is a free data retrieval call binding the contract method 0x84b0196e.
//
// Solidity: function eip712Domain() view returns(bytes1 fields, string name, string version, uint256 chainId, address verifyingContract, bytes32 salt, uint256[] extensions)
func (_TENToken *TENTokenSession) Eip712Domain() (struct {
	Fields            [1]byte
	Name              string
	Version           string
	ChainId           *big.Int
	VerifyingContract common.Address
	Salt              [32]byte
	Extensions        []*big.Int
}, error) {
	return _TENToken.Contract.Eip712Domain(&_TENToken.CallOpts)
}

// Eip712Domain is a free data retrieval call binding the contract method 0x84b0196e.
//
// Solidity: function eip712Domain() view returns(bytes1 fields, string name, string version, uint256 chainId, address verifyingContract, bytes32 salt, uint256[] extensions)
func (_TENToken *TENTokenCallerSession) Eip712Domain() (struct {
	Fields            [1]byte
	Name              string
	Version           string
	ChainId           *big.Int
	VerifyingContract common.Address
	Salt              [32]byte
	Extensions        []*big.Int
}, error) {
	return _TENToken.Contract.Eip712Domain(&_TENToken.CallOpts)
}

// GetPastTotalSupply is a free data retrieval call binding the contract method 0x8e539e8c.
//
// Solidity: function getPastTotalSupply(uint256 timepoint) view returns(uint256)
func (_TENToken *TENTokenCaller) GetPastTotalSupply(opts *bind.CallOpts, timepoint *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _TENToken.contract.Call(opts, &out, "getPastTotalSupply", timepoint)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetPastTotalSupply is a free data retrieval call binding the contract method 0x8e539e8c.
//
// Solidity: function getPastTotalSupply(uint256 timepoint) view returns(uint256)
func (_TENToken *TENTokenSession) GetPastTotalSupply(timepoint *big.Int) (*big.Int, error) {
	return _TENToken.Contract.GetPastTotalSupply(&_TENToken.CallOpts, timepoint)
}

// GetPastTotalSupply is a free data retrieval call binding the contract method 0x8e539e8c.
//
// Solidity: function getPastTotalSupply(uint256 timepoint) view returns(uint256)
func (_TENToken *TENTokenCallerSession) GetPastTotalSupply(timepoint *big.Int) (*big.Int, error) {
	return _TENToken.Contract.GetPastTotalSupply(&_TENToken.CallOpts, timepoint)
}

// GetPastVotes is a free data retrieval call binding the contract method 0x3a46b1a8.
//
// Solidity: function getPastVotes(address account, uint256 timepoint) view returns(uint256)
func (_TENToken *TENTokenCaller) GetPastVotes(opts *bind.CallOpts, account common.Address, timepoint *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _TENToken.contract.Call(opts, &out, "getPastVotes", account, timepoint)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetPastVotes is a free data retrieval call binding the contract method 0x3a46b1a8.
//
// Solidity: function getPastVotes(address account, uint256 timepoint) view returns(uint256)
func (_TENToken *TENTokenSession) GetPastVotes(account common.Address, timepoint *big.Int) (*big.Int, error) {
	return _TENToken.Contract.GetPastVotes(&_TENToken.CallOpts, account, timepoint)
}

// GetPastVotes is a free data retrieval call binding the contract method 0x3a46b1a8.
//
// Solidity: function getPastVotes(address account, uint256 timepoint) view returns(uint256)
func (_TENToken *TENTokenCallerSession) GetPastVotes(account common.Address, timepoint *big.Int) (*big.Int, error) {
	return _TENToken.Contract.GetPastVotes(&_TENToken.CallOpts, account, timepoint)
}

// GetVotes is a free data retrieval call binding the contract method 0x9ab24eb0.
//
// Solidity: function getVotes(address account) view returns(uint256)
func (_TENToken *TENTokenCaller) GetVotes(opts *bind.CallOpts, account common.Address) (*big.Int, error) {
	var out []interface{}
	err := _TENToken.contract.Call(opts, &out, "getVotes", account)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetVotes is a free data retrieval call binding the contract method 0x9ab24eb0.
//
// Solidity: function getVotes(address account) view returns(uint256)
func (_TENToken *TENTokenSession) GetVotes(account common.Address) (*big.Int, error) {
	return _TENToken.Contract.GetVotes(&_TENToken.CallOpts, account)
}

// GetVotes is a free data retrieval call binding the contract method 0x9ab24eb0.
//
// Solidity: function getVotes(address account) view returns(uint256)
func (_TENToken *TENTokenCallerSession) GetVotes(account common.Address) (*big.Int, error) {
	return _TENToken.Contract.GetVotes(&_TENToken.CallOpts, account)
}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_TENToken *TENTokenCaller) Name(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _TENToken.contract.Call(opts, &out, "name")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_TENToken *TENTokenSession) Name() (string, error) {
	return _TENToken.Contract.Name(&_TENToken.CallOpts)
}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_TENToken *TENTokenCallerSession) Name() (string, error) {
	return _TENToken.Contract.Name(&_TENToken.CallOpts)
}

// Nonces is a free data retrieval call binding the contract method 0x7ecebe00.
//
// Solidity: function nonces(address owner) view returns(uint256)
func (_TENToken *TENTokenCaller) Nonces(opts *bind.CallOpts, owner common.Address) (*big.Int, error) {
	var out []interface{}
	err := _TENToken.contract.Call(opts, &out, "nonces", owner)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// Nonces is a free data retrieval call binding the contract method 0x7ecebe00.
//
// Solidity: function nonces(address owner) view returns(uint256)
func (_TENToken *TENTokenSession) Nonces(owner common.Address) (*big.Int, error) {
	return _TENToken.Contract.Nonces(&_TENToken.CallOpts, owner)
}

// Nonces is a free data retrieval call binding the contract method 0x7ecebe00.
//
// Solidity: function nonces(address owner) view returns(uint256)
func (_TENToken *TENTokenCallerSession) Nonces(owner common.Address) (*big.Int, error) {
	return _TENToken.Contract.Nonces(&_TENToken.CallOpts, owner)
}

// NumCheckpoints is a free data retrieval call binding the contract method 0x6fcfff45.
//
// Solidity: function numCheckpoints(address account) view returns(uint32)
func (_TENToken *TENTokenCaller) NumCheckpoints(opts *bind.CallOpts, account common.Address) (uint32, error) {
	var out []interface{}
	err := _TENToken.contract.Call(opts, &out, "numCheckpoints", account)

	if err != nil {
		return *new(uint32), err
	}

	out0 := *abi.ConvertType(out[0], new(uint32)).(*uint32)

	return out0, err

}

// NumCheckpoints is a free data retrieval call binding the contract method 0x6fcfff45.
//
// Solidity: function numCheckpoints(address account) view returns(uint32)
func (_TENToken *TENTokenSession) NumCheckpoints(account common.Address) (uint32, error) {
	return _TENToken.Contract.NumCheckpoints(&_TENToken.CallOpts, account)
}

// NumCheckpoints is a free data retrieval call binding the contract method 0x6fcfff45.
//
// Solidity: function numCheckpoints(address account) view returns(uint32)
func (_TENToken *TENTokenCallerSession) NumCheckpoints(account common.Address) (uint32, error) {
	return _TENToken.Contract.NumCheckpoints(&_TENToken.CallOpts, account)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_TENToken *TENTokenCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _TENToken.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_TENToken *TENTokenSession) Owner() (common.Address, error) {
	return _TENToken.Contract.Owner(&_TENToken.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_TENToken *TENTokenCallerSession) Owner() (common.Address, error) {
	return _TENToken.Contract.Owner(&_TENToken.CallOpts)
}

// Paused is a free data retrieval call binding the contract method 0x5c975abb.
//
// Solidity: function paused() view returns(bool)
func (_TENToken *TENTokenCaller) Paused(opts *bind.CallOpts) (bool, error) {
	var out []interface{}
	err := _TENToken.contract.Call(opts, &out, "paused")

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// Paused is a free data retrieval call binding the contract method 0x5c975abb.
//
// Solidity: function paused() view returns(bool)
func (_TENToken *TENTokenSession) Paused() (bool, error) {
	return _TENToken.Contract.Paused(&_TENToken.CallOpts)
}

// Paused is a free data retrieval call binding the contract method 0x5c975abb.
//
// Solidity: function paused() view returns(bool)
func (_TENToken *TENTokenCallerSession) Paused() (bool, error) {
	return _TENToken.Contract.Paused(&_TENToken.CallOpts)
}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_TENToken *TENTokenCaller) Symbol(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _TENToken.contract.Call(opts, &out, "symbol")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_TENToken *TENTokenSession) Symbol() (string, error) {
	return _TENToken.Contract.Symbol(&_TENToken.CallOpts)
}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_TENToken *TENTokenCallerSession) Symbol() (string, error) {
	return _TENToken.Contract.Symbol(&_TENToken.CallOpts)
}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_TENToken *TENTokenCaller) TotalSupply(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _TENToken.contract.Call(opts, &out, "totalSupply")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_TENToken *TENTokenSession) TotalSupply() (*big.Int, error) {
	return _TENToken.Contract.TotalSupply(&_TENToken.CallOpts)
}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_TENToken *TENTokenCallerSession) TotalSupply() (*big.Int, error) {
	return _TENToken.Contract.TotalSupply(&_TENToken.CallOpts)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address spender, uint256 value) returns(bool)
func (_TENToken *TENTokenTransactor) Approve(opts *bind.TransactOpts, spender common.Address, value *big.Int) (*types.Transaction, error) {
	return _TENToken.contract.Transact(opts, "approve", spender, value)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address spender, uint256 value) returns(bool)
func (_TENToken *TENTokenSession) Approve(spender common.Address, value *big.Int) (*types.Transaction, error) {
	return _TENToken.Contract.Approve(&_TENToken.TransactOpts, spender, value)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address spender, uint256 value) returns(bool)
func (_TENToken *TENTokenTransactorSession) Approve(spender common.Address, value *big.Int) (*types.Transaction, error) {
	return _TENToken.Contract.Approve(&_TENToken.TransactOpts, spender, value)
}

// Delegate is a paid mutator transaction binding the contract method 0x5c19a95c.
//
// Solidity: function delegate(address delegatee) returns()
func (_TENToken *TENTokenTransactor) Delegate(opts *bind.TransactOpts, delegatee common.Address) (*types.Transaction, error) {
	return _TENToken.contract.Transact(opts, "delegate", delegatee)
}

// Delegate is a paid mutator transaction binding the contract method 0x5c19a95c.
//
// Solidity: function delegate(address delegatee) returns()
func (_TENToken *TENTokenSession) Delegate(delegatee common.Address) (*types.Transaction, error) {
	return _TENToken.Contract.Delegate(&_TENToken.TransactOpts, delegatee)
}

// Delegate is a paid mutator transaction binding the contract method 0x5c19a95c.
//
// Solidity: function delegate(address delegatee) returns()
func (_TENToken *TENTokenTransactorSession) Delegate(delegatee common.Address) (*types.Transaction, error) {
	return _TENToken.Contract.Delegate(&_TENToken.TransactOpts, delegatee)
}

// DelegateBySig is a paid mutator transaction binding the contract method 0xc3cda520.
//
// Solidity: function delegateBySig(address delegatee, uint256 nonce, uint256 expiry, uint8 v, bytes32 r, bytes32 s) returns()
func (_TENToken *TENTokenTransactor) DelegateBySig(opts *bind.TransactOpts, delegatee common.Address, nonce *big.Int, expiry *big.Int, v uint8, r [32]byte, s [32]byte) (*types.Transaction, error) {
	return _TENToken.contract.Transact(opts, "delegateBySig", delegatee, nonce, expiry, v, r, s)
}

// DelegateBySig is a paid mutator transaction binding the contract method 0xc3cda520.
//
// Solidity: function delegateBySig(address delegatee, uint256 nonce, uint256 expiry, uint8 v, bytes32 r, bytes32 s) returns()
func (_TENToken *TENTokenSession) DelegateBySig(delegatee common.Address, nonce *big.Int, expiry *big.Int, v uint8, r [32]byte, s [32]byte) (*types.Transaction, error) {
	return _TENToken.Contract.DelegateBySig(&_TENToken.TransactOpts, delegatee, nonce, expiry, v, r, s)
}

// DelegateBySig is a paid mutator transaction binding the contract method 0xc3cda520.
//
// Solidity: function delegateBySig(address delegatee, uint256 nonce, uint256 expiry, uint8 v, bytes32 r, bytes32 s) returns()
func (_TENToken *TENTokenTransactorSession) DelegateBySig(delegatee common.Address, nonce *big.Int, expiry *big.Int, v uint8, r [32]byte, s [32]byte) (*types.Transaction, error) {
	return _TENToken.Contract.DelegateBySig(&_TENToken.TransactOpts, delegatee, nonce, expiry, v, r, s)
}

// Initialize is a paid mutator transaction binding the contract method 0x485cc955.
//
// Solidity: function initialize(address recipient, address initialOwner) returns()
func (_TENToken *TENTokenTransactor) Initialize(opts *bind.TransactOpts, recipient common.Address, initialOwner common.Address) (*types.Transaction, error) {
	return _TENToken.contract.Transact(opts, "initialize", recipient, initialOwner)
}

// Initialize is a paid mutator transaction binding the contract method 0x485cc955.
//
// Solidity: function initialize(address recipient, address initialOwner) returns()
func (_TENToken *TENTokenSession) Initialize(recipient common.Address, initialOwner common.Address) (*types.Transaction, error) {
	return _TENToken.Contract.Initialize(&_TENToken.TransactOpts, recipient, initialOwner)
}

// Initialize is a paid mutator transaction binding the contract method 0x485cc955.
//
// Solidity: function initialize(address recipient, address initialOwner) returns()
func (_TENToken *TENTokenTransactorSession) Initialize(recipient common.Address, initialOwner common.Address) (*types.Transaction, error) {
	return _TENToken.Contract.Initialize(&_TENToken.TransactOpts, recipient, initialOwner)
}

// Pause is a paid mutator transaction binding the contract method 0x8456cb59.
//
// Solidity: function pause() returns()
func (_TENToken *TENTokenTransactor) Pause(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _TENToken.contract.Transact(opts, "pause")
}

// Pause is a paid mutator transaction binding the contract method 0x8456cb59.
//
// Solidity: function pause() returns()
func (_TENToken *TENTokenSession) Pause() (*types.Transaction, error) {
	return _TENToken.Contract.Pause(&_TENToken.TransactOpts)
}

// Pause is a paid mutator transaction binding the contract method 0x8456cb59.
//
// Solidity: function pause() returns()
func (_TENToken *TENTokenTransactorSession) Pause() (*types.Transaction, error) {
	return _TENToken.Contract.Pause(&_TENToken.TransactOpts)
}

// Permit is a paid mutator transaction binding the contract method 0xd505accf.
//
// Solidity: function permit(address owner, address spender, uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) returns()
func (_TENToken *TENTokenTransactor) Permit(opts *bind.TransactOpts, owner common.Address, spender common.Address, value *big.Int, deadline *big.Int, v uint8, r [32]byte, s [32]byte) (*types.Transaction, error) {
	return _TENToken.contract.Transact(opts, "permit", owner, spender, value, deadline, v, r, s)
}

// Permit is a paid mutator transaction binding the contract method 0xd505accf.
//
// Solidity: function permit(address owner, address spender, uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) returns()
func (_TENToken *TENTokenSession) Permit(owner common.Address, spender common.Address, value *big.Int, deadline *big.Int, v uint8, r [32]byte, s [32]byte) (*types.Transaction, error) {
	return _TENToken.Contract.Permit(&_TENToken.TransactOpts, owner, spender, value, deadline, v, r, s)
}

// Permit is a paid mutator transaction binding the contract method 0xd505accf.
//
// Solidity: function permit(address owner, address spender, uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) returns()
func (_TENToken *TENTokenTransactorSession) Permit(owner common.Address, spender common.Address, value *big.Int, deadline *big.Int, v uint8, r [32]byte, s [32]byte) (*types.Transaction, error) {
	return _TENToken.Contract.Permit(&_TENToken.TransactOpts, owner, spender, value, deadline, v, r, s)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_TENToken *TENTokenTransactor) RenounceOwnership(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _TENToken.contract.Transact(opts, "renounceOwnership")
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_TENToken *TENTokenSession) RenounceOwnership() (*types.Transaction, error) {
	return _TENToken.Contract.RenounceOwnership(&_TENToken.TransactOpts)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_TENToken *TENTokenTransactorSession) RenounceOwnership() (*types.Transaction, error) {
	return _TENToken.Contract.RenounceOwnership(&_TENToken.TransactOpts)
}

// Transfer is a paid mutator transaction binding the contract method 0xa9059cbb.
//
// Solidity: function transfer(address to, uint256 value) returns(bool)
func (_TENToken *TENTokenTransactor) Transfer(opts *bind.TransactOpts, to common.Address, value *big.Int) (*types.Transaction, error) {
	return _TENToken.contract.Transact(opts, "transfer", to, value)
}

// Transfer is a paid mutator transaction binding the contract method 0xa9059cbb.
//
// Solidity: function transfer(address to, uint256 value) returns(bool)
func (_TENToken *TENTokenSession) Transfer(to common.Address, value *big.Int) (*types.Transaction, error) {
	return _TENToken.Contract.Transfer(&_TENToken.TransactOpts, to, value)
}

// Transfer is a paid mutator transaction binding the contract method 0xa9059cbb.
//
// Solidity: function transfer(address to, uint256 value) returns(bool)
func (_TENToken *TENTokenTransactorSession) Transfer(to common.Address, value *big.Int) (*types.Transaction, error) {
	return _TENToken.Contract.Transfer(&_TENToken.TransactOpts, to, value)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address from, address to, uint256 value) returns(bool)
func (_TENToken *TENTokenTransactor) TransferFrom(opts *bind.TransactOpts, from common.Address, to common.Address, value *big.Int) (*types.Transaction, error) {
	return _TENToken.contract.Transact(opts, "transferFrom", from, to, value)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address from, address to, uint256 value) returns(bool)
func (_TENToken *TENTokenSession) TransferFrom(from common.Address, to common.Address, value *big.Int) (*types.Transaction, error) {
	return _TENToken.Contract.TransferFrom(&_TENToken.TransactOpts, from, to, value)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address from, address to, uint256 value) returns(bool)
func (_TENToken *TENTokenTransactorSession) TransferFrom(from common.Address, to common.Address, value *big.Int) (*types.Transaction, error) {
	return _TENToken.Contract.TransferFrom(&_TENToken.TransactOpts, from, to, value)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_TENToken *TENTokenTransactor) TransferOwnership(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _TENToken.contract.Transact(opts, "transferOwnership", newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_TENToken *TENTokenSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _TENToken.Contract.TransferOwnership(&_TENToken.TransactOpts, newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_TENToken *TENTokenTransactorSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _TENToken.Contract.TransferOwnership(&_TENToken.TransactOpts, newOwner)
}

// Unpause is a paid mutator transaction binding the contract method 0x3f4ba83a.
//
// Solidity: function unpause() returns()
func (_TENToken *TENTokenTransactor) Unpause(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _TENToken.contract.Transact(opts, "unpause")
}

// Unpause is a paid mutator transaction binding the contract method 0x3f4ba83a.
//
// Solidity: function unpause() returns()
func (_TENToken *TENTokenSession) Unpause() (*types.Transaction, error) {
	return _TENToken.Contract.Unpause(&_TENToken.TransactOpts)
}

// Unpause is a paid mutator transaction binding the contract method 0x3f4ba83a.
//
// Solidity: function unpause() returns()
func (_TENToken *TENTokenTransactorSession) Unpause() (*types.Transaction, error) {
	return _TENToken.Contract.Unpause(&_TENToken.TransactOpts)
}

// TENTokenApprovalIterator is returned from FilterApproval and is used to iterate over the raw logs and unpacked data for Approval events raised by the TENToken contract.
type TENTokenApprovalIterator struct {
	Event *TENTokenApproval // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *TENTokenApprovalIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(TENTokenApproval)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(TENTokenApproval)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *TENTokenApprovalIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *TENTokenApprovalIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// TENTokenApproval represents a Approval event raised by the TENToken contract.
type TENTokenApproval struct {
	Owner   common.Address
	Spender common.Address
	Value   *big.Int
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterApproval is a free log retrieval operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed spender, uint256 value)
func (_TENToken *TENTokenFilterer) FilterApproval(opts *bind.FilterOpts, owner []common.Address, spender []common.Address) (*TENTokenApprovalIterator, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var spenderRule []interface{}
	for _, spenderItem := range spender {
		spenderRule = append(spenderRule, spenderItem)
	}

	logs, sub, err := _TENToken.contract.FilterLogs(opts, "Approval", ownerRule, spenderRule)
	if err != nil {
		return nil, err
	}
	return &TENTokenApprovalIterator{contract: _TENToken.contract, event: "Approval", logs: logs, sub: sub}, nil
}

// WatchApproval is a free log subscription operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed spender, uint256 value)
func (_TENToken *TENTokenFilterer) WatchApproval(opts *bind.WatchOpts, sink chan<- *TENTokenApproval, owner []common.Address, spender []common.Address) (event.Subscription, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var spenderRule []interface{}
	for _, spenderItem := range spender {
		spenderRule = append(spenderRule, spenderItem)
	}

	logs, sub, err := _TENToken.contract.WatchLogs(opts, "Approval", ownerRule, spenderRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(TENTokenApproval)
				if err := _TENToken.contract.UnpackLog(event, "Approval", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseApproval is a log parse operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed spender, uint256 value)
func (_TENToken *TENTokenFilterer) ParseApproval(log types.Log) (*TENTokenApproval, error) {
	event := new(TENTokenApproval)
	if err := _TENToken.contract.UnpackLog(event, "Approval", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// TENTokenDelegateChangedIterator is returned from FilterDelegateChanged and is used to iterate over the raw logs and unpacked data for DelegateChanged events raised by the TENToken contract.
type TENTokenDelegateChangedIterator struct {
	Event *TENTokenDelegateChanged // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *TENTokenDelegateChangedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(TENTokenDelegateChanged)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(TENTokenDelegateChanged)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *TENTokenDelegateChangedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *TENTokenDelegateChangedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// TENTokenDelegateChanged represents a DelegateChanged event raised by the TENToken contract.
type TENTokenDelegateChanged struct {
	Delegator    common.Address
	FromDelegate common.Address
	ToDelegate   common.Address
	Raw          types.Log // Blockchain specific contextual infos
}

// FilterDelegateChanged is a free log retrieval operation binding the contract event 0x3134e8a2e6d97e929a7e54011ea5485d7d196dd5f0ba4d4ef95803e8e3fc257f.
//
// Solidity: event DelegateChanged(address indexed delegator, address indexed fromDelegate, address indexed toDelegate)
func (_TENToken *TENTokenFilterer) FilterDelegateChanged(opts *bind.FilterOpts, delegator []common.Address, fromDelegate []common.Address, toDelegate []common.Address) (*TENTokenDelegateChangedIterator, error) {

	var delegatorRule []interface{}
	for _, delegatorItem := range delegator {
		delegatorRule = append(delegatorRule, delegatorItem)
	}
	var fromDelegateRule []interface{}
	for _, fromDelegateItem := range fromDelegate {
		fromDelegateRule = append(fromDelegateRule, fromDelegateItem)
	}
	var toDelegateRule []interface{}
	for _, toDelegateItem := range toDelegate {
		toDelegateRule = append(toDelegateRule, toDelegateItem)
	}

	logs, sub, err := _TENToken.contract.FilterLogs(opts, "DelegateChanged", delegatorRule, fromDelegateRule, toDelegateRule)
	if err != nil {
		return nil, err
	}
	return &TENTokenDelegateChangedIterator{contract: _TENToken.contract, event: "DelegateChanged", logs: logs, sub: sub}, nil
}

// WatchDelegateChanged is a free log subscription operation binding the contract event 0x3134e8a2e6d97e929a7e54011ea5485d7d196dd5f0ba4d4ef95803e8e3fc257f.
//
// Solidity: event DelegateChanged(address indexed delegator, address indexed fromDelegate, address indexed toDelegate)
func (_TENToken *TENTokenFilterer) WatchDelegateChanged(opts *bind.WatchOpts, sink chan<- *TENTokenDelegateChanged, delegator []common.Address, fromDelegate []common.Address, toDelegate []common.Address) (event.Subscription, error) {

	var delegatorRule []interface{}
	for _, delegatorItem := range delegator {
		delegatorRule = append(delegatorRule, delegatorItem)
	}
	var fromDelegateRule []interface{}
	for _, fromDelegateItem := range fromDelegate {
		fromDelegateRule = append(fromDelegateRule, fromDelegateItem)
	}
	var toDelegateRule []interface{}
	for _, toDelegateItem := range toDelegate {
		toDelegateRule = append(toDelegateRule, toDelegateItem)
	}

	logs, sub, err := _TENToken.contract.WatchLogs(opts, "DelegateChanged", delegatorRule, fromDelegateRule, toDelegateRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(TENTokenDelegateChanged)
				if err := _TENToken.contract.UnpackLog(event, "DelegateChanged", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseDelegateChanged is a log parse operation binding the contract event 0x3134e8a2e6d97e929a7e54011ea5485d7d196dd5f0ba4d4ef95803e8e3fc257f.
//
// Solidity: event DelegateChanged(address indexed delegator, address indexed fromDelegate, address indexed toDelegate)
func (_TENToken *TENTokenFilterer) ParseDelegateChanged(log types.Log) (*TENTokenDelegateChanged, error) {
	event := new(TENTokenDelegateChanged)
	if err := _TENToken.contract.UnpackLog(event, "DelegateChanged", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// TENTokenDelegateVotesChangedIterator is returned from FilterDelegateVotesChanged and is used to iterate over the raw logs and unpacked data for DelegateVotesChanged events raised by the TENToken contract.
type TENTokenDelegateVotesChangedIterator struct {
	Event *TENTokenDelegateVotesChanged // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *TENTokenDelegateVotesChangedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(TENTokenDelegateVotesChanged)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(TENTokenDelegateVotesChanged)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *TENTokenDelegateVotesChangedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *TENTokenDelegateVotesChangedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// TENTokenDelegateVotesChanged represents a DelegateVotesChanged event raised by the TENToken contract.
type TENTokenDelegateVotesChanged struct {
	Delegate      common.Address
	PreviousVotes *big.Int
	NewVotes      *big.Int
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterDelegateVotesChanged is a free log retrieval operation binding the contract event 0xdec2bacdd2f05b59de34da9b523dff8be42e5e38e818c82fdb0bae774387a724.
//
// Solidity: event DelegateVotesChanged(address indexed delegate, uint256 previousVotes, uint256 newVotes)
func (_TENToken *TENTokenFilterer) FilterDelegateVotesChanged(opts *bind.FilterOpts, delegate []common.Address) (*TENTokenDelegateVotesChangedIterator, error) {

	var delegateRule []interface{}
	for _, delegateItem := range delegate {
		delegateRule = append(delegateRule, delegateItem)
	}

	logs, sub, err := _TENToken.contract.FilterLogs(opts, "DelegateVotesChanged", delegateRule)
	if err != nil {
		return nil, err
	}
	return &TENTokenDelegateVotesChangedIterator{contract: _TENToken.contract, event: "DelegateVotesChanged", logs: logs, sub: sub}, nil
}

// WatchDelegateVotesChanged is a free log subscription operation binding the contract event 0xdec2bacdd2f05b59de34da9b523dff8be42e5e38e818c82fdb0bae774387a724.
//
// Solidity: event DelegateVotesChanged(address indexed delegate, uint256 previousVotes, uint256 newVotes)
func (_TENToken *TENTokenFilterer) WatchDelegateVotesChanged(opts *bind.WatchOpts, sink chan<- *TENTokenDelegateVotesChanged, delegate []common.Address) (event.Subscription, error) {

	var delegateRule []interface{}
	for _, delegateItem := range delegate {
		delegateRule = append(delegateRule, delegateItem)
	}

	logs, sub, err := _TENToken.contract.WatchLogs(opts, "DelegateVotesChanged", delegateRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(TENTokenDelegateVotesChanged)
				if err := _TENToken.contract.UnpackLog(event, "DelegateVotesChanged", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseDelegateVotesChanged is a log parse operation binding the contract event 0xdec2bacdd2f05b59de34da9b523dff8be42e5e38e818c82fdb0bae774387a724.
//
// Solidity: event DelegateVotesChanged(address indexed delegate, uint256 previousVotes, uint256 newVotes)
func (_TENToken *TENTokenFilterer) ParseDelegateVotesChanged(log types.Log) (*TENTokenDelegateVotesChanged, error) {
	event := new(TENTokenDelegateVotesChanged)
	if err := _TENToken.contract.UnpackLog(event, "DelegateVotesChanged", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// TENTokenEIP712DomainChangedIterator is returned from FilterEIP712DomainChanged and is used to iterate over the raw logs and unpacked data for EIP712DomainChanged events raised by the TENToken contract.
type TENTokenEIP712DomainChangedIterator struct {
	Event *TENTokenEIP712DomainChanged // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *TENTokenEIP712DomainChangedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(TENTokenEIP712DomainChanged)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(TENTokenEIP712DomainChanged)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *TENTokenEIP712DomainChangedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *TENTokenEIP712DomainChangedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// TENTokenEIP712DomainChanged represents a EIP712DomainChanged event raised by the TENToken contract.
type TENTokenEIP712DomainChanged struct {
	Raw types.Log // Blockchain specific contextual infos
}

// FilterEIP712DomainChanged is a free log retrieval operation binding the contract event 0x0a6387c9ea3628b88a633bb4f3b151770f70085117a15f9bf3787cda53f13d31.
//
// Solidity: event EIP712DomainChanged()
func (_TENToken *TENTokenFilterer) FilterEIP712DomainChanged(opts *bind.FilterOpts) (*TENTokenEIP712DomainChangedIterator, error) {

	logs, sub, err := _TENToken.contract.FilterLogs(opts, "EIP712DomainChanged")
	if err != nil {
		return nil, err
	}
	return &TENTokenEIP712DomainChangedIterator{contract: _TENToken.contract, event: "EIP712DomainChanged", logs: logs, sub: sub}, nil
}

// WatchEIP712DomainChanged is a free log subscription operation binding the contract event 0x0a6387c9ea3628b88a633bb4f3b151770f70085117a15f9bf3787cda53f13d31.
//
// Solidity: event EIP712DomainChanged()
func (_TENToken *TENTokenFilterer) WatchEIP712DomainChanged(opts *bind.WatchOpts, sink chan<- *TENTokenEIP712DomainChanged) (event.Subscription, error) {

	logs, sub, err := _TENToken.contract.WatchLogs(opts, "EIP712DomainChanged")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(TENTokenEIP712DomainChanged)
				if err := _TENToken.contract.UnpackLog(event, "EIP712DomainChanged", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseEIP712DomainChanged is a log parse operation binding the contract event 0x0a6387c9ea3628b88a633bb4f3b151770f70085117a15f9bf3787cda53f13d31.
//
// Solidity: event EIP712DomainChanged()
func (_TENToken *TENTokenFilterer) ParseEIP712DomainChanged(log types.Log) (*TENTokenEIP712DomainChanged, error) {
	event := new(TENTokenEIP712DomainChanged)
	if err := _TENToken.contract.UnpackLog(event, "EIP712DomainChanged", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// TENTokenInitializedIterator is returned from FilterInitialized and is used to iterate over the raw logs and unpacked data for Initialized events raised by the TENToken contract.
type TENTokenInitializedIterator struct {
	Event *TENTokenInitialized // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *TENTokenInitializedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(TENTokenInitialized)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(TENTokenInitialized)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *TENTokenInitializedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *TENTokenInitializedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// TENTokenInitialized represents a Initialized event raised by the TENToken contract.
type TENTokenInitialized struct {
	Version uint64
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterInitialized is a free log retrieval operation binding the contract event 0xc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d2.
//
// Solidity: event Initialized(uint64 version)
func (_TENToken *TENTokenFilterer) FilterInitialized(opts *bind.FilterOpts) (*TENTokenInitializedIterator, error) {

	logs, sub, err := _TENToken.contract.FilterLogs(opts, "Initialized")
	if err != nil {
		return nil, err
	}
	return &TENTokenInitializedIterator{contract: _TENToken.contract, event: "Initialized", logs: logs, sub: sub}, nil
}

// WatchInitialized is a free log subscription operation binding the contract event 0xc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d2.
//
// Solidity: event Initialized(uint64 version)
func (_TENToken *TENTokenFilterer) WatchInitialized(opts *bind.WatchOpts, sink chan<- *TENTokenInitialized) (event.Subscription, error) {

	logs, sub, err := _TENToken.contract.WatchLogs(opts, "Initialized")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(TENTokenInitialized)
				if err := _TENToken.contract.UnpackLog(event, "Initialized", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseInitialized is a log parse operation binding the contract event 0xc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d2.
//
// Solidity: event Initialized(uint64 version)
func (_TENToken *TENTokenFilterer) ParseInitialized(log types.Log) (*TENTokenInitialized, error) {
	event := new(TENTokenInitialized)
	if err := _TENToken.contract.UnpackLog(event, "Initialized", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// TENTokenOwnershipTransferredIterator is returned from FilterOwnershipTransferred and is used to iterate over the raw logs and unpacked data for OwnershipTransferred events raised by the TENToken contract.
type TENTokenOwnershipTransferredIterator struct {
	Event *TENTokenOwnershipTransferred // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *TENTokenOwnershipTransferredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(TENTokenOwnershipTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(TENTokenOwnershipTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *TENTokenOwnershipTransferredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *TENTokenOwnershipTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// TENTokenOwnershipTransferred represents a OwnershipTransferred event raised by the TENToken contract.
type TENTokenOwnershipTransferred struct {
	PreviousOwner common.Address
	NewOwner      common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterOwnershipTransferred is a free log retrieval operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_TENToken *TENTokenFilterer) FilterOwnershipTransferred(opts *bind.FilterOpts, previousOwner []common.Address, newOwner []common.Address) (*TENTokenOwnershipTransferredIterator, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _TENToken.contract.FilterLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return &TENTokenOwnershipTransferredIterator{contract: _TENToken.contract, event: "OwnershipTransferred", logs: logs, sub: sub}, nil
}

// WatchOwnershipTransferred is a free log subscription operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_TENToken *TENTokenFilterer) WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *TENTokenOwnershipTransferred, previousOwner []common.Address, newOwner []common.Address) (event.Subscription, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _TENToken.contract.WatchLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(TENTokenOwnershipTransferred)
				if err := _TENToken.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOwnershipTransferred is a log parse operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_TENToken *TENTokenFilterer) ParseOwnershipTransferred(log types.Log) (*TENTokenOwnershipTransferred, error) {
	event := new(TENTokenOwnershipTransferred)
	if err := _TENToken.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// TENTokenPausedIterator is returned from FilterPaused and is used to iterate over the raw logs and unpacked data for Paused events raised by the TENToken contract.
type TENTokenPausedIterator struct {
	Event *TENTokenPaused // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *TENTokenPausedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(TENTokenPaused)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(TENTokenPaused)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *TENTokenPausedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *TENTokenPausedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// TENTokenPaused represents a Paused event raised by the TENToken contract.
type TENTokenPaused struct {
	Account common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterPaused is a free log retrieval operation binding the contract event 0x62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258.
//
// Solidity: event Paused(address account)
func (_TENToken *TENTokenFilterer) FilterPaused(opts *bind.FilterOpts) (*TENTokenPausedIterator, error) {

	logs, sub, err := _TENToken.contract.FilterLogs(opts, "Paused")
	if err != nil {
		return nil, err
	}
	return &TENTokenPausedIterator{contract: _TENToken.contract, event: "Paused", logs: logs, sub: sub}, nil
}

// WatchPaused is a free log subscription operation binding the contract event 0x62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258.
//
// Solidity: event Paused(address account)
func (_TENToken *TENTokenFilterer) WatchPaused(opts *bind.WatchOpts, sink chan<- *TENTokenPaused) (event.Subscription, error) {

	logs, sub, err := _TENToken.contract.WatchLogs(opts, "Paused")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(TENTokenPaused)
				if err := _TENToken.contract.UnpackLog(event, "Paused", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParsePaused is a log parse operation binding the contract event 0x62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258.
//
// Solidity: event Paused(address account)
func (_TENToken *TENTokenFilterer) ParsePaused(log types.Log) (*TENTokenPaused, error) {
	event := new(TENTokenPaused)
	if err := _TENToken.contract.UnpackLog(event, "Paused", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// TENTokenTransferIterator is returned from FilterTransfer and is used to iterate over the raw logs and unpacked data for Transfer events raised by the TENToken contract.
type TENTokenTransferIterator struct {
	Event *TENTokenTransfer // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *TENTokenTransferIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(TENTokenTransfer)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(TENTokenTransfer)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *TENTokenTransferIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *TENTokenTransferIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// TENTokenTransfer represents a Transfer event raised by the TENToken contract.
type TENTokenTransfer struct {
	From  common.Address
	To    common.Address
	Value *big.Int
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterTransfer is a free log retrieval operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 value)
func (_TENToken *TENTokenFilterer) FilterTransfer(opts *bind.FilterOpts, from []common.Address, to []common.Address) (*TENTokenTransferIterator, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _TENToken.contract.FilterLogs(opts, "Transfer", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return &TENTokenTransferIterator{contract: _TENToken.contract, event: "Transfer", logs: logs, sub: sub}, nil
}

// WatchTransfer is a free log subscription operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 value)
func (_TENToken *TENTokenFilterer) WatchTransfer(opts *bind.WatchOpts, sink chan<- *TENTokenTransfer, from []common.Address, to []common.Address) (event.Subscription, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _TENToken.contract.WatchLogs(opts, "Transfer", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(TENTokenTransfer)
				if err := _TENToken.contract.UnpackLog(event, "Transfer", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTransfer is a log parse operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 value)
func (_TENToken *TENTokenFilterer) ParseTransfer(log types.Log) (*TENTokenTransfer, error) {
	event := new(TENTokenTransfer)
	if err := _TENToken.contract.UnpackLog(event, "Transfer", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// TENTokenUnpausedIterator is returned from FilterUnpaused and is used to iterate over the raw logs and unpacked data for Unpaused events raised by the TENToken contract.
type TENTokenUnpausedIterator struct {
	Event *TENTokenUnpaused // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *TENTokenUnpausedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(TENTokenUnpaused)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(TENTokenUnpaused)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *TENTokenUnpausedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *TENTokenUnpausedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// TENTokenUnpaused represents a Unpaused event raised by the TENToken contract.
type TENTokenUnpaused struct {
	Account common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterUnpaused is a free log retrieval operation binding the contract event 0x5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa.
//
// Solidity: event Unpaused(address account)
func (_TENToken *TENTokenFilterer) FilterUnpaused(opts *bind.FilterOpts) (*TENTokenUnpausedIterator, error) {

	logs, sub, err := _TENToken.contract.FilterLogs(opts, "Unpaused")
	if err != nil {
		return nil, err
	}
	return &TENTokenUnpausedIterator{contract: _TENToken.contract, event: "Unpaused", logs: logs, sub: sub}, nil
}

// WatchUnpaused is a free log subscription operation binding the contract event 0x5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa.
//
// Solidity: event Unpaused(address account)
func (_TENToken *TENTokenFilterer) WatchUnpaused(opts *bind.WatchOpts, sink chan<- *TENTokenUnpaused) (event.Subscription, error) {

	logs, sub, err := _TENToken.contract.WatchLogs(opts, "Unpaused")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(TENTokenUnpaused)
				if err := _TENToken.contract.UnpackLog(event, "Unpaused", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUnpaused is a log parse operation binding the contract event 0x5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa.
//
// Solidity: event Unpaused(address account)
func (_TENToken *TENTokenFilterer) ParseUnpaused(log types.Log) (*TENTokenUnpaused, error) {
	event := new(TENTokenUnpaused)
	if err := _TENToken.contract.UnpackLog(event, "Unpaused", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
