// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package EthereumBridge

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
	_ = abi.ConvertType
)

// EthereumBridgeMetaData contains all meta data concerning the EthereumBridge contract.
var EthereumBridgeMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[],\"name\":\"AccessControlBadConfirmation\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"neededRole\",\"type\":\"bytes32\"}],\"name\":\"AccessControlUnauthorizedAccount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidInitialization\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotInitializing\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"remoteAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"localAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"}],\"name\":\"CreatedWrappedToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"version\",\"type\":\"uint64\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferStarted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PAUSER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"UNPAUSER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"erc20Fee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantPauserRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantUnpauserRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wrappedToken\",\"type\":\"address\"}],\"name\":\"hasTokenMapping\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"messenger\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"remoteBridge\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"localToken\",\"type\":\"address\"}],\"name\":\"localToRemoteToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"remoteToken\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"messageBus\",\"outputs\":[{\"internalType\":\"contractIMessageBus\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"messenger\",\"outputs\":[{\"internalType\":\"contractICrossChainMessenger\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nonce\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"crossChainAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"}],\"name\":\"onCreateTokenCommand\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"receiveAssets\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"remoteBridgeAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"remoteToken\",\"type\":\"address\"}],\"name\":\"remoteToLocalToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"localToken\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"callerConfirmation\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokePauserRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeUnpauserRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"sendERC20\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"sendNative\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"multisig\",\"type\":\"address\"}],\"name\":\"transferUnpauserRoleToMultisig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"valueTransferFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"localToken\",\"type\":\"address\"}],\"name\":\"wrappedTokens\",\"outputs\":[{\"internalType\":\"contractWrappedERC20\",\"name\":\"wrappedToken\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]",
	Bin: "0x608060405234801561000f575f5ffd5b50610018610025565b610020610025565b610104565b5f61002e6100c5565b805490915068010000000000000000900460ff16156100605760405163f92ee8a960e01b815260040160405180910390fd5b80546001600160401b03908116146100c25780546001600160401b0319166001600160401b0390811782556040517fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d2916100b9916100ef565b60405180910390a15b50565b5f807ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a005b92915050565b6001600160401b0382168152602081016100e9565b613f4a806101115f395ff3fe60806040526004361061026c575f3560e01c80637920c98611610152578063a217fddf116100ca578063e30c39781161007e578063f2fde38b11610063578063f2fde38b146107a3578063f865af08146107c2578063fb1bb9de146107e157610292565b8063e30c39781461075c578063e63ab1e91461077057610292565b8063affed0e0116100af578063affed0e01461067e578063d547741f14610709578063d5c6b5041461072857610292565b8063a217fddf14610658578063a381c8e21461066b57610292565b80638da5cb5b116101215780639813c7b2116101065780639813c7b2146105d75780639e405b7114610610578063a1a227fa1461064457610292565b80638da5cb5b1461056057806391d148541461057457610292565b80637920c986146104fa57806379ba50971461051957806383bece4d1461052d5780638456cb591461054c57610292565b806336568abe116101e5578063485cc955116101b45780636a175390116101995780636a175390146103205780636c11c21c146104c7578063715018a6146104e657610292565b8063485cc955146104925780635c975abb146104b157610292565b806336568abe1461041f5780633cb747bf1461043e5780633f4ba83a1461045f578063458ffd631461047357610292565b80631888d7121161023c5780632540e2da116102215780632540e2da146103c25780632f2ff15d146103e1578063329687821461040057610292565b80631888d71214610360578063248a9ca31461037557610292565b80628d48e3146102aa57806301ffc9a7146102f457806307d7fb9a146103205780630f0a9a4b1461034157610292565b366102925760405162461bcd60e51b815260040161028990612020565b60405180910390fd5b60405162461bcd60e51b815260040161028990612064565b3480156102b5575f5ffd5b506102de6102c43660046120a2565b60036020525f90815260409020546001600160a01b031681565b6040516102eb91906120d5565b60405180910390f35b3480156102ff575f5ffd5b5061031361030e3660046120fe565b610814565b6040516102eb9190612123565b34801561032b575f5ffd5b5061033461087c565b6040516102eb9190612137565b34801561034c575f5ffd5b506004546102de906001600160a01b031681565b61037361036e3660046120a2565b6108e8565b005b348015610380575f5ffd5b5061033461038f366004612156565b5f9081527f02dd7bc7dec4dceedda775e58dd541e08a116c6c53815c0bd028192f7b626800602052604090206001015490565b3480156103cd575f5ffd5b506103736103dc3660046120a2565b610aad565b3480156103ec575f5ffd5b506103736103fb366004612173565b610ae6565b34801561040b575f5ffd5b5061037361041a3660046120a2565b610b29565b34801561042a575f5ffd5b50610373610439366004612173565b610b5d565b348015610449575f5ffd5b50610452610ba9565b6040516102eb91906121c6565b34801561046a575f5ffd5b50610373610c34565b34801561047e575f5ffd5b5061037361048d366004612222565b610ca2565b34801561049d575f5ffd5b506103736104ac3660046122a9565b610e18565b3480156104bc575f5ffd5b505f5460ff16610313565b3480156104d2575f5ffd5b506103736104e13660046120a2565b610fb4565b3480156104f1575f5ffd5b50610373610fe8565b348015610505575f5ffd5b506103736105143660046120a2565b611008565b348015610524575f5ffd5b5061037361108d565b348015610538575f5ffd5b506103736105473660046122c7565b6110cc565b348015610557575f5ffd5b5061037361124b565b34801561056b575f5ffd5b506102de6112a9565b34801561057f575f5ffd5b5061031361058e366004612173565b5f9182527f02dd7bc7dec4dceedda775e58dd541e08a116c6c53815c0bd028192f7b626800602090815260408084206001600160a01b0393909316845291905290205460ff1690565b3480156105e2575f5ffd5b506103136105f13660046120a2565b6001600160a01b039081165f9081526001602052604090205416151590565b34801561061b575f5ffd5b506102de61062a3660046120a2565b60026020525f90815260409020546001600160a01b031681565b34801561064f575f5ffd5b506104526112dd565b348015610663575f5ffd5b506103345f81565b6103736106793660046122c7565b61135d565b348015610689575f5ffd5b5060408051808201909152601a81527f43726f7373436861696e456e61626c656454454e2e6e6f6e63650000000000006020909101527f896d106647b57d520a34062c7c0dde769b7551e327629f69d5e9844e20c864625f527fe7fbfe9855ab39eb2e984ddc0938c4134151cf94d8a54d4770b35b584ad4bd0054610334565b348015610714575f5ffd5b50610373610723366004612173565b61159e565b348015610733575f5ffd5b506104526107423660046120a2565b60016020525f90815260409020546001600160a01b031681565b348015610767575f5ffd5b506102de6115e1565b34801561077b575f5ffd5b506103347f65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a81565b3480156107ae575f5ffd5b506103736107bd3660046120a2565b611609565b3480156107cd575f5ffd5b506103736107dc3660046120a2565b61168e565b3480156107ec575f5ffd5b506103347f427da25fe773164f88948d3e215c94b6554e2ed5e5f203a821c9f2f6131cf75a81565b5f6001600160e01b031982167f7965db0b00000000000000000000000000000000000000000000000000000000148061087657507f01ffc9a7000000000000000000000000000000000000000000000000000000006001600160e01b03198316145b92915050565b5f6108856116c2565b6001600160a01b031662a1b8156040518163ffffffff1660e01b8152600401602060405180830381865afa1580156108bf573d5f5f3e3d5ffd5b505050506040513d601f19601f820116820180604052508101906108e39190612318565b905090565b5f5460ff161561090a5760405162461bcd60e51b815260040161028990612367565b5f34116109295760405162461bcd60e51b8152600401610289906123a9565b6109316116c2565b6001600160a01b031662a1b8156040518163ffffffff1660e01b8152600401602060405180830381865afa15801561096b573d5f5f3e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061098f9190612318565b3410156109ae5760405162461bcd60e51b815260040161028990612411565b5f6109b76116c2565b6001600160a01b031662a1b8156040518163ffffffff1660e01b8152600401602060405180830381865afa1580156109f1573d5f5f3e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610a159190612318565b90505f610a22823461244e565b90505f6383bece4d60e01b5f8386604051602401610a4293929190612461565b60408051601f198184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff166001600160e01b031990931692909217909152600454909150610aa7906001600160a01b03168260025f5f886116cb565b50505050565b5f610ab781611845565b610ae17f427da25fe773164f88948d3e215c94b6554e2ed5e5f203a821c9f2f6131cf75a8361184f565b505050565b5f8281527f02dd7bc7dec4dceedda775e58dd541e08a116c6c53815c0bd028192f7b6268006020526040902060010154610b1f81611845565b610aa783836118fc565b5f610b3381611845565b610ae17f427da25fe773164f88948d3e215c94b6554e2ed5e5f203a821c9f2f6131cf75a836118fc565b6001600160a01b0381163314610b9f576040517f6697b23200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b610ae1828261184f565b60408051808201909152601e81527f43726f7373436861696e456e61626c656454454e2e6d657373656e67657200006020909101527fa8b5aada5c72138bb5566a3940e8fe06f59ef8af1e490446ba6ea7fa80395d525f9081527f3b49b3a570909bb4d324cb0ca029c61a2f4f7251edd27af783a6ad02851382005b546001600160a01b0316919050565b7f427da25fe773164f88948d3e215c94b6554e2ed5e5f203a821c9f2f6131cf75a610c5e81611845565b5f805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b604051610c9791906120d5565b60405180910390a150565b6004546001600160a01b0316610cb66119bf565b610cd25760405162461bcd60e51b8152600401610289906124e9565b806001600160a01b0316610ce46119e1565b6001600160a01b031614610d0a5760405162461bcd60e51b815260040161028990612551565b30610d13611a49565b6001600160a01b031614610d395760405162461bcd60e51b8152600401610289906125b9565b5f85858585604051610d4a90611fb9565b610d5794939291906125f4565b604051809103905ff080158015610d70573d5f5f3e3d5ffd5b506001600160a01b038082165f81815260016020908152604080832080546001600160a01b03199081168617909155600283528184208054968f169682168717905594835260039091529081902080549093169091179091555190915081907f30c05779f384e0ae9d43bbf7ec4417f28bdc53d02a35551b6eb270a9c4c71dca90610e06908a9084908b908b908b908b90612625565b60405180910390a15050505050505050565b5f610e21611a8d565b805490915060ff68010000000000000000820416159067ffffffffffffffff165f81158015610e4d5750825b90505f8267ffffffffffffffff166001148015610e695750303b155b905081158015610e77575080155b15610eae576040517ff92ee8a900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b845467ffffffffffffffff191660011785558315610ee257845468ff00000000000000001916680100000000000000001785555b6001600160a01b038716610f085760405162461bcd60e51b8152600401610289906126a6565b6001600160a01b038616610f2e5760405162461bcd60e51b8152600401610289906126e8565b610f3733611ab5565b610f4087611b6f565b600480546001600160a01b0319166001600160a01b0388161790558315610fab57845468ff0000000000000000191685556040517fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d290610fa290600190612712565b60405180910390a15b50505050505050565b5f610fbe81611845565b610ae17f65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a836118fc565b610ff0611d56565b60405162461bcd60e51b815260040161028990612778565b5f61101281611845565b6001600160a01b0382166110385760405162461bcd60e51b8152600401610289906127ba565b6110627f427da25fe773164f88948d3e215c94b6554e2ed5e5f203a821c9f2f6131cf75a3361184f565b50610ae17f427da25fe773164f88948d3e215c94b6554e2ed5e5f203a821c9f2f6131cf75a836118fc565b33806110976115e1565b6001600160a01b0316146110c0578060405163118cdaa760e01b815260040161028991906120d5565b6110c981611d8a565b50565b6004546001600160a01b03166110e06119bf565b6110fc5760405162461bcd60e51b8152600401610289906124e9565b806001600160a01b031661110e6119e1565b6001600160a01b0316146111345760405162461bcd60e51b815260040161028990612551565b3061113d611a49565b6001600160a01b0316146111635760405162461bcd60e51b8152600401610289906125b9565b5f5460ff16156111855760405162461bcd60e51b815260040161028990612367565b6001600160a01b038085165f908152600360209081526040808320548416808452600190925290912054909116806111cf5760405162461bcd60e51b815260040161028990612822565b6040517f979005ad0000000000000000000000000000000000000000000000000000000081526001600160a01b0382169063979005ad906112169087908990600401612832565b5f604051808303815f87803b15801561122d575f5ffd5b505af115801561123f573d5f5f3e3d5ffd5b50505050505050505050565b7f65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a61127581611845565b5f805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258610c8a3390565b5f807f9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c1993005b546001600160a01b031692915050565b60408051808201909152601f81527f43726f7373436861696e456e61626c656454454e2e6d657373616765427573006020909101527f3e1bb302f668bd876eab4a48b3759a1d614a1ecbcc67ee27a10c9a116878004e5f9081527f6c6664e79adefe2c614a8e3c94fc27135b7678c3722965a80d01e330dd948d00610c25565b5f5460ff161561137f5760405162461bcd60e51b815260040161028990612367565b6001600160a01b038084165f90815260016020526040902054166113b55760405162461bcd60e51b81526004016102899061287f565b5f82116113d45760405162461bcd60e51b8152600401610289906128c1565b6001600160a01b038084165f90815260016020526040908190205490517f1dd319cb0000000000000000000000000000000000000000000000000000000081529116908190631dd319cb9061142f9033908790600401612832565b5f604051808303815f87803b158015611446575f5ffd5b505af1158015611458573d5f5f3e3d5ffd5b5050506001600160a01b038086165f908152600260205260408082205490519193507f83bece4d00000000000000000000000000000000000000000000000000000000926114af9291169087908790602401612461565b60408051601f198184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff166001600160e01b03199093169290921790915290506115006116c2565b6001600160a01b031662a1b8156040518163ffffffff1660e01b8152600401602060405180830381865afa15801561153a573d5f5f3e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061155e9190612318565b34101561157d5760405162461bcd60e51b815260040161028990612929565b600454611597906001600160a01b0316825f5f5f346116cb565b5050505050565b5f8281527f02dd7bc7dec4dceedda775e58dd541e08a116c6c53815c0bd028192f7b62680060205260409020600101546115d781611845565b610aa7838361184f565b5f807f237e158222e3e6968b72b9db0d8043aacf074ad9f650f0d1606b4d82ee432c006112cd565b611611611d56565b7f237e158222e3e6968b72b9db0d8043aacf074ad9f650f0d1606b4d82ee432c0080546001600160a01b0319166001600160a01b03831690811782556116556112a9565b6001600160a01b03167f38d16b8cac22d99fc7c124b9cd0de2d3fa1faef420bfe791d8c362d765e2270060405160405180910390a35050565b5f61169881611845565b610ae17f65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a8361184f565b5f6108e36112dd565b6001600160a01b0386166116f15760405162461bcd60e51b81526004016102899061296b565b5f6040518060600160405280886001600160a01b031681526020018781526020018581525060405160200161172691906129ff565b604051602081830303815290604052905061173f6112dd565b60408051808201909152601a81527f43726f7373436861696e456e61626c656454454e2e6e6f6e63650000000000006020909101527f896d106647b57d520a34062c7c0dde769b7551e327629f69d5e9844e20c864625f526001600160a01b0316630d3fd67c837fe7fbfe9855ab39eb2e984ddc0938c4134151cf94d8a54d4770b35b584ad4bd008054905f6117d483612a10565b919050558885886040518663ffffffff1660e01b81526004016117fa9493929190612a4d565b60206040518083038185885af1158015611816573d5f5f3e3d5ffd5b50505050506040513d601f19601f8201168201806040525081019061183b9190612aad565b5050505050505050565b6110c98133611dc6565b5f8281527f02dd7bc7dec4dceedda775e58dd541e08a116c6c53815c0bd028192f7b626800602081815260408084206001600160a01b038616855290915282205460ff16156118f3575f848152602082815260408083206001600160a01b0387168085529252808320805460ff1916905551339287917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a46001915050610876565b5f915050610876565b5f8281527f02dd7bc7dec4dceedda775e58dd541e08a116c6c53815c0bd028192f7b626800602081815260408084206001600160a01b038616855290915282205460ff166118f3575f848152602082815260408083206001600160a01b03871684529091529020805460ff191660011790556119753390565b6001600160a01b0316836001600160a01b0316857f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a46001915050610876565b5f6119c8610ba9565b6001600160a01b0316336001600160a01b031614905090565b5f6119ea610ba9565b6001600160a01b03166363012de56040518163ffffffff1660e01b8152600401602060405180830381865afa158015611a25573d5f5f3e3d5ffd5b505050506040513d601f19601f820116820180604052508101906108e39190612ad5565b5f611a52610ba9565b6001600160a01b031663b859ce836040518163ffffffff1660e01b8152600401602060405180830381865afa158015611a25573d5f5f3e3d5ffd5b5f807ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00610876565b611abd611e44565b611ac5611e82565b611aef7f65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a826118fc565b50611b1a7f427da25fe773164f88948d3e215c94b6554e2ed5e5f203a821c9f2f6131cf75a826118fc565b50611b457f65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a5f611e8a565b6110c97f427da25fe773164f88948d3e215c94b6554e2ed5e5f203a821c9f2f6131cf75a5f611e8a565b60408051808201909152601e81527f43726f7373436861696e456e61626c656454454e2e6d657373656e67657200006020909101527fa8b5aada5c72138bb5566a3940e8fe06f59ef8af1e490446ba6ea7fa80395d525f527f3b49b3a570909bb4d324cb0ca029c61a2f4f7251edd27af783a6ad028513820080546001600160a01b0319166001600160a01b038316179055611c09610ba9565b6001600160a01b031663a1a227fa6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611c44573d5f5f3e3d5ffd5b505050506040513d601f19601f82011682018060405250810190611c689190612ad5565b604080518082018252601f81527f43726f7373436861696e456e61626c656454454e2e6d657373616765427573006020918201527f6c6664e79adefe2c614a8e3c94fc27135b7678c3722965a80d01e330dd948d0080546001600160a01b0319166001600160a01b0394909416939093179092558051808201909152601a81527f43726f7373436861696e456e61626c656454454e2e6e6f6e6365000000000000910152507f896d106647b57d520a34062c7c0dde769b7551e327629f69d5e9844e20c864625f9081527fe7fbfe9855ab39eb2e984ddc0938c4134151cf94d8a54d4770b35b584ad4bd0055565b33611d5f6112a9565b6001600160a01b031614611d88573360405163118cdaa760e01b815260040161028991906120d5565b565b7f237e158222e3e6968b72b9db0d8043aacf074ad9f650f0d1606b4d82ee432c0080546001600160a01b0319168155611dc282611f2b565b5050565b5f8281527f02dd7bc7dec4dceedda775e58dd541e08a116c6c53815c0bd028192f7b626800602090815260408083206001600160a01b038516845290915290205460ff16611dc25780826040517fe2517d3f000000000000000000000000000000000000000000000000000000008152600401610289929190612832565b611e4c611f9b565b611d88576040517fd7e6bcf800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b611d88611e44565b7f02dd7bc7dec4dceedda775e58dd541e08a116c6c53815c0bd028192f7b6268005f611ee3845f9081527f02dd7bc7dec4dceedda775e58dd541e08a116c6c53815c0bd028192f7b626800602052604090206001015490565b5f85815260208490526040808220600101869055519192508491839187917fbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff9190a450505050565b7f9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c19930080546001600160a01b031981166001600160a01b03848116918217845560405192169182907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0905f90a3505050565b5f611fa4611a8d565b5468010000000000000000900460ff16919050565b61142280612af383390190565b60238152602081017f436f6e747261637420646f6573206e6f7420737570706f72742072656365697681527f6528290000000000000000000000000000000000000000000000000000000000602082015290505b60400190565b6020808252810161087681611fc6565b601d8152602081017f66616c6c6261636b2829206d6574686f6420756e737570706f72746564000000815290505b60200190565b6020808252810161087681612030565b5f6001600160a01b038216610876565b61208d81612074565b81146110c9575f5ffd5b803561087681612084565b5f602082840312156120b5576120b55f5ffd5b6120bf8383612097565b9392505050565b6120cf81612074565b82525050565b6020810161087682846120c6565b6001600160e01b0319811661208d565b8035610876816120e3565b5f60208284031215612111576121115f5ffd5b6120bf83836120f3565b8015156120cf565b60208101610876828461211b565b806120cf565b602081016108768284612131565b8061208d565b803561087681612145565b5f60208284031215612169576121695f5ffd5b6120bf838361214b565b5f5f60408385031215612187576121875f5ffd5b612191848461214b565b91506121a08460208501612097565b90509250929050565b5f61087682612074565b5f610876826121a9565b6120cf816121b3565b6020810161087682846121bd565b5f5f83601f8401126121e7576121e75f5ffd5b50813567ffffffffffffffff811115612201576122015f5ffd5b60208301915083600182028301111561221b5761221b5f5ffd5b9250929050565b5f5f5f5f5f60608688031215612239576122395f5ffd5b6122438787612097565b9450602086013567ffffffffffffffff811115612261576122615f5ffd5b61226d888289016121d4565b9450945050604086013567ffffffffffffffff81111561228e5761228e5f5ffd5b61229a888289016121d4565b92509250509295509295909350565b5f5f604083850312156122bd576122bd5f5ffd5b6121918484612097565b5f5f5f606084860312156122dc576122dc5f5ffd5b6122e68585612097565b92506122f5856020860161214b565b91506123048560408601612097565b90509250925092565b805161087681612145565b5f6020828403121561232b5761232b5f5ffd5b6120bf838361230d565b60108152602081017f5061757361626c653a20706175736564000000000000000000000000000000008152905061205e565b6020808252810161087681612335565b600d8152602081017f4e6f7468696e672073656e742e000000000000000000000000000000000000008152905061205e565b6020808252810161087681612377565b602c8152602081017f496e73756666696369656e742066756e647320746f207075626c69736820766181527f6c7565207472616e7366657200000000000000000000000000000000000000006020820152905061201a565b60208082528101610876816123b9565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b8181038181111561087657610876612421565b6060810161246f82866120c6565b61247c6020830185612131565b61248960408301846120c6565b949350505050565b60308152602081017f436f6e74726163742063616c6c6572206973206e6f742074686520726567697381527f7465726564206d657373656e67657221000000000000000000000000000000006020820152905061201a565b6020808252810161087681612491565b60318152602081017f43726f737320636861696e206d65737361676520636f6d696e672066726f6d2081527f696e636f72726563742073656e646572210000000000000000000000000000006020820152905061201a565b60208082528101610876816124f9565b60318152602081017f43726f737320636861696e206d65737361676520636f6d696e672066726f6d2081527f696e636f727265637420746172676574210000000000000000000000000000006020820152905061201a565b6020808252810161087681612561565b82818337505f910152565b8183526020830192506125e88284836125c9565b50601f01601f19160190565b604080825281016126068186886125d4565b9050818103602083015261261b8184866125d4565b9695505050505050565b6080810161263382896120c6565b61264060208301886120c6565b81810360408301526126538186886125d4565b905081810360608301526126688184866125d4565b98975050505050505050565b60178152602081017f4d657373656e6765722063616e6e6f74206265203078300000000000000000008152905061205e565b6020808252810161087681612674565b601b8152602081017f52656d6f7465206272696467652063616e6e6f742062652030783000000000008152905061205e565b60208082528101610876816126b6565b5f67ffffffffffffffff8216610876565b6120cf816126f8565b602081016108768284612709565b60348152602081017f556e72656e6f756e6361626c654f776e61626c6532537465703a2063616e6e6f81527f742072656e6f756e6365206f776e6572736869700000000000000000000000006020820152905061201a565b6020808252810161087681612720565b60188152602081017f496e76616c6964206d756c7469736967206164647265737300000000000000008152905061205e565b6020808252810161087681612788565b602b8152602081017f526563656976696e672061737365747320666f7220756e6b6e6f776e2077726181527f7070656420746f6b656e210000000000000000000000000000000000000000006020820152905061201a565b60208082528101610876816127ca565b6040810161284082856120c6565b6120bf6020830184612131565b60158152602081017f4e6f206d617070696e6720666f7220746f6b656e2e00000000000000000000008152905061205e565b602080825281016108768161284d565b601e8152602081017f416d6f756e74206d7573742062652067726561746572207468616e20302e00008152905061205e565b602080825281016108768161288f565b60258152602081017f496e73756666696369656e742066756e647320746f207075626c697368206d6581527f73736167650000000000000000000000000000000000000000000000000000006020820152905061201a565b60208082528101610876816128d1565b60148152602081017f5461726765742063616e6e6f74206265203078300000000000000000000000008152905061205e565b6020808252810161087681612939565b8281835e505f910152565b5f61298f825190565b8084526020840193506129a681856020860161297b565b601f01601f19169290920192915050565b80515f9060608401906129ca85826120c6565b50602083015184820360208601526129e28282612986565b91505060408301516129f76040860182612131565b509392505050565b602080825281016120bf81846129b7565b5f60018201612a2157612a21612421565b5060010190565b67ffffffffffffffff81166120cf565b63ffffffff81166120cf565b60ff81166120cf565b60808101612a5b8287612a28565b612a686020830186612a38565b8181036040830152612a7a8185612986565b9050612a896060830184612a44565b95945050505050565b67ffffffffffffffff811661208d565b805161087681612a92565b5f60208284031215612ac057612ac05f5ffd5b6120bf8383612aa2565b805161087681612084565b5f60208284031215612ae857612ae85f5ffd5b6120bf8383612aca56fe608060405234801561000f575f5ffd5b5060405161142238038061142283398101604081905261002e9161022b565b81818181600361003e8382610378565b50600461004b8282610378565b50505050506100807fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c217753361008860201b60201c565b505050610433565b5f8281526005602090815260408083206001600160a01b038516845290915281205460ff1661012c575f8381526005602090815260408083206001600160a01b03861684529091529020805460ff191660011790556100e43390565b6001600160a01b0316826001600160a01b0316847f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a450600161012f565b505f5b92915050565b634e487b7160e01b5f52604160045260245ffd5b601f19601f83011681016001600160401b038111828210171561016e5761016e610135565b6040525050565b5f61017f60405190565b905061018b8282610149565b919050565b5f6001600160401b038211156101a8576101a8610135565b601f19601f83011660200192915050565b8281835e505f910152565b5f6101d66101d184610190565b610175565b90508281528383830111156101ec576101ec5f5ffd5b6101fa8360208301846101b9565b9392505050565b5f82601f830112610213576102135f5ffd5b81516102238482602086016101c4565b949350505050565b5f5f6040838503121561023f5761023f5f5ffd5b82516001600160401b03811115610257576102575f5ffd5b61026385828601610201565b602085015190935090506001600160401b03811115610283576102835f5ffd5b61028f85828601610201565b9150509250929050565b634e487b7160e01b5f52602260045260245ffd5b6002810460018216806102c157607f821691505b6020821081036102d3576102d3610299565b50919050565b5f61012f6102e48381565b90565b6102f0836102d9565b81545f1960089490940293841b1916921b91909117905550565b5f6103168184846102e7565b505050565b818110156103355761032d5f8261030a565b60010161031b565b5050565b601f821115610316575f818152602090206020601f8501048101602085101561035f5750805b6103716020601f86010483018261031b565b5050505050565b81516001600160401b0381111561039157610391610135565b61039b82546102ad565b6103a6828285610339565b506020601f8211600181146103d9575f83156103c25750848201515b5f19600885021c1981166002850217855550610371565b5f84815260208120601f198516915b8281101561040857878501518255602094850194600190920191016103e8565b508482101561042457838701515f19601f87166008021c191681555b50505050600202600101905550565b610fe2806104405f395ff3fe608060405234801561000f575f5ffd5b5060043610610149575f3560e01c806336568abe116100c7578063979005ad1161007d578063a9059cbb11610063578063a9059cbb146102c2578063d547741f146102d5578063dd62ed3e146102e8575f5ffd5b8063979005ad146102a8578063a217fddf146102bb575f5ffd5b806375b238fc116100ad57806375b238fc1461024157806391d148541461026857806395d89b41146102a0575f5ffd5b806336568abe1461021b57806370a082311461022e575f5ffd5b80631dd319cb1161011c578063248a9ca311610102578063248a9ca3146101d75780632f2ff15d146101f9578063313ce5671461020c575f5ffd5b80631dd319cb146101af57806323b872dd146101c4575f5ffd5b806301ffc9a71461014d57806306fdde0314610176578063095ea7b31461018b57806318160ddd1461019e575b5f5ffd5b61016061015b366004610c19565b6102fb565b60405161016d9190610c40565b60405180910390f35b61017e610393565b60405161016d9190610c8a565b610160610199366004610cd0565b610423565b6002545b60405161016d9190610d0c565b6101c26101bd366004610cd0565b61043a565b005b6101606101d2366004610d1a565b6104a4565b6101a26101e5366004610d60565b5f9081526005602052604090206001015490565b6101c2610207366004610d7d565b6104c9565b601260405161016d9190610db3565b6101c2610229366004610d7d565b6104f3565b6101a261023c366004610dc1565b61053f565b6101a27fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c2177581565b610160610276366004610d7d565b5f9182526005602090815260408084206001600160a01b0393909316845291905290205460ff1690565b61017e6105b2565b6101c26102b6366004610cd0565b6105c1565b6101a25f81565b6101606102d0366004610cd0565b6105f5565b6101c26102e3366004610d7d565b610602565b6101a26102f6366004610dde565b610626565b5f7fffffffff0000000000000000000000000000000000000000000000000000000082167f7965db0b00000000000000000000000000000000000000000000000000000000148061038d57507f01ffc9a7000000000000000000000000000000000000000000000000000000007fffffffff000000000000000000000000000000000000000000000000000000008316145b92915050565b6060600380546103a290610e10565b80601f01602080910402602001604051908101604052809291908181526020018280546103ce90610e10565b80156104195780601f106103f057610100808354040283529160200191610419565b820191905f5260205f20905b8154815290600101906020018083116103fc57829003601f168201915b5050505050905090565b5f336104308185856106de565b5060019392505050565b7fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c21775610464816106eb565b8161046e8461053f565b10156104955760405162461bcd60e51b815260040161048c90610e70565b60405180910390fd5b61049f83836106f8565b505050565b5f336104b1858285610730565b6104bc858585610794565b60019150505b9392505050565b5f828152600560205260409020600101546104e3816106eb565b6104ed83836107f1565b50505050565b6001600160a01b0381163314610535576040517f6697b23200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61049f828261089c565b5f6001600160a01b038216320361056d576001600160a01b0382165f9081526020819052604090205461038d565b6001600160a01b038216330361059a576001600160a01b0382165f9081526020819052604090205461038d565b60405162461bcd60e51b815260040161048c90610eb2565b6060600480546103a290610e10565b7fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c217756105eb816106eb565b61049f8383610921565b5f33610430818585610794565b5f8281526005602052604090206001015461061c816106eb565b6104ed838361089c565b5f326001600160a01b03841614806106465750326001600160a01b038316145b15610678576001600160a01b038084165f908152600160209081526040808320938616835292905220545b905061038d565b336001600160a01b03841614806106975750336001600160a01b038316145b156106c6576001600160a01b038084165f90815260016020908152604080832093861683529290522054610671565b60405162461bcd60e51b815260040161048c90610ec2565b61049f8383836001610955565b6106f58133610a57565b50565b6001600160a01b038216610721575f604051634b637e8f60e11b815260040161048c9190610f2c565b61072c825f83610ab6565b5050565b5f61073b8484610626565b90505f198110156104ed5781811015610786578281836040517ffb8f41b200000000000000000000000000000000000000000000000000000000815260040161048c93929190610f3a565b6104ed84848484035f610955565b6001600160a01b0383166107bd575f604051634b637e8f60e11b815260040161048c9190610f2c565b6001600160a01b0382166107e6575f60405163ec442f0560e01b815260040161048c9190610f2c565b61049f838383610ab6565b5f8281526005602090815260408083206001600160a01b038516845290915281205460ff16610895575f8381526005602090815260408083206001600160a01b03861684529091529020805460ff1916600117905561084d3390565b6001600160a01b0316826001600160a01b0316847f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a450600161038d565b505f61038d565b5f8281526005602090815260408083206001600160a01b038516845290915281205460ff1615610895575f8381526005602090815260408083206001600160a01b0386168085529252808320805460ff1916905551339286917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a450600161038d565b6001600160a01b03821661094a575f60405163ec442f0560e01b815260040161048c9190610f2c565b61072c5f8383610ab6565b6001600160a01b038416610997575f6040517fe602df0500000000000000000000000000000000000000000000000000000000815260040161048c9190610f2c565b6001600160a01b0383166109d9575f6040517f94280d6200000000000000000000000000000000000000000000000000000000815260040161048c9190610f2c565b6001600160a01b038085165f90815260016020908152604080832093871683529290522082905580156104ed57826001600160a01b0316846001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92584604051610a499190610d0c565b60405180910390a350505050565b5f8281526005602090815260408083206001600160a01b038516845290915290205460ff1661072c5780826040517fe2517d3f00000000000000000000000000000000000000000000000000000000815260040161048c929190610f6a565b6001600160a01b038316610ae0578060025f828254610ad59190610f99565b90915550610b569050565b6001600160a01b0383165f9081526020819052604090205481811015610b38578381836040517fe450d38c00000000000000000000000000000000000000000000000000000000815260040161048c93929190610f3a565b6001600160a01b0384165f9081526020819052604090209082900390555b6001600160a01b038216610b7257600280548290039055610b90565b6001600160a01b0382165f9081526020819052604090208054820190555b816001600160a01b0316836001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef83604051610bd39190610d0c565b60405180910390a3505050565b7fffffffff0000000000000000000000000000000000000000000000000000000081165b81146106f5575f5ffd5b803561038d81610be0565b5f60208284031215610c2c57610c2c5f5ffd5b6104c28383610c0e565b8015155b82525050565b6020810161038d8284610c36565b8281835e505f910152565b5f610c62825190565b808452602084019350610c79818560208601610c4e565b601f01601f19169290920192915050565b602080825281016104c28184610c59565b5f6001600160a01b03821661038d565b610c0481610c9b565b803561038d81610cab565b80610c04565b803561038d81610cbf565b5f5f60408385031215610ce457610ce45f5ffd5b610cee8484610cb4565b9150610cfd8460208501610cc5565b90509250929050565b80610c3a565b6020810161038d8284610d06565b5f5f5f60608486031215610d2f57610d2f5f5ffd5b610d398585610cb4565b9250610d488560208601610cb4565b9150610d578560408601610cc5565b90509250925092565b5f60208284031215610d7357610d735f5ffd5b6104c28383610cc5565b5f5f60408385031215610d9157610d915f5ffd5b610d9b8484610cc5565b9150610cfd8460208501610cb4565b60ff8116610c3a565b6020810161038d8284610daa565b5f60208284031215610dd457610dd45f5ffd5b6104c28383610cb4565b5f5f60408385031215610df257610df25f5ffd5b610d9b8484610cb4565b634e487b7160e01b5f52602260045260245ffd5b600281046001821680610e2457607f821691505b602082108103610e3657610e36610dfc565b50919050565b60158152602081017f496e73756666696369656e742062616c616e63652e0000000000000000000000815290505b60200190565b6020808252810161038d81610e3c565b601f8152602081017f4e6f7420616c6c6f77656420746f2072656164207468652062616c616e63650081529050610e6a565b6020808252810161038d81610e80565b6020808252810161038d81602181527f4e6f7420616c6c6f77656420746f20726561642074686520616c6c6f77616e6360208201527f6500000000000000000000000000000000000000000000000000000000000000604082015260600190565b610c3a81610c9b565b6020810161038d8284610f23565b60608101610f488286610f23565b610f556020830185610d06565b610f626040830184610d06565b949350505050565b60408101610f788285610f23565b6104c26020830184610d06565b634e487b7160e01b5f52601160045260245ffd5b8082018082111561038d5761038d610f8556fea2646970667358221220c04c1f9d8d1d8bd8b82a88ea0557c0b57242bedacf19dfd5dc0df24ccc04749064736f6c634300081c0033a26469706673582212203605d12eae0c4a337375fba03162bd6e3e93d1cbadea2ae83f7420b8113d4f3d64736f6c634300081c0033",
}

// EthereumBridgeABI is the input ABI used to generate the binding from.
// Deprecated: Use EthereumBridgeMetaData.ABI instead.
var EthereumBridgeABI = EthereumBridgeMetaData.ABI

// EthereumBridgeBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use EthereumBridgeMetaData.Bin instead.
var EthereumBridgeBin = EthereumBridgeMetaData.Bin

// DeployEthereumBridge deploys a new Ethereum contract, binding an instance of EthereumBridge to it.
func DeployEthereumBridge(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *EthereumBridge, error) {
	parsed, err := EthereumBridgeMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(EthereumBridgeBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &EthereumBridge{EthereumBridgeCaller: EthereumBridgeCaller{contract: contract}, EthereumBridgeTransactor: EthereumBridgeTransactor{contract: contract}, EthereumBridgeFilterer: EthereumBridgeFilterer{contract: contract}}, nil
}

// EthereumBridge is an auto generated Go binding around an Ethereum contract.
type EthereumBridge struct {
	EthereumBridgeCaller     // Read-only binding to the contract
	EthereumBridgeTransactor // Write-only binding to the contract
	EthereumBridgeFilterer   // Log filterer for contract events
}

// EthereumBridgeCaller is an auto generated read-only Go binding around an Ethereum contract.
type EthereumBridgeCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// EthereumBridgeTransactor is an auto generated write-only Go binding around an Ethereum contract.
type EthereumBridgeTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// EthereumBridgeFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type EthereumBridgeFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// EthereumBridgeSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type EthereumBridgeSession struct {
	Contract     *EthereumBridge   // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// EthereumBridgeCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type EthereumBridgeCallerSession struct {
	Contract *EthereumBridgeCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts         // Call options to use throughout this session
}

// EthereumBridgeTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type EthereumBridgeTransactorSession struct {
	Contract     *EthereumBridgeTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts         // Transaction auth options to use throughout this session
}

// EthereumBridgeRaw is an auto generated low-level Go binding around an Ethereum contract.
type EthereumBridgeRaw struct {
	Contract *EthereumBridge // Generic contract binding to access the raw methods on
}

// EthereumBridgeCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type EthereumBridgeCallerRaw struct {
	Contract *EthereumBridgeCaller // Generic read-only contract binding to access the raw methods on
}

// EthereumBridgeTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type EthereumBridgeTransactorRaw struct {
	Contract *EthereumBridgeTransactor // Generic write-only contract binding to access the raw methods on
}

// NewEthereumBridge creates a new instance of EthereumBridge, bound to a specific deployed contract.
func NewEthereumBridge(address common.Address, backend bind.ContractBackend) (*EthereumBridge, error) {
	contract, err := bindEthereumBridge(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &EthereumBridge{EthereumBridgeCaller: EthereumBridgeCaller{contract: contract}, EthereumBridgeTransactor: EthereumBridgeTransactor{contract: contract}, EthereumBridgeFilterer: EthereumBridgeFilterer{contract: contract}}, nil
}

// NewEthereumBridgeCaller creates a new read-only instance of EthereumBridge, bound to a specific deployed contract.
func NewEthereumBridgeCaller(address common.Address, caller bind.ContractCaller) (*EthereumBridgeCaller, error) {
	contract, err := bindEthereumBridge(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &EthereumBridgeCaller{contract: contract}, nil
}

// NewEthereumBridgeTransactor creates a new write-only instance of EthereumBridge, bound to a specific deployed contract.
func NewEthereumBridgeTransactor(address common.Address, transactor bind.ContractTransactor) (*EthereumBridgeTransactor, error) {
	contract, err := bindEthereumBridge(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &EthereumBridgeTransactor{contract: contract}, nil
}

// NewEthereumBridgeFilterer creates a new log filterer instance of EthereumBridge, bound to a specific deployed contract.
func NewEthereumBridgeFilterer(address common.Address, filterer bind.ContractFilterer) (*EthereumBridgeFilterer, error) {
	contract, err := bindEthereumBridge(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &EthereumBridgeFilterer{contract: contract}, nil
}

// bindEthereumBridge binds a generic wrapper to an already deployed contract.
func bindEthereumBridge(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := EthereumBridgeMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_EthereumBridge *EthereumBridgeRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _EthereumBridge.Contract.EthereumBridgeCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_EthereumBridge *EthereumBridgeRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _EthereumBridge.Contract.EthereumBridgeTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_EthereumBridge *EthereumBridgeRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _EthereumBridge.Contract.EthereumBridgeTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_EthereumBridge *EthereumBridgeCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _EthereumBridge.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_EthereumBridge *EthereumBridgeTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _EthereumBridge.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_EthereumBridge *EthereumBridgeTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _EthereumBridge.Contract.contract.Transact(opts, method, params...)
}

// DEFAULTADMINROLE is a free data retrieval call binding the contract method 0xa217fddf.
//
// Solidity: function DEFAULT_ADMIN_ROLE() view returns(bytes32)
func (_EthereumBridge *EthereumBridgeCaller) DEFAULTADMINROLE(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _EthereumBridge.contract.Call(opts, &out, "DEFAULT_ADMIN_ROLE")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// DEFAULTADMINROLE is a free data retrieval call binding the contract method 0xa217fddf.
//
// Solidity: function DEFAULT_ADMIN_ROLE() view returns(bytes32)
func (_EthereumBridge *EthereumBridgeSession) DEFAULTADMINROLE() ([32]byte, error) {
	return _EthereumBridge.Contract.DEFAULTADMINROLE(&_EthereumBridge.CallOpts)
}

// DEFAULTADMINROLE is a free data retrieval call binding the contract method 0xa217fddf.
//
// Solidity: function DEFAULT_ADMIN_ROLE() view returns(bytes32)
func (_EthereumBridge *EthereumBridgeCallerSession) DEFAULTADMINROLE() ([32]byte, error) {
	return _EthereumBridge.Contract.DEFAULTADMINROLE(&_EthereumBridge.CallOpts)
}

// PAUSERROLE is a free data retrieval call binding the contract method 0xe63ab1e9.
//
// Solidity: function PAUSER_ROLE() view returns(bytes32)
func (_EthereumBridge *EthereumBridgeCaller) PAUSERROLE(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _EthereumBridge.contract.Call(opts, &out, "PAUSER_ROLE")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// PAUSERROLE is a free data retrieval call binding the contract method 0xe63ab1e9.
//
// Solidity: function PAUSER_ROLE() view returns(bytes32)
func (_EthereumBridge *EthereumBridgeSession) PAUSERROLE() ([32]byte, error) {
	return _EthereumBridge.Contract.PAUSERROLE(&_EthereumBridge.CallOpts)
}

// PAUSERROLE is a free data retrieval call binding the contract method 0xe63ab1e9.
//
// Solidity: function PAUSER_ROLE() view returns(bytes32)
func (_EthereumBridge *EthereumBridgeCallerSession) PAUSERROLE() ([32]byte, error) {
	return _EthereumBridge.Contract.PAUSERROLE(&_EthereumBridge.CallOpts)
}

// UNPAUSERROLE is a free data retrieval call binding the contract method 0xfb1bb9de.
//
// Solidity: function UNPAUSER_ROLE() view returns(bytes32)
func (_EthereumBridge *EthereumBridgeCaller) UNPAUSERROLE(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _EthereumBridge.contract.Call(opts, &out, "UNPAUSER_ROLE")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// UNPAUSERROLE is a free data retrieval call binding the contract method 0xfb1bb9de.
//
// Solidity: function UNPAUSER_ROLE() view returns(bytes32)
func (_EthereumBridge *EthereumBridgeSession) UNPAUSERROLE() ([32]byte, error) {
	return _EthereumBridge.Contract.UNPAUSERROLE(&_EthereumBridge.CallOpts)
}

// UNPAUSERROLE is a free data retrieval call binding the contract method 0xfb1bb9de.
//
// Solidity: function UNPAUSER_ROLE() view returns(bytes32)
func (_EthereumBridge *EthereumBridgeCallerSession) UNPAUSERROLE() ([32]byte, error) {
	return _EthereumBridge.Contract.UNPAUSERROLE(&_EthereumBridge.CallOpts)
}

// Erc20Fee is a free data retrieval call binding the contract method 0x07d7fb9a.
//
// Solidity: function erc20Fee() view returns(uint256)
func (_EthereumBridge *EthereumBridgeCaller) Erc20Fee(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _EthereumBridge.contract.Call(opts, &out, "erc20Fee")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// Erc20Fee is a free data retrieval call binding the contract method 0x07d7fb9a.
//
// Solidity: function erc20Fee() view returns(uint256)
func (_EthereumBridge *EthereumBridgeSession) Erc20Fee() (*big.Int, error) {
	return _EthereumBridge.Contract.Erc20Fee(&_EthereumBridge.CallOpts)
}

// Erc20Fee is a free data retrieval call binding the contract method 0x07d7fb9a.
//
// Solidity: function erc20Fee() view returns(uint256)
func (_EthereumBridge *EthereumBridgeCallerSession) Erc20Fee() (*big.Int, error) {
	return _EthereumBridge.Contract.Erc20Fee(&_EthereumBridge.CallOpts)
}

// GetRoleAdmin is a free data retrieval call binding the contract method 0x248a9ca3.
//
// Solidity: function getRoleAdmin(bytes32 role) view returns(bytes32)
func (_EthereumBridge *EthereumBridgeCaller) GetRoleAdmin(opts *bind.CallOpts, role [32]byte) ([32]byte, error) {
	var out []interface{}
	err := _EthereumBridge.contract.Call(opts, &out, "getRoleAdmin", role)

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// GetRoleAdmin is a free data retrieval call binding the contract method 0x248a9ca3.
//
// Solidity: function getRoleAdmin(bytes32 role) view returns(bytes32)
func (_EthereumBridge *EthereumBridgeSession) GetRoleAdmin(role [32]byte) ([32]byte, error) {
	return _EthereumBridge.Contract.GetRoleAdmin(&_EthereumBridge.CallOpts, role)
}

// GetRoleAdmin is a free data retrieval call binding the contract method 0x248a9ca3.
//
// Solidity: function getRoleAdmin(bytes32 role) view returns(bytes32)
func (_EthereumBridge *EthereumBridgeCallerSession) GetRoleAdmin(role [32]byte) ([32]byte, error) {
	return _EthereumBridge.Contract.GetRoleAdmin(&_EthereumBridge.CallOpts, role)
}

// HasRole is a free data retrieval call binding the contract method 0x91d14854.
//
// Solidity: function hasRole(bytes32 role, address account) view returns(bool)
func (_EthereumBridge *EthereumBridgeCaller) HasRole(opts *bind.CallOpts, role [32]byte, account common.Address) (bool, error) {
	var out []interface{}
	err := _EthereumBridge.contract.Call(opts, &out, "hasRole", role, account)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// HasRole is a free data retrieval call binding the contract method 0x91d14854.
//
// Solidity: function hasRole(bytes32 role, address account) view returns(bool)
func (_EthereumBridge *EthereumBridgeSession) HasRole(role [32]byte, account common.Address) (bool, error) {
	return _EthereumBridge.Contract.HasRole(&_EthereumBridge.CallOpts, role, account)
}

// HasRole is a free data retrieval call binding the contract method 0x91d14854.
//
// Solidity: function hasRole(bytes32 role, address account) view returns(bool)
func (_EthereumBridge *EthereumBridgeCallerSession) HasRole(role [32]byte, account common.Address) (bool, error) {
	return _EthereumBridge.Contract.HasRole(&_EthereumBridge.CallOpts, role, account)
}

// HasTokenMapping is a free data retrieval call binding the contract method 0x9813c7b2.
//
// Solidity: function hasTokenMapping(address wrappedToken) view returns(bool)
func (_EthereumBridge *EthereumBridgeCaller) HasTokenMapping(opts *bind.CallOpts, wrappedToken common.Address) (bool, error) {
	var out []interface{}
	err := _EthereumBridge.contract.Call(opts, &out, "hasTokenMapping", wrappedToken)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// HasTokenMapping is a free data retrieval call binding the contract method 0x9813c7b2.
//
// Solidity: function hasTokenMapping(address wrappedToken) view returns(bool)
func (_EthereumBridge *EthereumBridgeSession) HasTokenMapping(wrappedToken common.Address) (bool, error) {
	return _EthereumBridge.Contract.HasTokenMapping(&_EthereumBridge.CallOpts, wrappedToken)
}

// HasTokenMapping is a free data retrieval call binding the contract method 0x9813c7b2.
//
// Solidity: function hasTokenMapping(address wrappedToken) view returns(bool)
func (_EthereumBridge *EthereumBridgeCallerSession) HasTokenMapping(wrappedToken common.Address) (bool, error) {
	return _EthereumBridge.Contract.HasTokenMapping(&_EthereumBridge.CallOpts, wrappedToken)
}

// LocalToRemoteToken is a free data retrieval call binding the contract method 0x9e405b71.
//
// Solidity: function localToRemoteToken(address localToken) view returns(address remoteToken)
func (_EthereumBridge *EthereumBridgeCaller) LocalToRemoteToken(opts *bind.CallOpts, localToken common.Address) (common.Address, error) {
	var out []interface{}
	err := _EthereumBridge.contract.Call(opts, &out, "localToRemoteToken", localToken)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// LocalToRemoteToken is a free data retrieval call binding the contract method 0x9e405b71.
//
// Solidity: function localToRemoteToken(address localToken) view returns(address remoteToken)
func (_EthereumBridge *EthereumBridgeSession) LocalToRemoteToken(localToken common.Address) (common.Address, error) {
	return _EthereumBridge.Contract.LocalToRemoteToken(&_EthereumBridge.CallOpts, localToken)
}

// LocalToRemoteToken is a free data retrieval call binding the contract method 0x9e405b71.
//
// Solidity: function localToRemoteToken(address localToken) view returns(address remoteToken)
func (_EthereumBridge *EthereumBridgeCallerSession) LocalToRemoteToken(localToken common.Address) (common.Address, error) {
	return _EthereumBridge.Contract.LocalToRemoteToken(&_EthereumBridge.CallOpts, localToken)
}

// MessageBus is a free data retrieval call binding the contract method 0xa1a227fa.
//
// Solidity: function messageBus() view returns(address)
func (_EthereumBridge *EthereumBridgeCaller) MessageBus(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _EthereumBridge.contract.Call(opts, &out, "messageBus")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// MessageBus is a free data retrieval call binding the contract method 0xa1a227fa.
//
// Solidity: function messageBus() view returns(address)
func (_EthereumBridge *EthereumBridgeSession) MessageBus() (common.Address, error) {
	return _EthereumBridge.Contract.MessageBus(&_EthereumBridge.CallOpts)
}

// MessageBus is a free data retrieval call binding the contract method 0xa1a227fa.
//
// Solidity: function messageBus() view returns(address)
func (_EthereumBridge *EthereumBridgeCallerSession) MessageBus() (common.Address, error) {
	return _EthereumBridge.Contract.MessageBus(&_EthereumBridge.CallOpts)
}

// Messenger is a free data retrieval call binding the contract method 0x3cb747bf.
//
// Solidity: function messenger() view returns(address)
func (_EthereumBridge *EthereumBridgeCaller) Messenger(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _EthereumBridge.contract.Call(opts, &out, "messenger")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Messenger is a free data retrieval call binding the contract method 0x3cb747bf.
//
// Solidity: function messenger() view returns(address)
func (_EthereumBridge *EthereumBridgeSession) Messenger() (common.Address, error) {
	return _EthereumBridge.Contract.Messenger(&_EthereumBridge.CallOpts)
}

// Messenger is a free data retrieval call binding the contract method 0x3cb747bf.
//
// Solidity: function messenger() view returns(address)
func (_EthereumBridge *EthereumBridgeCallerSession) Messenger() (common.Address, error) {
	return _EthereumBridge.Contract.Messenger(&_EthereumBridge.CallOpts)
}

// Nonce is a free data retrieval call binding the contract method 0xaffed0e0.
//
// Solidity: function nonce() view returns(uint256)
func (_EthereumBridge *EthereumBridgeCaller) Nonce(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _EthereumBridge.contract.Call(opts, &out, "nonce")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// Nonce is a free data retrieval call binding the contract method 0xaffed0e0.
//
// Solidity: function nonce() view returns(uint256)
func (_EthereumBridge *EthereumBridgeSession) Nonce() (*big.Int, error) {
	return _EthereumBridge.Contract.Nonce(&_EthereumBridge.CallOpts)
}

// Nonce is a free data retrieval call binding the contract method 0xaffed0e0.
//
// Solidity: function nonce() view returns(uint256)
func (_EthereumBridge *EthereumBridgeCallerSession) Nonce() (*big.Int, error) {
	return _EthereumBridge.Contract.Nonce(&_EthereumBridge.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_EthereumBridge *EthereumBridgeCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _EthereumBridge.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_EthereumBridge *EthereumBridgeSession) Owner() (common.Address, error) {
	return _EthereumBridge.Contract.Owner(&_EthereumBridge.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_EthereumBridge *EthereumBridgeCallerSession) Owner() (common.Address, error) {
	return _EthereumBridge.Contract.Owner(&_EthereumBridge.CallOpts)
}

// Paused is a free data retrieval call binding the contract method 0x5c975abb.
//
// Solidity: function paused() view returns(bool)
func (_EthereumBridge *EthereumBridgeCaller) Paused(opts *bind.CallOpts) (bool, error) {
	var out []interface{}
	err := _EthereumBridge.contract.Call(opts, &out, "paused")

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// Paused is a free data retrieval call binding the contract method 0x5c975abb.
//
// Solidity: function paused() view returns(bool)
func (_EthereumBridge *EthereumBridgeSession) Paused() (bool, error) {
	return _EthereumBridge.Contract.Paused(&_EthereumBridge.CallOpts)
}

// Paused is a free data retrieval call binding the contract method 0x5c975abb.
//
// Solidity: function paused() view returns(bool)
func (_EthereumBridge *EthereumBridgeCallerSession) Paused() (bool, error) {
	return _EthereumBridge.Contract.Paused(&_EthereumBridge.CallOpts)
}

// PendingOwner is a free data retrieval call binding the contract method 0xe30c3978.
//
// Solidity: function pendingOwner() view returns(address)
func (_EthereumBridge *EthereumBridgeCaller) PendingOwner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _EthereumBridge.contract.Call(opts, &out, "pendingOwner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// PendingOwner is a free data retrieval call binding the contract method 0xe30c3978.
//
// Solidity: function pendingOwner() view returns(address)
func (_EthereumBridge *EthereumBridgeSession) PendingOwner() (common.Address, error) {
	return _EthereumBridge.Contract.PendingOwner(&_EthereumBridge.CallOpts)
}

// PendingOwner is a free data retrieval call binding the contract method 0xe30c3978.
//
// Solidity: function pendingOwner() view returns(address)
func (_EthereumBridge *EthereumBridgeCallerSession) PendingOwner() (common.Address, error) {
	return _EthereumBridge.Contract.PendingOwner(&_EthereumBridge.CallOpts)
}

// RemoteBridgeAddress is a free data retrieval call binding the contract method 0x0f0a9a4b.
//
// Solidity: function remoteBridgeAddress() view returns(address)
func (_EthereumBridge *EthereumBridgeCaller) RemoteBridgeAddress(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _EthereumBridge.contract.Call(opts, &out, "remoteBridgeAddress")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// RemoteBridgeAddress is a free data retrieval call binding the contract method 0x0f0a9a4b.
//
// Solidity: function remoteBridgeAddress() view returns(address)
func (_EthereumBridge *EthereumBridgeSession) RemoteBridgeAddress() (common.Address, error) {
	return _EthereumBridge.Contract.RemoteBridgeAddress(&_EthereumBridge.CallOpts)
}

// RemoteBridgeAddress is a free data retrieval call binding the contract method 0x0f0a9a4b.
//
// Solidity: function remoteBridgeAddress() view returns(address)
func (_EthereumBridge *EthereumBridgeCallerSession) RemoteBridgeAddress() (common.Address, error) {
	return _EthereumBridge.Contract.RemoteBridgeAddress(&_EthereumBridge.CallOpts)
}

// RemoteToLocalToken is a free data retrieval call binding the contract method 0x008d48e3.
//
// Solidity: function remoteToLocalToken(address remoteToken) view returns(address localToken)
func (_EthereumBridge *EthereumBridgeCaller) RemoteToLocalToken(opts *bind.CallOpts, remoteToken common.Address) (common.Address, error) {
	var out []interface{}
	err := _EthereumBridge.contract.Call(opts, &out, "remoteToLocalToken", remoteToken)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// RemoteToLocalToken is a free data retrieval call binding the contract method 0x008d48e3.
//
// Solidity: function remoteToLocalToken(address remoteToken) view returns(address localToken)
func (_EthereumBridge *EthereumBridgeSession) RemoteToLocalToken(remoteToken common.Address) (common.Address, error) {
	return _EthereumBridge.Contract.RemoteToLocalToken(&_EthereumBridge.CallOpts, remoteToken)
}

// RemoteToLocalToken is a free data retrieval call binding the contract method 0x008d48e3.
//
// Solidity: function remoteToLocalToken(address remoteToken) view returns(address localToken)
func (_EthereumBridge *EthereumBridgeCallerSession) RemoteToLocalToken(remoteToken common.Address) (common.Address, error) {
	return _EthereumBridge.Contract.RemoteToLocalToken(&_EthereumBridge.CallOpts, remoteToken)
}

// RenounceOwnership is a free data retrieval call binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() view returns()
func (_EthereumBridge *EthereumBridgeCaller) RenounceOwnership(opts *bind.CallOpts) error {
	var out []interface{}
	err := _EthereumBridge.contract.Call(opts, &out, "renounceOwnership")

	if err != nil {
		return err
	}

	return err

}

// RenounceOwnership is a free data retrieval call binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() view returns()
func (_EthereumBridge *EthereumBridgeSession) RenounceOwnership() error {
	return _EthereumBridge.Contract.RenounceOwnership(&_EthereumBridge.CallOpts)
}

// RenounceOwnership is a free data retrieval call binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() view returns()
func (_EthereumBridge *EthereumBridgeCallerSession) RenounceOwnership() error {
	return _EthereumBridge.Contract.RenounceOwnership(&_EthereumBridge.CallOpts)
}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_EthereumBridge *EthereumBridgeCaller) SupportsInterface(opts *bind.CallOpts, interfaceId [4]byte) (bool, error) {
	var out []interface{}
	err := _EthereumBridge.contract.Call(opts, &out, "supportsInterface", interfaceId)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_EthereumBridge *EthereumBridgeSession) SupportsInterface(interfaceId [4]byte) (bool, error) {
	return _EthereumBridge.Contract.SupportsInterface(&_EthereumBridge.CallOpts, interfaceId)
}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_EthereumBridge *EthereumBridgeCallerSession) SupportsInterface(interfaceId [4]byte) (bool, error) {
	return _EthereumBridge.Contract.SupportsInterface(&_EthereumBridge.CallOpts, interfaceId)
}

// ValueTransferFee is a free data retrieval call binding the contract method 0x6a175390.
//
// Solidity: function valueTransferFee() view returns(uint256)
func (_EthereumBridge *EthereumBridgeCaller) ValueTransferFee(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _EthereumBridge.contract.Call(opts, &out, "valueTransferFee")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// ValueTransferFee is a free data retrieval call binding the contract method 0x6a175390.
//
// Solidity: function valueTransferFee() view returns(uint256)
func (_EthereumBridge *EthereumBridgeSession) ValueTransferFee() (*big.Int, error) {
	return _EthereumBridge.Contract.ValueTransferFee(&_EthereumBridge.CallOpts)
}

// ValueTransferFee is a free data retrieval call binding the contract method 0x6a175390.
//
// Solidity: function valueTransferFee() view returns(uint256)
func (_EthereumBridge *EthereumBridgeCallerSession) ValueTransferFee() (*big.Int, error) {
	return _EthereumBridge.Contract.ValueTransferFee(&_EthereumBridge.CallOpts)
}

// WrappedTokens is a free data retrieval call binding the contract method 0xd5c6b504.
//
// Solidity: function wrappedTokens(address localToken) view returns(address wrappedToken)
func (_EthereumBridge *EthereumBridgeCaller) WrappedTokens(opts *bind.CallOpts, localToken common.Address) (common.Address, error) {
	var out []interface{}
	err := _EthereumBridge.contract.Call(opts, &out, "wrappedTokens", localToken)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// WrappedTokens is a free data retrieval call binding the contract method 0xd5c6b504.
//
// Solidity: function wrappedTokens(address localToken) view returns(address wrappedToken)
func (_EthereumBridge *EthereumBridgeSession) WrappedTokens(localToken common.Address) (common.Address, error) {
	return _EthereumBridge.Contract.WrappedTokens(&_EthereumBridge.CallOpts, localToken)
}

// WrappedTokens is a free data retrieval call binding the contract method 0xd5c6b504.
//
// Solidity: function wrappedTokens(address localToken) view returns(address wrappedToken)
func (_EthereumBridge *EthereumBridgeCallerSession) WrappedTokens(localToken common.Address) (common.Address, error) {
	return _EthereumBridge.Contract.WrappedTokens(&_EthereumBridge.CallOpts, localToken)
}

// AcceptOwnership is a paid mutator transaction binding the contract method 0x79ba5097.
//
// Solidity: function acceptOwnership() returns()
func (_EthereumBridge *EthereumBridgeTransactor) AcceptOwnership(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _EthereumBridge.contract.Transact(opts, "acceptOwnership")
}

// AcceptOwnership is a paid mutator transaction binding the contract method 0x79ba5097.
//
// Solidity: function acceptOwnership() returns()
func (_EthereumBridge *EthereumBridgeSession) AcceptOwnership() (*types.Transaction, error) {
	return _EthereumBridge.Contract.AcceptOwnership(&_EthereumBridge.TransactOpts)
}

// AcceptOwnership is a paid mutator transaction binding the contract method 0x79ba5097.
//
// Solidity: function acceptOwnership() returns()
func (_EthereumBridge *EthereumBridgeTransactorSession) AcceptOwnership() (*types.Transaction, error) {
	return _EthereumBridge.Contract.AcceptOwnership(&_EthereumBridge.TransactOpts)
}

// GrantPauserRole is a paid mutator transaction binding the contract method 0x6c11c21c.
//
// Solidity: function grantPauserRole(address account) returns()
func (_EthereumBridge *EthereumBridgeTransactor) GrantPauserRole(opts *bind.TransactOpts, account common.Address) (*types.Transaction, error) {
	return _EthereumBridge.contract.Transact(opts, "grantPauserRole", account)
}

// GrantPauserRole is a paid mutator transaction binding the contract method 0x6c11c21c.
//
// Solidity: function grantPauserRole(address account) returns()
func (_EthereumBridge *EthereumBridgeSession) GrantPauserRole(account common.Address) (*types.Transaction, error) {
	return _EthereumBridge.Contract.GrantPauserRole(&_EthereumBridge.TransactOpts, account)
}

// GrantPauserRole is a paid mutator transaction binding the contract method 0x6c11c21c.
//
// Solidity: function grantPauserRole(address account) returns()
func (_EthereumBridge *EthereumBridgeTransactorSession) GrantPauserRole(account common.Address) (*types.Transaction, error) {
	return _EthereumBridge.Contract.GrantPauserRole(&_EthereumBridge.TransactOpts, account)
}

// GrantRole is a paid mutator transaction binding the contract method 0x2f2ff15d.
//
// Solidity: function grantRole(bytes32 role, address account) returns()
func (_EthereumBridge *EthereumBridgeTransactor) GrantRole(opts *bind.TransactOpts, role [32]byte, account common.Address) (*types.Transaction, error) {
	return _EthereumBridge.contract.Transact(opts, "grantRole", role, account)
}

// GrantRole is a paid mutator transaction binding the contract method 0x2f2ff15d.
//
// Solidity: function grantRole(bytes32 role, address account) returns()
func (_EthereumBridge *EthereumBridgeSession) GrantRole(role [32]byte, account common.Address) (*types.Transaction, error) {
	return _EthereumBridge.Contract.GrantRole(&_EthereumBridge.TransactOpts, role, account)
}

// GrantRole is a paid mutator transaction binding the contract method 0x2f2ff15d.
//
// Solidity: function grantRole(bytes32 role, address account) returns()
func (_EthereumBridge *EthereumBridgeTransactorSession) GrantRole(role [32]byte, account common.Address) (*types.Transaction, error) {
	return _EthereumBridge.Contract.GrantRole(&_EthereumBridge.TransactOpts, role, account)
}

// GrantUnpauserRole is a paid mutator transaction binding the contract method 0x32968782.
//
// Solidity: function grantUnpauserRole(address account) returns()
func (_EthereumBridge *EthereumBridgeTransactor) GrantUnpauserRole(opts *bind.TransactOpts, account common.Address) (*types.Transaction, error) {
	return _EthereumBridge.contract.Transact(opts, "grantUnpauserRole", account)
}

// GrantUnpauserRole is a paid mutator transaction binding the contract method 0x32968782.
//
// Solidity: function grantUnpauserRole(address account) returns()
func (_EthereumBridge *EthereumBridgeSession) GrantUnpauserRole(account common.Address) (*types.Transaction, error) {
	return _EthereumBridge.Contract.GrantUnpauserRole(&_EthereumBridge.TransactOpts, account)
}

// GrantUnpauserRole is a paid mutator transaction binding the contract method 0x32968782.
//
// Solidity: function grantUnpauserRole(address account) returns()
func (_EthereumBridge *EthereumBridgeTransactorSession) GrantUnpauserRole(account common.Address) (*types.Transaction, error) {
	return _EthereumBridge.Contract.GrantUnpauserRole(&_EthereumBridge.TransactOpts, account)
}

// Initialize is a paid mutator transaction binding the contract method 0x485cc955.
//
// Solidity: function initialize(address messenger, address remoteBridge) returns()
func (_EthereumBridge *EthereumBridgeTransactor) Initialize(opts *bind.TransactOpts, messenger common.Address, remoteBridge common.Address) (*types.Transaction, error) {
	return _EthereumBridge.contract.Transact(opts, "initialize", messenger, remoteBridge)
}

// Initialize is a paid mutator transaction binding the contract method 0x485cc955.
//
// Solidity: function initialize(address messenger, address remoteBridge) returns()
func (_EthereumBridge *EthereumBridgeSession) Initialize(messenger common.Address, remoteBridge common.Address) (*types.Transaction, error) {
	return _EthereumBridge.Contract.Initialize(&_EthereumBridge.TransactOpts, messenger, remoteBridge)
}

// Initialize is a paid mutator transaction binding the contract method 0x485cc955.
//
// Solidity: function initialize(address messenger, address remoteBridge) returns()
func (_EthereumBridge *EthereumBridgeTransactorSession) Initialize(messenger common.Address, remoteBridge common.Address) (*types.Transaction, error) {
	return _EthereumBridge.Contract.Initialize(&_EthereumBridge.TransactOpts, messenger, remoteBridge)
}

// OnCreateTokenCommand is a paid mutator transaction binding the contract method 0x458ffd63.
//
// Solidity: function onCreateTokenCommand(address crossChainAddress, string name, string symbol) returns()
func (_EthereumBridge *EthereumBridgeTransactor) OnCreateTokenCommand(opts *bind.TransactOpts, crossChainAddress common.Address, name string, symbol string) (*types.Transaction, error) {
	return _EthereumBridge.contract.Transact(opts, "onCreateTokenCommand", crossChainAddress, name, symbol)
}

// OnCreateTokenCommand is a paid mutator transaction binding the contract method 0x458ffd63.
//
// Solidity: function onCreateTokenCommand(address crossChainAddress, string name, string symbol) returns()
func (_EthereumBridge *EthereumBridgeSession) OnCreateTokenCommand(crossChainAddress common.Address, name string, symbol string) (*types.Transaction, error) {
	return _EthereumBridge.Contract.OnCreateTokenCommand(&_EthereumBridge.TransactOpts, crossChainAddress, name, symbol)
}

// OnCreateTokenCommand is a paid mutator transaction binding the contract method 0x458ffd63.
//
// Solidity: function onCreateTokenCommand(address crossChainAddress, string name, string symbol) returns()
func (_EthereumBridge *EthereumBridgeTransactorSession) OnCreateTokenCommand(crossChainAddress common.Address, name string, symbol string) (*types.Transaction, error) {
	return _EthereumBridge.Contract.OnCreateTokenCommand(&_EthereumBridge.TransactOpts, crossChainAddress, name, symbol)
}

// Pause is a paid mutator transaction binding the contract method 0x8456cb59.
//
// Solidity: function pause() returns()
func (_EthereumBridge *EthereumBridgeTransactor) Pause(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _EthereumBridge.contract.Transact(opts, "pause")
}

// Pause is a paid mutator transaction binding the contract method 0x8456cb59.
//
// Solidity: function pause() returns()
func (_EthereumBridge *EthereumBridgeSession) Pause() (*types.Transaction, error) {
	return _EthereumBridge.Contract.Pause(&_EthereumBridge.TransactOpts)
}

// Pause is a paid mutator transaction binding the contract method 0x8456cb59.
//
// Solidity: function pause() returns()
func (_EthereumBridge *EthereumBridgeTransactorSession) Pause() (*types.Transaction, error) {
	return _EthereumBridge.Contract.Pause(&_EthereumBridge.TransactOpts)
}

// ReceiveAssets is a paid mutator transaction binding the contract method 0x83bece4d.
//
// Solidity: function receiveAssets(address asset, uint256 amount, address receiver) returns()
func (_EthereumBridge *EthereumBridgeTransactor) ReceiveAssets(opts *bind.TransactOpts, asset common.Address, amount *big.Int, receiver common.Address) (*types.Transaction, error) {
	return _EthereumBridge.contract.Transact(opts, "receiveAssets", asset, amount, receiver)
}

// ReceiveAssets is a paid mutator transaction binding the contract method 0x83bece4d.
//
// Solidity: function receiveAssets(address asset, uint256 amount, address receiver) returns()
func (_EthereumBridge *EthereumBridgeSession) ReceiveAssets(asset common.Address, amount *big.Int, receiver common.Address) (*types.Transaction, error) {
	return _EthereumBridge.Contract.ReceiveAssets(&_EthereumBridge.TransactOpts, asset, amount, receiver)
}

// ReceiveAssets is a paid mutator transaction binding the contract method 0x83bece4d.
//
// Solidity: function receiveAssets(address asset, uint256 amount, address receiver) returns()
func (_EthereumBridge *EthereumBridgeTransactorSession) ReceiveAssets(asset common.Address, amount *big.Int, receiver common.Address) (*types.Transaction, error) {
	return _EthereumBridge.Contract.ReceiveAssets(&_EthereumBridge.TransactOpts, asset, amount, receiver)
}

// RenounceRole is a paid mutator transaction binding the contract method 0x36568abe.
//
// Solidity: function renounceRole(bytes32 role, address callerConfirmation) returns()
func (_EthereumBridge *EthereumBridgeTransactor) RenounceRole(opts *bind.TransactOpts, role [32]byte, callerConfirmation common.Address) (*types.Transaction, error) {
	return _EthereumBridge.contract.Transact(opts, "renounceRole", role, callerConfirmation)
}

// RenounceRole is a paid mutator transaction binding the contract method 0x36568abe.
//
// Solidity: function renounceRole(bytes32 role, address callerConfirmation) returns()
func (_EthereumBridge *EthereumBridgeSession) RenounceRole(role [32]byte, callerConfirmation common.Address) (*types.Transaction, error) {
	return _EthereumBridge.Contract.RenounceRole(&_EthereumBridge.TransactOpts, role, callerConfirmation)
}

// RenounceRole is a paid mutator transaction binding the contract method 0x36568abe.
//
// Solidity: function renounceRole(bytes32 role, address callerConfirmation) returns()
func (_EthereumBridge *EthereumBridgeTransactorSession) RenounceRole(role [32]byte, callerConfirmation common.Address) (*types.Transaction, error) {
	return _EthereumBridge.Contract.RenounceRole(&_EthereumBridge.TransactOpts, role, callerConfirmation)
}

// RevokePauserRole is a paid mutator transaction binding the contract method 0xf865af08.
//
// Solidity: function revokePauserRole(address account) returns()
func (_EthereumBridge *EthereumBridgeTransactor) RevokePauserRole(opts *bind.TransactOpts, account common.Address) (*types.Transaction, error) {
	return _EthereumBridge.contract.Transact(opts, "revokePauserRole", account)
}

// RevokePauserRole is a paid mutator transaction binding the contract method 0xf865af08.
//
// Solidity: function revokePauserRole(address account) returns()
func (_EthereumBridge *EthereumBridgeSession) RevokePauserRole(account common.Address) (*types.Transaction, error) {
	return _EthereumBridge.Contract.RevokePauserRole(&_EthereumBridge.TransactOpts, account)
}

// RevokePauserRole is a paid mutator transaction binding the contract method 0xf865af08.
//
// Solidity: function revokePauserRole(address account) returns()
func (_EthereumBridge *EthereumBridgeTransactorSession) RevokePauserRole(account common.Address) (*types.Transaction, error) {
	return _EthereumBridge.Contract.RevokePauserRole(&_EthereumBridge.TransactOpts, account)
}

// RevokeRole is a paid mutator transaction binding the contract method 0xd547741f.
//
// Solidity: function revokeRole(bytes32 role, address account) returns()
func (_EthereumBridge *EthereumBridgeTransactor) RevokeRole(opts *bind.TransactOpts, role [32]byte, account common.Address) (*types.Transaction, error) {
	return _EthereumBridge.contract.Transact(opts, "revokeRole", role, account)
}

// RevokeRole is a paid mutator transaction binding the contract method 0xd547741f.
//
// Solidity: function revokeRole(bytes32 role, address account) returns()
func (_EthereumBridge *EthereumBridgeSession) RevokeRole(role [32]byte, account common.Address) (*types.Transaction, error) {
	return _EthereumBridge.Contract.RevokeRole(&_EthereumBridge.TransactOpts, role, account)
}

// RevokeRole is a paid mutator transaction binding the contract method 0xd547741f.
//
// Solidity: function revokeRole(bytes32 role, address account) returns()
func (_EthereumBridge *EthereumBridgeTransactorSession) RevokeRole(role [32]byte, account common.Address) (*types.Transaction, error) {
	return _EthereumBridge.Contract.RevokeRole(&_EthereumBridge.TransactOpts, role, account)
}

// RevokeUnpauserRole is a paid mutator transaction binding the contract method 0x2540e2da.
//
// Solidity: function revokeUnpauserRole(address account) returns()
func (_EthereumBridge *EthereumBridgeTransactor) RevokeUnpauserRole(opts *bind.TransactOpts, account common.Address) (*types.Transaction, error) {
	return _EthereumBridge.contract.Transact(opts, "revokeUnpauserRole", account)
}

// RevokeUnpauserRole is a paid mutator transaction binding the contract method 0x2540e2da.
//
// Solidity: function revokeUnpauserRole(address account) returns()
func (_EthereumBridge *EthereumBridgeSession) RevokeUnpauserRole(account common.Address) (*types.Transaction, error) {
	return _EthereumBridge.Contract.RevokeUnpauserRole(&_EthereumBridge.TransactOpts, account)
}

// RevokeUnpauserRole is a paid mutator transaction binding the contract method 0x2540e2da.
//
// Solidity: function revokeUnpauserRole(address account) returns()
func (_EthereumBridge *EthereumBridgeTransactorSession) RevokeUnpauserRole(account common.Address) (*types.Transaction, error) {
	return _EthereumBridge.Contract.RevokeUnpauserRole(&_EthereumBridge.TransactOpts, account)
}

// SendERC20 is a paid mutator transaction binding the contract method 0xa381c8e2.
//
// Solidity: function sendERC20(address asset, uint256 amount, address receiver) payable returns()
func (_EthereumBridge *EthereumBridgeTransactor) SendERC20(opts *bind.TransactOpts, asset common.Address, amount *big.Int, receiver common.Address) (*types.Transaction, error) {
	return _EthereumBridge.contract.Transact(opts, "sendERC20", asset, amount, receiver)
}

// SendERC20 is a paid mutator transaction binding the contract method 0xa381c8e2.
//
// Solidity: function sendERC20(address asset, uint256 amount, address receiver) payable returns()
func (_EthereumBridge *EthereumBridgeSession) SendERC20(asset common.Address, amount *big.Int, receiver common.Address) (*types.Transaction, error) {
	return _EthereumBridge.Contract.SendERC20(&_EthereumBridge.TransactOpts, asset, amount, receiver)
}

// SendERC20 is a paid mutator transaction binding the contract method 0xa381c8e2.
//
// Solidity: function sendERC20(address asset, uint256 amount, address receiver) payable returns()
func (_EthereumBridge *EthereumBridgeTransactorSession) SendERC20(asset common.Address, amount *big.Int, receiver common.Address) (*types.Transaction, error) {
	return _EthereumBridge.Contract.SendERC20(&_EthereumBridge.TransactOpts, asset, amount, receiver)
}

// SendNative is a paid mutator transaction binding the contract method 0x1888d712.
//
// Solidity: function sendNative(address receiver) payable returns()
func (_EthereumBridge *EthereumBridgeTransactor) SendNative(opts *bind.TransactOpts, receiver common.Address) (*types.Transaction, error) {
	return _EthereumBridge.contract.Transact(opts, "sendNative", receiver)
}

// SendNative is a paid mutator transaction binding the contract method 0x1888d712.
//
// Solidity: function sendNative(address receiver) payable returns()
func (_EthereumBridge *EthereumBridgeSession) SendNative(receiver common.Address) (*types.Transaction, error) {
	return _EthereumBridge.Contract.SendNative(&_EthereumBridge.TransactOpts, receiver)
}

// SendNative is a paid mutator transaction binding the contract method 0x1888d712.
//
// Solidity: function sendNative(address receiver) payable returns()
func (_EthereumBridge *EthereumBridgeTransactorSession) SendNative(receiver common.Address) (*types.Transaction, error) {
	return _EthereumBridge.Contract.SendNative(&_EthereumBridge.TransactOpts, receiver)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_EthereumBridge *EthereumBridgeTransactor) TransferOwnership(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _EthereumBridge.contract.Transact(opts, "transferOwnership", newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_EthereumBridge *EthereumBridgeSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _EthereumBridge.Contract.TransferOwnership(&_EthereumBridge.TransactOpts, newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_EthereumBridge *EthereumBridgeTransactorSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _EthereumBridge.Contract.TransferOwnership(&_EthereumBridge.TransactOpts, newOwner)
}

// TransferUnpauserRoleToMultisig is a paid mutator transaction binding the contract method 0x7920c986.
//
// Solidity: function transferUnpauserRoleToMultisig(address multisig) returns()
func (_EthereumBridge *EthereumBridgeTransactor) TransferUnpauserRoleToMultisig(opts *bind.TransactOpts, multisig common.Address) (*types.Transaction, error) {
	return _EthereumBridge.contract.Transact(opts, "transferUnpauserRoleToMultisig", multisig)
}

// TransferUnpauserRoleToMultisig is a paid mutator transaction binding the contract method 0x7920c986.
//
// Solidity: function transferUnpauserRoleToMultisig(address multisig) returns()
func (_EthereumBridge *EthereumBridgeSession) TransferUnpauserRoleToMultisig(multisig common.Address) (*types.Transaction, error) {
	return _EthereumBridge.Contract.TransferUnpauserRoleToMultisig(&_EthereumBridge.TransactOpts, multisig)
}

// TransferUnpauserRoleToMultisig is a paid mutator transaction binding the contract method 0x7920c986.
//
// Solidity: function transferUnpauserRoleToMultisig(address multisig) returns()
func (_EthereumBridge *EthereumBridgeTransactorSession) TransferUnpauserRoleToMultisig(multisig common.Address) (*types.Transaction, error) {
	return _EthereumBridge.Contract.TransferUnpauserRoleToMultisig(&_EthereumBridge.TransactOpts, multisig)
}

// Unpause is a paid mutator transaction binding the contract method 0x3f4ba83a.
//
// Solidity: function unpause() returns()
func (_EthereumBridge *EthereumBridgeTransactor) Unpause(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _EthereumBridge.contract.Transact(opts, "unpause")
}

// Unpause is a paid mutator transaction binding the contract method 0x3f4ba83a.
//
// Solidity: function unpause() returns()
func (_EthereumBridge *EthereumBridgeSession) Unpause() (*types.Transaction, error) {
	return _EthereumBridge.Contract.Unpause(&_EthereumBridge.TransactOpts)
}

// Unpause is a paid mutator transaction binding the contract method 0x3f4ba83a.
//
// Solidity: function unpause() returns()
func (_EthereumBridge *EthereumBridgeTransactorSession) Unpause() (*types.Transaction, error) {
	return _EthereumBridge.Contract.Unpause(&_EthereumBridge.TransactOpts)
}

// Fallback is a paid mutator transaction binding the contract fallback function.
//
// Solidity: fallback() payable returns()
func (_EthereumBridge *EthereumBridgeTransactor) Fallback(opts *bind.TransactOpts, calldata []byte) (*types.Transaction, error) {
	return _EthereumBridge.contract.RawTransact(opts, calldata)
}

// Fallback is a paid mutator transaction binding the contract fallback function.
//
// Solidity: fallback() payable returns()
func (_EthereumBridge *EthereumBridgeSession) Fallback(calldata []byte) (*types.Transaction, error) {
	return _EthereumBridge.Contract.Fallback(&_EthereumBridge.TransactOpts, calldata)
}

// Fallback is a paid mutator transaction binding the contract fallback function.
//
// Solidity: fallback() payable returns()
func (_EthereumBridge *EthereumBridgeTransactorSession) Fallback(calldata []byte) (*types.Transaction, error) {
	return _EthereumBridge.Contract.Fallback(&_EthereumBridge.TransactOpts, calldata)
}

// Receive is a paid mutator transaction binding the contract receive function.
//
// Solidity: receive() payable returns()
func (_EthereumBridge *EthereumBridgeTransactor) Receive(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _EthereumBridge.contract.RawTransact(opts, nil) // calldata is disallowed for receive function
}

// Receive is a paid mutator transaction binding the contract receive function.
//
// Solidity: receive() payable returns()
func (_EthereumBridge *EthereumBridgeSession) Receive() (*types.Transaction, error) {
	return _EthereumBridge.Contract.Receive(&_EthereumBridge.TransactOpts)
}

// Receive is a paid mutator transaction binding the contract receive function.
//
// Solidity: receive() payable returns()
func (_EthereumBridge *EthereumBridgeTransactorSession) Receive() (*types.Transaction, error) {
	return _EthereumBridge.Contract.Receive(&_EthereumBridge.TransactOpts)
}

// EthereumBridgeCreatedWrappedTokenIterator is returned from FilterCreatedWrappedToken and is used to iterate over the raw logs and unpacked data for CreatedWrappedToken events raised by the EthereumBridge contract.
type EthereumBridgeCreatedWrappedTokenIterator struct {
	Event *EthereumBridgeCreatedWrappedToken // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *EthereumBridgeCreatedWrappedTokenIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(EthereumBridgeCreatedWrappedToken)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(EthereumBridgeCreatedWrappedToken)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *EthereumBridgeCreatedWrappedTokenIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *EthereumBridgeCreatedWrappedTokenIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// EthereumBridgeCreatedWrappedToken represents a CreatedWrappedToken event raised by the EthereumBridge contract.
type EthereumBridgeCreatedWrappedToken struct {
	RemoteAddress common.Address
	LocalAddress  common.Address
	Name          string
	Symbol        string
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterCreatedWrappedToken is a free log retrieval operation binding the contract event 0x30c05779f384e0ae9d43bbf7ec4417f28bdc53d02a35551b6eb270a9c4c71dca.
//
// Solidity: event CreatedWrappedToken(address remoteAddress, address localAddress, string name, string symbol)
func (_EthereumBridge *EthereumBridgeFilterer) FilterCreatedWrappedToken(opts *bind.FilterOpts) (*EthereumBridgeCreatedWrappedTokenIterator, error) {

	logs, sub, err := _EthereumBridge.contract.FilterLogs(opts, "CreatedWrappedToken")
	if err != nil {
		return nil, err
	}
	return &EthereumBridgeCreatedWrappedTokenIterator{contract: _EthereumBridge.contract, event: "CreatedWrappedToken", logs: logs, sub: sub}, nil
}

// WatchCreatedWrappedToken is a free log subscription operation binding the contract event 0x30c05779f384e0ae9d43bbf7ec4417f28bdc53d02a35551b6eb270a9c4c71dca.
//
// Solidity: event CreatedWrappedToken(address remoteAddress, address localAddress, string name, string symbol)
func (_EthereumBridge *EthereumBridgeFilterer) WatchCreatedWrappedToken(opts *bind.WatchOpts, sink chan<- *EthereumBridgeCreatedWrappedToken) (event.Subscription, error) {

	logs, sub, err := _EthereumBridge.contract.WatchLogs(opts, "CreatedWrappedToken")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(EthereumBridgeCreatedWrappedToken)
				if err := _EthereumBridge.contract.UnpackLog(event, "CreatedWrappedToken", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseCreatedWrappedToken is a log parse operation binding the contract event 0x30c05779f384e0ae9d43bbf7ec4417f28bdc53d02a35551b6eb270a9c4c71dca.
//
// Solidity: event CreatedWrappedToken(address remoteAddress, address localAddress, string name, string symbol)
func (_EthereumBridge *EthereumBridgeFilterer) ParseCreatedWrappedToken(log types.Log) (*EthereumBridgeCreatedWrappedToken, error) {
	event := new(EthereumBridgeCreatedWrappedToken)
	if err := _EthereumBridge.contract.UnpackLog(event, "CreatedWrappedToken", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// EthereumBridgeInitializedIterator is returned from FilterInitialized and is used to iterate over the raw logs and unpacked data for Initialized events raised by the EthereumBridge contract.
type EthereumBridgeInitializedIterator struct {
	Event *EthereumBridgeInitialized // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *EthereumBridgeInitializedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(EthereumBridgeInitialized)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(EthereumBridgeInitialized)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *EthereumBridgeInitializedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *EthereumBridgeInitializedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// EthereumBridgeInitialized represents a Initialized event raised by the EthereumBridge contract.
type EthereumBridgeInitialized struct {
	Version uint64
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterInitialized is a free log retrieval operation binding the contract event 0xc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d2.
//
// Solidity: event Initialized(uint64 version)
func (_EthereumBridge *EthereumBridgeFilterer) FilterInitialized(opts *bind.FilterOpts) (*EthereumBridgeInitializedIterator, error) {

	logs, sub, err := _EthereumBridge.contract.FilterLogs(opts, "Initialized")
	if err != nil {
		return nil, err
	}
	return &EthereumBridgeInitializedIterator{contract: _EthereumBridge.contract, event: "Initialized", logs: logs, sub: sub}, nil
}

// WatchInitialized is a free log subscription operation binding the contract event 0xc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d2.
//
// Solidity: event Initialized(uint64 version)
func (_EthereumBridge *EthereumBridgeFilterer) WatchInitialized(opts *bind.WatchOpts, sink chan<- *EthereumBridgeInitialized) (event.Subscription, error) {

	logs, sub, err := _EthereumBridge.contract.WatchLogs(opts, "Initialized")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(EthereumBridgeInitialized)
				if err := _EthereumBridge.contract.UnpackLog(event, "Initialized", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseInitialized is a log parse operation binding the contract event 0xc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d2.
//
// Solidity: event Initialized(uint64 version)
func (_EthereumBridge *EthereumBridgeFilterer) ParseInitialized(log types.Log) (*EthereumBridgeInitialized, error) {
	event := new(EthereumBridgeInitialized)
	if err := _EthereumBridge.contract.UnpackLog(event, "Initialized", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// EthereumBridgeOwnershipTransferStartedIterator is returned from FilterOwnershipTransferStarted and is used to iterate over the raw logs and unpacked data for OwnershipTransferStarted events raised by the EthereumBridge contract.
type EthereumBridgeOwnershipTransferStartedIterator struct {
	Event *EthereumBridgeOwnershipTransferStarted // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *EthereumBridgeOwnershipTransferStartedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(EthereumBridgeOwnershipTransferStarted)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(EthereumBridgeOwnershipTransferStarted)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *EthereumBridgeOwnershipTransferStartedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *EthereumBridgeOwnershipTransferStartedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// EthereumBridgeOwnershipTransferStarted represents a OwnershipTransferStarted event raised by the EthereumBridge contract.
type EthereumBridgeOwnershipTransferStarted struct {
	PreviousOwner common.Address
	NewOwner      common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterOwnershipTransferStarted is a free log retrieval operation binding the contract event 0x38d16b8cac22d99fc7c124b9cd0de2d3fa1faef420bfe791d8c362d765e22700.
//
// Solidity: event OwnershipTransferStarted(address indexed previousOwner, address indexed newOwner)
func (_EthereumBridge *EthereumBridgeFilterer) FilterOwnershipTransferStarted(opts *bind.FilterOpts, previousOwner []common.Address, newOwner []common.Address) (*EthereumBridgeOwnershipTransferStartedIterator, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _EthereumBridge.contract.FilterLogs(opts, "OwnershipTransferStarted", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return &EthereumBridgeOwnershipTransferStartedIterator{contract: _EthereumBridge.contract, event: "OwnershipTransferStarted", logs: logs, sub: sub}, nil
}

// WatchOwnershipTransferStarted is a free log subscription operation binding the contract event 0x38d16b8cac22d99fc7c124b9cd0de2d3fa1faef420bfe791d8c362d765e22700.
//
// Solidity: event OwnershipTransferStarted(address indexed previousOwner, address indexed newOwner)
func (_EthereumBridge *EthereumBridgeFilterer) WatchOwnershipTransferStarted(opts *bind.WatchOpts, sink chan<- *EthereumBridgeOwnershipTransferStarted, previousOwner []common.Address, newOwner []common.Address) (event.Subscription, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _EthereumBridge.contract.WatchLogs(opts, "OwnershipTransferStarted", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(EthereumBridgeOwnershipTransferStarted)
				if err := _EthereumBridge.contract.UnpackLog(event, "OwnershipTransferStarted", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOwnershipTransferStarted is a log parse operation binding the contract event 0x38d16b8cac22d99fc7c124b9cd0de2d3fa1faef420bfe791d8c362d765e22700.
//
// Solidity: event OwnershipTransferStarted(address indexed previousOwner, address indexed newOwner)
func (_EthereumBridge *EthereumBridgeFilterer) ParseOwnershipTransferStarted(log types.Log) (*EthereumBridgeOwnershipTransferStarted, error) {
	event := new(EthereumBridgeOwnershipTransferStarted)
	if err := _EthereumBridge.contract.UnpackLog(event, "OwnershipTransferStarted", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// EthereumBridgeOwnershipTransferredIterator is returned from FilterOwnershipTransferred and is used to iterate over the raw logs and unpacked data for OwnershipTransferred events raised by the EthereumBridge contract.
type EthereumBridgeOwnershipTransferredIterator struct {
	Event *EthereumBridgeOwnershipTransferred // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *EthereumBridgeOwnershipTransferredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(EthereumBridgeOwnershipTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(EthereumBridgeOwnershipTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *EthereumBridgeOwnershipTransferredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *EthereumBridgeOwnershipTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// EthereumBridgeOwnershipTransferred represents a OwnershipTransferred event raised by the EthereumBridge contract.
type EthereumBridgeOwnershipTransferred struct {
	PreviousOwner common.Address
	NewOwner      common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterOwnershipTransferred is a free log retrieval operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_EthereumBridge *EthereumBridgeFilterer) FilterOwnershipTransferred(opts *bind.FilterOpts, previousOwner []common.Address, newOwner []common.Address) (*EthereumBridgeOwnershipTransferredIterator, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _EthereumBridge.contract.FilterLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return &EthereumBridgeOwnershipTransferredIterator{contract: _EthereumBridge.contract, event: "OwnershipTransferred", logs: logs, sub: sub}, nil
}

// WatchOwnershipTransferred is a free log subscription operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_EthereumBridge *EthereumBridgeFilterer) WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *EthereumBridgeOwnershipTransferred, previousOwner []common.Address, newOwner []common.Address) (event.Subscription, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _EthereumBridge.contract.WatchLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(EthereumBridgeOwnershipTransferred)
				if err := _EthereumBridge.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOwnershipTransferred is a log parse operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_EthereumBridge *EthereumBridgeFilterer) ParseOwnershipTransferred(log types.Log) (*EthereumBridgeOwnershipTransferred, error) {
	event := new(EthereumBridgeOwnershipTransferred)
	if err := _EthereumBridge.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// EthereumBridgePausedIterator is returned from FilterPaused and is used to iterate over the raw logs and unpacked data for Paused events raised by the EthereumBridge contract.
type EthereumBridgePausedIterator struct {
	Event *EthereumBridgePaused // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *EthereumBridgePausedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(EthereumBridgePaused)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(EthereumBridgePaused)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *EthereumBridgePausedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *EthereumBridgePausedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// EthereumBridgePaused represents a Paused event raised by the EthereumBridge contract.
type EthereumBridgePaused struct {
	Account common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterPaused is a free log retrieval operation binding the contract event 0x62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258.
//
// Solidity: event Paused(address account)
func (_EthereumBridge *EthereumBridgeFilterer) FilterPaused(opts *bind.FilterOpts) (*EthereumBridgePausedIterator, error) {

	logs, sub, err := _EthereumBridge.contract.FilterLogs(opts, "Paused")
	if err != nil {
		return nil, err
	}
	return &EthereumBridgePausedIterator{contract: _EthereumBridge.contract, event: "Paused", logs: logs, sub: sub}, nil
}

// WatchPaused is a free log subscription operation binding the contract event 0x62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258.
//
// Solidity: event Paused(address account)
func (_EthereumBridge *EthereumBridgeFilterer) WatchPaused(opts *bind.WatchOpts, sink chan<- *EthereumBridgePaused) (event.Subscription, error) {

	logs, sub, err := _EthereumBridge.contract.WatchLogs(opts, "Paused")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(EthereumBridgePaused)
				if err := _EthereumBridge.contract.UnpackLog(event, "Paused", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParsePaused is a log parse operation binding the contract event 0x62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258.
//
// Solidity: event Paused(address account)
func (_EthereumBridge *EthereumBridgeFilterer) ParsePaused(log types.Log) (*EthereumBridgePaused, error) {
	event := new(EthereumBridgePaused)
	if err := _EthereumBridge.contract.UnpackLog(event, "Paused", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// EthereumBridgeRoleAdminChangedIterator is returned from FilterRoleAdminChanged and is used to iterate over the raw logs and unpacked data for RoleAdminChanged events raised by the EthereumBridge contract.
type EthereumBridgeRoleAdminChangedIterator struct {
	Event *EthereumBridgeRoleAdminChanged // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *EthereumBridgeRoleAdminChangedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(EthereumBridgeRoleAdminChanged)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(EthereumBridgeRoleAdminChanged)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *EthereumBridgeRoleAdminChangedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *EthereumBridgeRoleAdminChangedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// EthereumBridgeRoleAdminChanged represents a RoleAdminChanged event raised by the EthereumBridge contract.
type EthereumBridgeRoleAdminChanged struct {
	Role              [32]byte
	PreviousAdminRole [32]byte
	NewAdminRole      [32]byte
	Raw               types.Log // Blockchain specific contextual infos
}

// FilterRoleAdminChanged is a free log retrieval operation binding the contract event 0xbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff.
//
// Solidity: event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole)
func (_EthereumBridge *EthereumBridgeFilterer) FilterRoleAdminChanged(opts *bind.FilterOpts, role [][32]byte, previousAdminRole [][32]byte, newAdminRole [][32]byte) (*EthereumBridgeRoleAdminChangedIterator, error) {

	var roleRule []interface{}
	for _, roleItem := range role {
		roleRule = append(roleRule, roleItem)
	}
	var previousAdminRoleRule []interface{}
	for _, previousAdminRoleItem := range previousAdminRole {
		previousAdminRoleRule = append(previousAdminRoleRule, previousAdminRoleItem)
	}
	var newAdminRoleRule []interface{}
	for _, newAdminRoleItem := range newAdminRole {
		newAdminRoleRule = append(newAdminRoleRule, newAdminRoleItem)
	}

	logs, sub, err := _EthereumBridge.contract.FilterLogs(opts, "RoleAdminChanged", roleRule, previousAdminRoleRule, newAdminRoleRule)
	if err != nil {
		return nil, err
	}
	return &EthereumBridgeRoleAdminChangedIterator{contract: _EthereumBridge.contract, event: "RoleAdminChanged", logs: logs, sub: sub}, nil
}

// WatchRoleAdminChanged is a free log subscription operation binding the contract event 0xbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff.
//
// Solidity: event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole)
func (_EthereumBridge *EthereumBridgeFilterer) WatchRoleAdminChanged(opts *bind.WatchOpts, sink chan<- *EthereumBridgeRoleAdminChanged, role [][32]byte, previousAdminRole [][32]byte, newAdminRole [][32]byte) (event.Subscription, error) {

	var roleRule []interface{}
	for _, roleItem := range role {
		roleRule = append(roleRule, roleItem)
	}
	var previousAdminRoleRule []interface{}
	for _, previousAdminRoleItem := range previousAdminRole {
		previousAdminRoleRule = append(previousAdminRoleRule, previousAdminRoleItem)
	}
	var newAdminRoleRule []interface{}
	for _, newAdminRoleItem := range newAdminRole {
		newAdminRoleRule = append(newAdminRoleRule, newAdminRoleItem)
	}

	logs, sub, err := _EthereumBridge.contract.WatchLogs(opts, "RoleAdminChanged", roleRule, previousAdminRoleRule, newAdminRoleRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(EthereumBridgeRoleAdminChanged)
				if err := _EthereumBridge.contract.UnpackLog(event, "RoleAdminChanged", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRoleAdminChanged is a log parse operation binding the contract event 0xbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff.
//
// Solidity: event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole)
func (_EthereumBridge *EthereumBridgeFilterer) ParseRoleAdminChanged(log types.Log) (*EthereumBridgeRoleAdminChanged, error) {
	event := new(EthereumBridgeRoleAdminChanged)
	if err := _EthereumBridge.contract.UnpackLog(event, "RoleAdminChanged", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// EthereumBridgeRoleGrantedIterator is returned from FilterRoleGranted and is used to iterate over the raw logs and unpacked data for RoleGranted events raised by the EthereumBridge contract.
type EthereumBridgeRoleGrantedIterator struct {
	Event *EthereumBridgeRoleGranted // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *EthereumBridgeRoleGrantedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(EthereumBridgeRoleGranted)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(EthereumBridgeRoleGranted)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *EthereumBridgeRoleGrantedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *EthereumBridgeRoleGrantedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// EthereumBridgeRoleGranted represents a RoleGranted event raised by the EthereumBridge contract.
type EthereumBridgeRoleGranted struct {
	Role    [32]byte
	Account common.Address
	Sender  common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterRoleGranted is a free log retrieval operation binding the contract event 0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d.
//
// Solidity: event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender)
func (_EthereumBridge *EthereumBridgeFilterer) FilterRoleGranted(opts *bind.FilterOpts, role [][32]byte, account []common.Address, sender []common.Address) (*EthereumBridgeRoleGrantedIterator, error) {

	var roleRule []interface{}
	for _, roleItem := range role {
		roleRule = append(roleRule, roleItem)
	}
	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}
	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}

	logs, sub, err := _EthereumBridge.contract.FilterLogs(opts, "RoleGranted", roleRule, accountRule, senderRule)
	if err != nil {
		return nil, err
	}
	return &EthereumBridgeRoleGrantedIterator{contract: _EthereumBridge.contract, event: "RoleGranted", logs: logs, sub: sub}, nil
}

// WatchRoleGranted is a free log subscription operation binding the contract event 0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d.
//
// Solidity: event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender)
func (_EthereumBridge *EthereumBridgeFilterer) WatchRoleGranted(opts *bind.WatchOpts, sink chan<- *EthereumBridgeRoleGranted, role [][32]byte, account []common.Address, sender []common.Address) (event.Subscription, error) {

	var roleRule []interface{}
	for _, roleItem := range role {
		roleRule = append(roleRule, roleItem)
	}
	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}
	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}

	logs, sub, err := _EthereumBridge.contract.WatchLogs(opts, "RoleGranted", roleRule, accountRule, senderRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(EthereumBridgeRoleGranted)
				if err := _EthereumBridge.contract.UnpackLog(event, "RoleGranted", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRoleGranted is a log parse operation binding the contract event 0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d.
//
// Solidity: event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender)
func (_EthereumBridge *EthereumBridgeFilterer) ParseRoleGranted(log types.Log) (*EthereumBridgeRoleGranted, error) {
	event := new(EthereumBridgeRoleGranted)
	if err := _EthereumBridge.contract.UnpackLog(event, "RoleGranted", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// EthereumBridgeRoleRevokedIterator is returned from FilterRoleRevoked and is used to iterate over the raw logs and unpacked data for RoleRevoked events raised by the EthereumBridge contract.
type EthereumBridgeRoleRevokedIterator struct {
	Event *EthereumBridgeRoleRevoked // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *EthereumBridgeRoleRevokedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(EthereumBridgeRoleRevoked)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(EthereumBridgeRoleRevoked)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *EthereumBridgeRoleRevokedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *EthereumBridgeRoleRevokedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// EthereumBridgeRoleRevoked represents a RoleRevoked event raised by the EthereumBridge contract.
type EthereumBridgeRoleRevoked struct {
	Role    [32]byte
	Account common.Address
	Sender  common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterRoleRevoked is a free log retrieval operation binding the contract event 0xf6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b.
//
// Solidity: event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender)
func (_EthereumBridge *EthereumBridgeFilterer) FilterRoleRevoked(opts *bind.FilterOpts, role [][32]byte, account []common.Address, sender []common.Address) (*EthereumBridgeRoleRevokedIterator, error) {

	var roleRule []interface{}
	for _, roleItem := range role {
		roleRule = append(roleRule, roleItem)
	}
	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}
	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}

	logs, sub, err := _EthereumBridge.contract.FilterLogs(opts, "RoleRevoked", roleRule, accountRule, senderRule)
	if err != nil {
		return nil, err
	}
	return &EthereumBridgeRoleRevokedIterator{contract: _EthereumBridge.contract, event: "RoleRevoked", logs: logs, sub: sub}, nil
}

// WatchRoleRevoked is a free log subscription operation binding the contract event 0xf6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b.
//
// Solidity: event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender)
func (_EthereumBridge *EthereumBridgeFilterer) WatchRoleRevoked(opts *bind.WatchOpts, sink chan<- *EthereumBridgeRoleRevoked, role [][32]byte, account []common.Address, sender []common.Address) (event.Subscription, error) {

	var roleRule []interface{}
	for _, roleItem := range role {
		roleRule = append(roleRule, roleItem)
	}
	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}
	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}

	logs, sub, err := _EthereumBridge.contract.WatchLogs(opts, "RoleRevoked", roleRule, accountRule, senderRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(EthereumBridgeRoleRevoked)
				if err := _EthereumBridge.contract.UnpackLog(event, "RoleRevoked", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRoleRevoked is a log parse operation binding the contract event 0xf6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b.
//
// Solidity: event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender)
func (_EthereumBridge *EthereumBridgeFilterer) ParseRoleRevoked(log types.Log) (*EthereumBridgeRoleRevoked, error) {
	event := new(EthereumBridgeRoleRevoked)
	if err := _EthereumBridge.contract.UnpackLog(event, "RoleRevoked", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// EthereumBridgeUnpausedIterator is returned from FilterUnpaused and is used to iterate over the raw logs and unpacked data for Unpaused events raised by the EthereumBridge contract.
type EthereumBridgeUnpausedIterator struct {
	Event *EthereumBridgeUnpaused // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *EthereumBridgeUnpausedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(EthereumBridgeUnpaused)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(EthereumBridgeUnpaused)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *EthereumBridgeUnpausedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *EthereumBridgeUnpausedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// EthereumBridgeUnpaused represents a Unpaused event raised by the EthereumBridge contract.
type EthereumBridgeUnpaused struct {
	Account common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterUnpaused is a free log retrieval operation binding the contract event 0x5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa.
//
// Solidity: event Unpaused(address account)
func (_EthereumBridge *EthereumBridgeFilterer) FilterUnpaused(opts *bind.FilterOpts) (*EthereumBridgeUnpausedIterator, error) {

	logs, sub, err := _EthereumBridge.contract.FilterLogs(opts, "Unpaused")
	if err != nil {
		return nil, err
	}
	return &EthereumBridgeUnpausedIterator{contract: _EthereumBridge.contract, event: "Unpaused", logs: logs, sub: sub}, nil
}

// WatchUnpaused is a free log subscription operation binding the contract event 0x5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa.
//
// Solidity: event Unpaused(address account)
func (_EthereumBridge *EthereumBridgeFilterer) WatchUnpaused(opts *bind.WatchOpts, sink chan<- *EthereumBridgeUnpaused) (event.Subscription, error) {

	logs, sub, err := _EthereumBridge.contract.WatchLogs(opts, "Unpaused")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(EthereumBridgeUnpaused)
				if err := _EthereumBridge.contract.UnpackLog(event, "Unpaused", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUnpaused is a log parse operation binding the contract event 0x5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa.
//
// Solidity: event Unpaused(address account)
func (_EthereumBridge *EthereumBridgeFilterer) ParseUnpaused(log types.Log) (*EthereumBridgeUnpaused, error) {
	event := new(EthereumBridgeUnpaused)
	if err := _EthereumBridge.contract.UnpackLog(event, "Unpaused", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
