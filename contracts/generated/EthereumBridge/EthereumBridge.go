// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package EthereumBridge

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
	_ = abi.ConvertType
)

// EthereumBridgeMetaData contains all meta data concerning the EthereumBridge contract.
var EthereumBridgeMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[],\"name\":\"InvalidInitialization\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotInitializing\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"remoteAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"localAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"}],\"name\":\"CreatedWrappedToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"version\",\"type\":\"uint64\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"erc20Fee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wrappedToken\",\"type\":\"address\"}],\"name\":\"hasTokenMapping\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"messenger\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"remoteBridge\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"localToken\",\"type\":\"address\"}],\"name\":\"localToRemoteToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"remoteToken\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"messageBus\",\"outputs\":[{\"internalType\":\"contractIMessageBus\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"messenger\",\"outputs\":[{\"internalType\":\"contractICrossChainMessenger\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nonce\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"crossChainAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"}],\"name\":\"onCreateTokenCommand\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"receiveAssets\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"remoteBridgeAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"remoteToken\",\"type\":\"address\"}],\"name\":\"remoteToLocalToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"localToken\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"sendERC20\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"sendNative\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"valueTransferFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"localToken\",\"type\":\"address\"}],\"name\":\"wrappedTokens\",\"outputs\":[{\"internalType\":\"contractWrappedERC20\",\"name\":\"wrappedToken\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]",
	Bin: "0x608060405234601957604051612fb761001e8239612fb790f35b5f80fdfe60806040526004361015610018575b366114ac57611441565b5f3560e01c80628d48e31461010157806307d7fb9a146100e35780630f0a9a4b146100fc5780631888d712146100f75780633cb747bf146100f2578063458ffd63146100ed578063485cc955146100e85780636a175390146100e357806383bece4d146100de5780639813c7b2146100d95780639e405b71146100d4578063a1a227fa146100cf578063a381c8e2146100ca578063affed0e0146100c55763d5c6b5040361000e5761048e565b610465565b610451565b610436565b61041b565b6103df565b6103c6565b6101ff565b610371565b610332565b610281565b610250565b610235565b6101bc565b6001600160a01b031690565b90565b6001600160a01b0381165b0361012757565b5f80fd5b9050359061013882610115565b565b90602082820312610127576101129161012b565b610106610112610112926001600160a01b031690565b6101129061014e565b61011290610164565b906101809061016d565b5f5260205260405f2090565b610112916008021c610106565b90610112915461018c565b5f6101b3610112926002610176565b610199565b9052565b34610127576101f16101d76101d236600461013a565b6101a4565b604051918291826001600160a01b03909116815260200190565b0390f35b5f91031261012757565b346101275761020f3660046101f5565b6101f161021a610510565b6040519182918290815260200190565b6101125f6003610199565b34610127576102453660046101f5565b6101f16101d761022a565b61026361025e36600461013a565b61071a565b604051005b6101b89061016d565b6020810192916101389190610268565b34610127576102913660046101f5565b6101f161029c61090d565b60405191829182610271565b909182601f830112156101275781359167ffffffffffffffff831161012757602001926001830284011161012757565b606081830312610127576102ec828261012b565b92602082013567ffffffffffffffff8111610127578361030d9184016102a8565b929093604082013567ffffffffffffffff81116101275761032e92016102a8565b9091565b34610127576102636103453660046102d8565b93929092610ca2565b91906040838203126101275761011290602061036a828661012b565b940161012b565b346101275761026361038436600461034e565b90610fa5565b80610120565b905035906101388261038a565b9091606082840312610127576101126103b6848461012b565b93604061036a8260208701610390565b34610127576102636103d936600461039d565b91611105565b34610127576101f16103fa6103f536600461013a565b611110565b60405191829182901515815260200190565b5f6101b3610112926001610176565b34610127576101f16101d761043136600461013a565b61040c565b34610127576104463660046101f5565b6101f161029c61117f565b61026361045f36600461039d565b9161129e565b34610127576104753660046101f5565b6101f161021a611429565b5f6101b36101129282610176565b34610127576101f161029c6104a436600461013a565b610480565b634e487b7160e01b5f52604160045260245ffd5b90601f01601f1916810190811067ffffffffffffffff8211176104df57604052565b6104a9565b905051906101388261038a565b9060208282031261012757610112916104e4565b6040513d5f823e3d90fd5b61052061051b6114f1565b61016d565b602061052b60405190565b62a1b81560e01b815291829060049082905afa908115610578575f9161054f575090565b610112915060203d602011610571575b61056981836104bd565b8101906104f1565b503d61055f565b610505565b6101126101126101129290565b0190565b1561059557565b60405162461bcd60e51b815260206004820152600d60248201527f4e6f7468696e672073656e742e000000000000000000000000000000000000006044820152606490fd5b156105e157565b60405162461bcd60e51b815260206004820152602c60248201527f496e73756666696369656e742066756e647320746f207075626c69736820766160448201527f6c7565207472616e7366657200000000000000000000000000000000000000006064820152608490fd5b634e487b7160e01b5f52601160045260245ffd5b9190820391821161066d57565b61064c565b6101066101126101129290565b61011290610672565b6001600160a01b0390911681526060810193926101389290916040916106af906020830152565b01906001600160a01b03169052565b61011290610106565b61011290546106be565b634e487b7160e01b5f52602160045260245ffd5b600311156106ef57565b6106d1565b90610138826106e5565b610112906106f4565b6107146101126101129290565b60ff1690565b61072d6107265f61057d565b341161058e565b61073861051b6114f1565b9062a1b81591602061074960405190565b80926107558660e01b90565b825260049082905afa9283156105785761078461077c61079b956020945f9161086b575090565b3410156105da565b61078f61051b6114f1565b60405194859260e01b90565b825260049082905afa90811561057857610138925f9261084a575b5061081c6107c48334610660565b9161080d6107d15f61067f565b916107db60405190565b9485936004602086017f83bece4d00000000000000000000000000000000000000000000000000000000815201610688565b602082018103825203826104bd565b61082660036106c7565b9061083160026106fe565b61083a5f61057d565b916108445f610707565b93611679565b61086491925060203d6020116105715761056981836104bd565b905f6107b6565b6101129150853d87116105715761056981836104bd565b9061013861088f60405190565b92836104bd565b67ffffffffffffffff81116104df57602090601f01601f19160190565b906108c56108c083610896565b610882565b918252565b6108d4601e6108b3565b7f43726f7373436861696e456e61626c656454454e2e6d657373656e6765720000602082015290565b6101126108ca565b6101126108fd565b61011261051b5f610939610112610922610905565b80516020918201205f19015f9081522060ff191690565b016106c7565b1561094657565b60405162461bcd60e51b815260206004820152603060248201527f436f6e74726163742063616c6c6572206973206e6f742074686520726567697360448201527f7465726564206d657373656e67657221000000000000000000000000000000006064820152608490fd5b156109b857565b60405162461bcd60e51b815260206004820152603160248201527f43726f737320636861696e206d65737361676520636f6d696e672066726f6d2060448201527f696e636f72726563742073656e646572210000000000000000000000000000006064820152608490fd5b15610a2a57565b60405162461bcd60e51b815260206004820152603160248201527f43726f737320636861696e206d65737361676520636f6d696e672066726f6d2060448201527f696e636f727265637420746172676574210000000000000000000000000000006064820152608490fd5b9061013894939291610ae8610aaa60036106c7565b610aba610ab561179f565b61093f565b610ae2610ad5610ac86117d3565b926001600160a01b031690565b916001600160a01b031690565b146109b1565b610b08610af3611851565b610b02610ad56101063061016d565b14610a23565b610bed565b90825f939282370152565b9190610b3681610b2f8161058a9560209181520190565b8095610b0d565b601f01601f191690565b9290610b5c90610112959360408601918683035f880152610b18565b926020818503910152610b18565b906001600160a01b03905b9181191691161790565b90610b8f610112610b969261016d565b8254610b6a565b9055565b9492936101129694610bd2610bdf94610bc260808a01955f8b01906001600160a01b03169052565b6001600160a01b03166020890152565b8683036040880152610b18565b926060818503910152610b18565b9193610bf860405190565b6115fb810181811067ffffffffffffffff8211176104df57610c268387898786956115fb6119878839610b40565b03905ff0938415610578577f30c05779f384e0ae9d43bbf7ec4417f28bdc53d02a35551b6eb270a9c4c71dca95610c9d93610c73610c638861016d565b97610c6e895f610176565b610b7f565b610c8286610c6e896001610176565b610c9187610c6e886002610176565b60405196879687610b9a565b0390a1565b9061013894939291610a95565b6101129060401c610714565b6101129054610caf565b610112905b67ffffffffffffffff1690565b6101129054610cc5565b610cca6101126101129290565b9067ffffffffffffffff90610b75565b610cca6101126101129267ffffffffffffffff1690565b90610d25610112610b9692610cfe565b8254610cee565b9068ff00000000000000009060401b610b75565b90610d50610112610b9692151590565b8254610d2c565b6101b890610ce1565b6020810192916101389190610d57565b610d78611890565b908190610d94610d8e610d8a84610cbb565b1590565b92610cd7565b93610d9e5f610ce1565b67ffffffffffffffff86161480610eb4575b600195610dcd610dbf88610ce1565b9167ffffffffffffffff1690565b149081610e8c575b155b9081610e83575b50610e5957610e079183610dfe5f610df589610ce1565b97019687610d15565b610e4a57610f53565b610e0f575050565b7fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d291610e3e5f610c9d93610d40565b60405191829182610d60565b610e548686610d40565b610f53565b7ff92ee8a9000000000000000000000000000000000000000000000000000000005f908152600490fd5b1590505f610dde565b9050610dd7610e9a3061016d565b3b610eab610ea75f61057d565b9190565b14919050610dd5565b5082610db0565b15610ec257565b60405162461bcd60e51b815260206004820152601760248201527f4d657373656e6765722063616e6e6f74206265203078300000000000000000006044820152606490fd5b15610f0e57565b60405162461bcd60e51b815260206004820152601b60248201527f52656d6f7465206272696467652063616e6e6f742062652030783000000000006044820152606490fd5b90610f9e61013892610f99610f88610f6a5f61067f565b6101066001600160a01b0382166001600160a01b0386161415610ebb565b6001600160a01b0385161415610f07565b611898565b6003610b7f565b9061013891610d70565b906101389291610fc2610aaa60036106c7565b610fcd610af3611851565b611061565b15610fd957565b60405162461bcd60e51b815260206004820152602b60248201527f526563656976696e672061737365747320666f7220756e6b6e6f776e2077726160448201527f7070656420746f6b656e210000000000000000000000000000000000000000006064820152608490fd5b6001600160a01b0390911681526040810192916101389160200152565b61051b61107b61108061107b611086949695966002610176565b6106c7565b5f610176565b916110a76110966101065f61067f565b6001600160a01b0385161415610fd2565b823b15610127576110dd925f92836110be60405190565b8096819582946110d263979005ad60e01b90565b845260048401611044565b03925af18015610578576110ee5750565b610138905f6110fd81836104bd565b8101906101f5565b906101389291610faf565b61051b61107b611128926111215f90565b505f610176565b611137610ad56101065f61067f565b141590565b611146601f6108b3565b7f43726f7373436861696e456e61626c656454454e2e6d65737361676542757300602082015290565b61011261113c565b61011261116f565b61011261051b5f610939610112610922611177565b1561119b57565b60405162461bcd60e51b815260206004820152601560248201527f4e6f206d617070696e6720666f7220746f6b656e2e00000000000000000000006044820152606490fd5b156111e757565b60405162461bcd60e51b815260206004820152601e60248201527f416d6f756e74206d7573742062652067726561746572207468616e20302e00006044820152606490fd5b1561123357565b60405162461bcd60e51b815260206004820152602560248201527f496e73756666696369656e742066756e647320746f207075626c697368206d6560448201527f73736167650000000000000000000000000000000000000000000000000000006064820152608490fd5b90916112b16112ac83611110565b611194565b6112c46112bd5f61057d565b84116111e0565b6112d461051b61107b845f610176565b91823b15610127575f6112e660405190565b9384907f1dd319cb00000000000000000000000000000000000000000000000000000000825281838161131d8a3360048401611044565b03925af19283156105785761107b61080d926107d192611344966113c0575b506001610176565b61134f61051b6114f1565b90602061135b60405190565b62a1b81560e01b815292839060049082905afa80156105785761138961139191610138945f9161054f575090565b34101561122c565b61139b60036106c7565b906113a55f6106fe565b6113ae5f61057d565b906113b85f610707565b923494611679565b6113cf905f6110fd81836104bd565b5f61133c565b6113df601a6108b3565b7f43726f7373436861696e456e61626c656454454e2e6e6f6e6365000000000000602082015290565b6101126113d5565b610112611408565b6101129081565b6101129054611418565b6101125f61143b610112610922611410565b0161141f565b60405162461bcd60e51b815260206004820152602360248201527f436f6e747261637420646f6573206e6f7420737570706f72742072656365697660448201527f65282900000000000000000000000000000000000000000000000000000000006064820152608490fd5b60405162461bcd60e51b815260206004820152601d60248201527f66616c6c6261636b2829206d6574686f6420756e737570706f727465640000006044820152606490fd5b61011261117f565b1561150057565b60405162461bcd60e51b815260206004820152601460248201527f5461726765742063616e6e6f74206265203078300000000000000000000000006044820152606490fd5b6101126060610882565b90825f9392825e0152565b61157b610b3660209361058a9361156f815190565b80835293849260200190565b9586910161154f565b80516001600160a01b0316825290610112906040806115b2606084016020870151858203602087015261155a565b940151910152565b602080825261011292910190611584565b5f19811461066d5760010190565b905f1990610b75565b906115f2610112610b969261057d565b82546115d9565b67ffffffffffffffff8116610120565b90505190610138826115f9565b906020828203126101275761011291611609565b9493916060916101389461166261166f9361165560808b01945f8c019067ffffffffffffffff169052565b63ffffffff1660208a0152565b878203604089015261155a565b94019060ff169052565b92946116d160209593966116ca611758946116aa6116996101065f61067f565b6001600160a01b038a1614156114f9565b6116c46116b5611545565b6001600160a01b039099168952565b88880152565b6040860152565b6116f86116dd60405190565b80956116ec88830191826115ba565b908103825203856104bd565b61170361051b61117f565b92611763630d3fd67c916117415f61171f610112610922611410565b0161173c61172c8261141f565b91611736836115cb565b906115e2565b610ce1565b9661174b60405190565b998a988997889660e01b90565b86526004860161162a565b03925af18015610578576117745750565b6117959060203d602011611798575b61178d81836104bd565b810190611616565b50565b503d611783565b6117ad61010661051b61090d565b331490565b9050519061013882610115565b9060208282031261012757610112916117b2565b6117de61051b61090d565b60206117e960405190565b9182907f63012de5000000000000000000000000000000000000000000000000000000005b825260049082905afa908115610578575f91611828575090565b610112915060203d60201161184a575b61184281836104bd565b8101906117bf565b503d611838565b61185c61051b61090d565b602061186760405190565b9182907fb859ce830000000000000000000000000000000000000000000000000000000061180e565b61011261197e565b6118b1905f6118ab610112610922610905565b01610b7f565b6118bc61051b61090d565b60206118c760405190565b7fa1a227fa00000000000000000000000000000000000000000000000000000000815291829060049082905afa801561057857611915915f91611936575b505f6118ab610112610922611177565b6101386119215f61057d565b5f611930610112610922611410565b016115e2565b61194f915060203d60201161184a5761184281836104bd565b5f611905565b6101127ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a0061057d565b61011261195556fe60806040523461002b5761001a61001461013b565b9061015d565b60405161115e61049d823961115e90f35b5f80fd5b634e487b7160e01b5f52604160045260245ffd5b90601f01601f191681019081106001600160401b0382111761006457604052565b61002f565b9061007d61007660405190565b9283610043565b565b6001600160401b03811161006457602090601f01601f19160190565b90825f9392825e0152565b909291926100bb6100b68261007f565b610069565b938185528183011161002b5761007d91602085019061009b565b9080601f8301121561002b5781516100ef926020016100a6565b90565b91909160408184031261002b5780516001600160401b03811161002b578361011b9183016100d5565b60208201519093906001600160401b03811161002b576100ef92016100d5565b6101596115fb8038038061014e81610069565b9283398101906100f2565b9091565b9061016791610194565b610191337fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c217756103f1565b50565b61007d91829182918291829190610371565b634e487b7160e01b5f52602260045260245ffd5b90600160028304921680156101da575b60208310146101d557565b6101a6565b91607f16916101ca565b915f1960089290920291821b911b5b9181191691161790565b6100ef6100ef6100ef9290565b919061021b6100ef610223936101fd565b9083546101e4565b9055565b61007d915f9161020a565b81811061023d575050565b8061024a5f600193610227565b01610232565b9190601f811161025f57505050565b61026f61007d935f5260205f2090565b906020601f840181900483019310610291575b6020601f909101040190610232565b9091508190610282565b906102a4815190565b906001600160401b038211610064576102c7826102c185546101ba565b85610250565b602090601f83116001146103005761022392915f91836102f5575b50505f19600883021c1916906002021790565b015190505f806102e2565b601f19831691610313855f5260205f2090565b925f5b81811061034f57509160029391856001969410610337575b50505002019055565b01515f196008601f8516021c191690555f808061032e565b91936020600181928787015181550195019201610316565b9061007d9161029b565b9061038061007d926003610367565b6004610367565b905b5f5260205260405f2090565b6100ef906103a9906001600160a01b031682565b6001600160a01b031690565b6100ef90610395565b6100ef906103b5565b90610389906103be565b9060ff906101f3565b906103ea6100ef61022392151590565b82546103d1565b6104026103fe838361047a565b1590565b15610474576104276001610422845f61041c866005610387565b016103c7565b6103da565b61044161043b610435339390565b936103be565b916103be565b917f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d61046c60405190565b5f90a4600190565b50505f90565b6100ef915f61041c6104959361048d5f90565b506005610387565b5460ff169056fe60806040526004361015610011575f80fd5b5f3560e01c806301ffc9a71461014057806306fdde031461013b578063095ea7b31461013657806318160ddd146101315780631dd319cb1461012c57806323b872dd14610127578063248a9ca3146101225780632f2ff15d1461011d578063313ce5671461011857806336568abe1461011357806370a082311461010e57806375b238fc1461010957806391d148541461010457806395d89b41146100ff578063979005ad146100fa578063a217fddf146100f5578063a9059cbb146100f0578063d547741f146100eb5763dd62ed3e036101705761054e565b610519565b6104fd565b6104e2565b6104ab565b610490565b610474565b61043b565b610420565b6103f3565b6103c4565b6103ab565b61036d565b61033d565b6102f6565b6102ca565b6102ae565b610229565b61019a565b7fffffffff0000000000000000000000000000000000000000000000000000000081165b0361017057565b5f80fd5b9050359061018182610145565b565b906020828203126101705761019791610174565b90565b34610170576101c76101b56101b0366004610183565b61056a565b60405191829182901515815260200190565b0390f35b5f91031261017057565b90825f9392825e0152565b61020161020a602093610214936101f5815190565b80835293849260200190565b958691016101d5565b601f01601f191690565b0190565b6020808252610197929101906101e0565b34610170576102393660046101cb565b6101c7610244610733565b60405191829182610218565b6001600160a01b031690565b6001600160a01b038116610169565b905035906101818261025c565b80610169565b9050359061018182610278565b9190604083820312610170576101979060206102a7828661026b565b940161027e565b34610170576101c76101b56102c436600461028b565b9061073d565b34610170576102da3660046101cb565b6101c76102e561075e565b6040515b9182918290815260200190565b346101705761030f61030936600461028b565b9061080a565b604051005b90916060828403126101705761019761032d848461026b565b9360406102a7826020870161026b565b34610170576101c76101b5610353366004610314565b91610814565b90602082820312610170576101979161027e565b34610170576101c76102e5610383366004610359565b610838565b9190604083820312610170576101979060206103a4828661027e565b940161026b565b346101705761030f6103be366004610388565b90610874565b34610170576103d43660046101cb565b6101c76103df610891565b6040519182918260ff909116815260200190565b346101705761030f610406366004610388565b9061089b565b90602082820312610170576101979161026b565b34610170576101c76102e561043636600461040c565b6108e9565b346101705761044b3660046101cb565b6101c77fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c217756102e5565b34610170576101c76101b561048a366004610388565b9061099c565b34610170576104a03660046101cb565b6101c76102446109ba565b346101705761030f6104be36600461028b565b906109fc565b6101976101976101979290565b6101975f6104c4565b6101976104d1565b34610170576104f23660046101cb565b6101c76102e56104da565b34610170576101c76101b561051336600461028b565b90610a06565b346101705761030f61052c366004610388565b90610a2c565b9190604083820312610170576101979060206103a4828661026b565b34610170576101c76102e5610564366004610532565b90610a36565b7f7965db0b000000000000000000000000000000000000000000000000000000007fffffffff000000000000000000000000000000000000000000000000000000008216149081156105ba575090565b61019791507fffffffff00000000000000000000000000000000000000000000000000000000167f01ffc9a7000000000000000000000000000000000000000000000000000000001490565b634e487b7160e01b5f52602260045260245ffd5b906001600283049216801561063a575b602083101461063557565b610606565b91607f169161062a565b80545f9392916106606106568361061a565b8085529360200190565b91600181169081156106af575060011461067957505050565b61068a91929394505f5260205f2090565b915f925b81841061069b5750500190565b80548484015260209093019260010161068e565b92949550505060ff1916825215156020020190565b9061019791610644565b634e487b7160e01b5f52604160045260245ffd5b90601f01601f1916810190811067ffffffffffffffff82111761070457604052565b6106ce565b906101816107239261071a60405190565b938480926106c4565b03836106e2565b61019790610709565b610197600361072a565b610748919033610afd565b600190565b6101979081565b610197905461074d565b6101976002610754565b610181919061079b7fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c21775610b0a565b610b0a565b6107ec565b156107a757565b60405162461bcd60e51b815260206004820152601560248201527f496e73756666696369656e742062616c616e63652e00000000000000000000006044820152606490fd5b90610181916108056107fd826108e9565b8311156107a0565b610b2b565b9061018191610768565b610748929190610825833383610ba4565b610c15565b905b5f5260205260405f2090565b6001610850610197926108485f90565b50600561082a565b01610754565b906101819161086761079682610838565b9061087191610cc5565b50565b9061018191610856565b61088b6101976101979290565b60ff1690565b610197601261087e565b906108a533610250565b6001600160a01b038216036108bd5761087191610d48565b7f6697b232000000000000000000000000000000000000000000000000000000005f90815260045b035ffd5b6001600160a01b038116321461094e576001600160a01b038116331461094e5760405162461bcd60e51b815260206004820152601f60248201527f4e6f7420616c6c6f77656420746f2072656164207468652062616c616e6365006044820152606490fd5b61019790610da4565b610250610197610197926001600160a01b031690565b61019790610957565b6101979061096d565b9061082c90610976565b6101979061088b565b6101979054610989565b610197915f6109af6109b5936108485f90565b0161097f565b610992565b610197600461072a565b61018191906109f27fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c21775610b0a565b9061018191610dbe565b90610181916109c4565b610748919033610c15565b9061018191610a2261079682610838565b9061087191610d48565b9061018191610a11565b906001600160a01b03821632148015610aeb575b610ad0576001600160a01b03821633148015610ad9575b610ad05760405162461bcd60e51b815260206004820152602160248201527f4e6f7420616c6c6f77656420746f20726561642074686520616c6c6f77616e6360448201527f65000000000000000000000000000000000000000000000000000000000000006064820152608490fd5b61019791610e0b565b506001600160a01b0381163314610a61565b506001600160a01b0381163214610a4a565b9160019161018193610e4a565b610181903390610f78565b6102506101976101979290565b61019790610b15565b9190610b365f610b22565b926001600160a01b0384166001600160a01b03821614610b5b57926101819293610fe5565b634b637e8f60e11b5f9081526001600160a01b038516600452602490fd5b6001600160a01b039091168152606081019392610181929091604091610ba0906020830152565b0152565b91610baf8284610a36565b5f198110610bbe575b50505050565b818110610be35791610bd4610bda94925f940390565b91610e4a565b5f808080610bb8565b7ffb8f41b2000000000000000000000000000000000000000000000000000000005f90815293506108e5926004610b79565b929190610c215f610b22565b936001600160a01b0385166001600160a01b03821614610c7d576001600160a01b0385166001600160a01b03831614610c5f57610181939450610fe5565b63ec442f0560e01b5f9081526001600160a01b038616600452602490fd5b634b637e8f60e11b5f9081526001600160a01b038616600452602490fd5b9060ff905b9181191691161790565b90610cba610197610cc192151590565b8254610c9b565b9055565b610cd6610cd2838361099c565b1590565b15610d4257610cf56001610cf0845f6109af86600561082a565b610caa565b610d0f610d09610d03339390565b93610976565b91610976565b917f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d610d3a60405190565b5f90a4600190565b50505f90565b610d52828261099c565b15610d4257610d6b5f610cf084826109af86600561082a565b610d79610d09610d03339390565b917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b610d3a60405190565b610db961019791610db25f90565b505f61097f565b610754565b9190610dc95f610b22565b926001600160a01b0384166001600160a01b03821614610ded576101819293610fe5565b63ec442f0560e01b5f9081526001600160a01b038516600452602490fd5b61019791610e25610db992610e1d5f90565b50600161097f565b61097f565b905f1990610ca0565b90610e43610197610cc1926104c4565b8254610e2a565b909192610e565f610b22565b6001600160a01b0381166001600160a01b03841614610f22576001600160a01b0381166001600160a01b03851614610ee95750610ea184610e9c85610e2586600161097f565b610e33565b610eaa57505050565b610ee4610eda610d037f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92593610976565b936102e960405190565b0390a3565b7f94280d62000000000000000000000000000000000000000000000000000000005f9081526001600160a01b039091166004526024035ffd5b7fe602df05000000000000000000000000000000000000000000000000000000005f9081526001600160a01b039091166004526024035ffd5b6001600160a01b0390911681526040810192916101819160200152565b90610f86610cd2828461099c565b610f8e575050565b7fe2517d3f000000000000000000000000000000000000000000000000000000005f908152916108e5916004610f5b565b634e487b7160e01b5f52601160045260245ffd5b91908201809211610fe057565b610fbf565b610fee5f610b22565b6001600160a01b0381166001600160a01b0383160361109c57610eda610d037fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef93611053610ee49461025061104c8a6110476002610754565b610fd3565b6002610e33565b6001600160a01b0387160361107c5761107761104c886110736002610754565b0390565b610976565b611077611089875f61097f565b6110968961021483610754565b90610e33565b6110a9610db9835f61097f565b8481106110f557610d037fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef93611053610ee4946102506110eb8a610eda970390565b610e9c855f61097f565b6108e5855f92857fe450d38c00000000000000000000000000000000000000000000000000000000855260048501610b7956fea2646970667358221220ed36be82a8df75b008b97873a55ebd9856720cae81aa177f283e591a11a7ce1b64736f6c634300081c0033a26469706673582212208ba2f1b02fba755096d7d3515327b9d70cd3d49c7f5b8dd23b1fa37664de51eb64736f6c634300081c0033",
}

// EthereumBridgeABI is the input ABI used to generate the binding from.
// Deprecated: Use EthereumBridgeMetaData.ABI instead.
var EthereumBridgeABI = EthereumBridgeMetaData.ABI

// EthereumBridgeBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use EthereumBridgeMetaData.Bin instead.
var EthereumBridgeBin = EthereumBridgeMetaData.Bin

// DeployEthereumBridge deploys a new Ethereum contract, binding an instance of EthereumBridge to it.
func DeployEthereumBridge(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *EthereumBridge, error) {
	parsed, err := EthereumBridgeMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(EthereumBridgeBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &EthereumBridge{EthereumBridgeCaller: EthereumBridgeCaller{contract: contract}, EthereumBridgeTransactor: EthereumBridgeTransactor{contract: contract}, EthereumBridgeFilterer: EthereumBridgeFilterer{contract: contract}}, nil
}

// EthereumBridge is an auto generated Go binding around an Ethereum contract.
type EthereumBridge struct {
	EthereumBridgeCaller     // Read-only binding to the contract
	EthereumBridgeTransactor // Write-only binding to the contract
	EthereumBridgeFilterer   // Log filterer for contract events
}

// EthereumBridgeCaller is an auto generated read-only Go binding around an Ethereum contract.
type EthereumBridgeCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// EthereumBridgeTransactor is an auto generated write-only Go binding around an Ethereum contract.
type EthereumBridgeTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// EthereumBridgeFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type EthereumBridgeFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// EthereumBridgeSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type EthereumBridgeSession struct {
	Contract     *EthereumBridge   // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// EthereumBridgeCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type EthereumBridgeCallerSession struct {
	Contract *EthereumBridgeCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts         // Call options to use throughout this session
}

// EthereumBridgeTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type EthereumBridgeTransactorSession struct {
	Contract     *EthereumBridgeTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts         // Transaction auth options to use throughout this session
}

// EthereumBridgeRaw is an auto generated low-level Go binding around an Ethereum contract.
type EthereumBridgeRaw struct {
	Contract *EthereumBridge // Generic contract binding to access the raw methods on
}

// EthereumBridgeCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type EthereumBridgeCallerRaw struct {
	Contract *EthereumBridgeCaller // Generic read-only contract binding to access the raw methods on
}

// EthereumBridgeTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type EthereumBridgeTransactorRaw struct {
	Contract *EthereumBridgeTransactor // Generic write-only contract binding to access the raw methods on
}

// NewEthereumBridge creates a new instance of EthereumBridge, bound to a specific deployed contract.
func NewEthereumBridge(address common.Address, backend bind.ContractBackend) (*EthereumBridge, error) {
	contract, err := bindEthereumBridge(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &EthereumBridge{EthereumBridgeCaller: EthereumBridgeCaller{contract: contract}, EthereumBridgeTransactor: EthereumBridgeTransactor{contract: contract}, EthereumBridgeFilterer: EthereumBridgeFilterer{contract: contract}}, nil
}

// NewEthereumBridgeCaller creates a new read-only instance of EthereumBridge, bound to a specific deployed contract.
func NewEthereumBridgeCaller(address common.Address, caller bind.ContractCaller) (*EthereumBridgeCaller, error) {
	contract, err := bindEthereumBridge(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &EthereumBridgeCaller{contract: contract}, nil
}

// NewEthereumBridgeTransactor creates a new write-only instance of EthereumBridge, bound to a specific deployed contract.
func NewEthereumBridgeTransactor(address common.Address, transactor bind.ContractTransactor) (*EthereumBridgeTransactor, error) {
	contract, err := bindEthereumBridge(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &EthereumBridgeTransactor{contract: contract}, nil
}

// NewEthereumBridgeFilterer creates a new log filterer instance of EthereumBridge, bound to a specific deployed contract.
func NewEthereumBridgeFilterer(address common.Address, filterer bind.ContractFilterer) (*EthereumBridgeFilterer, error) {
	contract, err := bindEthereumBridge(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &EthereumBridgeFilterer{contract: contract}, nil
}

// bindEthereumBridge binds a generic wrapper to an already deployed contract.
func bindEthereumBridge(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := EthereumBridgeMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_EthereumBridge *EthereumBridgeRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _EthereumBridge.Contract.EthereumBridgeCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_EthereumBridge *EthereumBridgeRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _EthereumBridge.Contract.EthereumBridgeTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_EthereumBridge *EthereumBridgeRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _EthereumBridge.Contract.EthereumBridgeTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_EthereumBridge *EthereumBridgeCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _EthereumBridge.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_EthereumBridge *EthereumBridgeTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _EthereumBridge.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_EthereumBridge *EthereumBridgeTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _EthereumBridge.Contract.contract.Transact(opts, method, params...)
}

// Erc20Fee is a free data retrieval call binding the contract method 0x07d7fb9a.
//
// Solidity: function erc20Fee() view returns(uint256)
func (_EthereumBridge *EthereumBridgeCaller) Erc20Fee(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _EthereumBridge.contract.Call(opts, &out, "erc20Fee")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// Erc20Fee is a free data retrieval call binding the contract method 0x07d7fb9a.
//
// Solidity: function erc20Fee() view returns(uint256)
func (_EthereumBridge *EthereumBridgeSession) Erc20Fee() (*big.Int, error) {
	return _EthereumBridge.Contract.Erc20Fee(&_EthereumBridge.CallOpts)
}

// Erc20Fee is a free data retrieval call binding the contract method 0x07d7fb9a.
//
// Solidity: function erc20Fee() view returns(uint256)
func (_EthereumBridge *EthereumBridgeCallerSession) Erc20Fee() (*big.Int, error) {
	return _EthereumBridge.Contract.Erc20Fee(&_EthereumBridge.CallOpts)
}

// HasTokenMapping is a free data retrieval call binding the contract method 0x9813c7b2.
//
// Solidity: function hasTokenMapping(address wrappedToken) view returns(bool)
func (_EthereumBridge *EthereumBridgeCaller) HasTokenMapping(opts *bind.CallOpts, wrappedToken common.Address) (bool, error) {
	var out []interface{}
	err := _EthereumBridge.contract.Call(opts, &out, "hasTokenMapping", wrappedToken)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// HasTokenMapping is a free data retrieval call binding the contract method 0x9813c7b2.
//
// Solidity: function hasTokenMapping(address wrappedToken) view returns(bool)
func (_EthereumBridge *EthereumBridgeSession) HasTokenMapping(wrappedToken common.Address) (bool, error) {
	return _EthereumBridge.Contract.HasTokenMapping(&_EthereumBridge.CallOpts, wrappedToken)
}

// HasTokenMapping is a free data retrieval call binding the contract method 0x9813c7b2.
//
// Solidity: function hasTokenMapping(address wrappedToken) view returns(bool)
func (_EthereumBridge *EthereumBridgeCallerSession) HasTokenMapping(wrappedToken common.Address) (bool, error) {
	return _EthereumBridge.Contract.HasTokenMapping(&_EthereumBridge.CallOpts, wrappedToken)
}

// LocalToRemoteToken is a free data retrieval call binding the contract method 0x9e405b71.
//
// Solidity: function localToRemoteToken(address localToken) view returns(address remoteToken)
func (_EthereumBridge *EthereumBridgeCaller) LocalToRemoteToken(opts *bind.CallOpts, localToken common.Address) (common.Address, error) {
	var out []interface{}
	err := _EthereumBridge.contract.Call(opts, &out, "localToRemoteToken", localToken)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// LocalToRemoteToken is a free data retrieval call binding the contract method 0x9e405b71.
//
// Solidity: function localToRemoteToken(address localToken) view returns(address remoteToken)
func (_EthereumBridge *EthereumBridgeSession) LocalToRemoteToken(localToken common.Address) (common.Address, error) {
	return _EthereumBridge.Contract.LocalToRemoteToken(&_EthereumBridge.CallOpts, localToken)
}

// LocalToRemoteToken is a free data retrieval call binding the contract method 0x9e405b71.
//
// Solidity: function localToRemoteToken(address localToken) view returns(address remoteToken)
func (_EthereumBridge *EthereumBridgeCallerSession) LocalToRemoteToken(localToken common.Address) (common.Address, error) {
	return _EthereumBridge.Contract.LocalToRemoteToken(&_EthereumBridge.CallOpts, localToken)
}

// MessageBus is a free data retrieval call binding the contract method 0xa1a227fa.
//
// Solidity: function messageBus() view returns(address)
func (_EthereumBridge *EthereumBridgeCaller) MessageBus(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _EthereumBridge.contract.Call(opts, &out, "messageBus")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// MessageBus is a free data retrieval call binding the contract method 0xa1a227fa.
//
// Solidity: function messageBus() view returns(address)
func (_EthereumBridge *EthereumBridgeSession) MessageBus() (common.Address, error) {
	return _EthereumBridge.Contract.MessageBus(&_EthereumBridge.CallOpts)
}

// MessageBus is a free data retrieval call binding the contract method 0xa1a227fa.
//
// Solidity: function messageBus() view returns(address)
func (_EthereumBridge *EthereumBridgeCallerSession) MessageBus() (common.Address, error) {
	return _EthereumBridge.Contract.MessageBus(&_EthereumBridge.CallOpts)
}

// Messenger is a free data retrieval call binding the contract method 0x3cb747bf.
//
// Solidity: function messenger() view returns(address)
func (_EthereumBridge *EthereumBridgeCaller) Messenger(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _EthereumBridge.contract.Call(opts, &out, "messenger")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Messenger is a free data retrieval call binding the contract method 0x3cb747bf.
//
// Solidity: function messenger() view returns(address)
func (_EthereumBridge *EthereumBridgeSession) Messenger() (common.Address, error) {
	return _EthereumBridge.Contract.Messenger(&_EthereumBridge.CallOpts)
}

// Messenger is a free data retrieval call binding the contract method 0x3cb747bf.
//
// Solidity: function messenger() view returns(address)
func (_EthereumBridge *EthereumBridgeCallerSession) Messenger() (common.Address, error) {
	return _EthereumBridge.Contract.Messenger(&_EthereumBridge.CallOpts)
}

// Nonce is a free data retrieval call binding the contract method 0xaffed0e0.
//
// Solidity: function nonce() view returns(uint256)
func (_EthereumBridge *EthereumBridgeCaller) Nonce(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _EthereumBridge.contract.Call(opts, &out, "nonce")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// Nonce is a free data retrieval call binding the contract method 0xaffed0e0.
//
// Solidity: function nonce() view returns(uint256)
func (_EthereumBridge *EthereumBridgeSession) Nonce() (*big.Int, error) {
	return _EthereumBridge.Contract.Nonce(&_EthereumBridge.CallOpts)
}

// Nonce is a free data retrieval call binding the contract method 0xaffed0e0.
//
// Solidity: function nonce() view returns(uint256)
func (_EthereumBridge *EthereumBridgeCallerSession) Nonce() (*big.Int, error) {
	return _EthereumBridge.Contract.Nonce(&_EthereumBridge.CallOpts)
}

// RemoteBridgeAddress is a free data retrieval call binding the contract method 0x0f0a9a4b.
//
// Solidity: function remoteBridgeAddress() view returns(address)
func (_EthereumBridge *EthereumBridgeCaller) RemoteBridgeAddress(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _EthereumBridge.contract.Call(opts, &out, "remoteBridgeAddress")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// RemoteBridgeAddress is a free data retrieval call binding the contract method 0x0f0a9a4b.
//
// Solidity: function remoteBridgeAddress() view returns(address)
func (_EthereumBridge *EthereumBridgeSession) RemoteBridgeAddress() (common.Address, error) {
	return _EthereumBridge.Contract.RemoteBridgeAddress(&_EthereumBridge.CallOpts)
}

// RemoteBridgeAddress is a free data retrieval call binding the contract method 0x0f0a9a4b.
//
// Solidity: function remoteBridgeAddress() view returns(address)
func (_EthereumBridge *EthereumBridgeCallerSession) RemoteBridgeAddress() (common.Address, error) {
	return _EthereumBridge.Contract.RemoteBridgeAddress(&_EthereumBridge.CallOpts)
}

// RemoteToLocalToken is a free data retrieval call binding the contract method 0x008d48e3.
//
// Solidity: function remoteToLocalToken(address remoteToken) view returns(address localToken)
func (_EthereumBridge *EthereumBridgeCaller) RemoteToLocalToken(opts *bind.CallOpts, remoteToken common.Address) (common.Address, error) {
	var out []interface{}
	err := _EthereumBridge.contract.Call(opts, &out, "remoteToLocalToken", remoteToken)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// RemoteToLocalToken is a free data retrieval call binding the contract method 0x008d48e3.
//
// Solidity: function remoteToLocalToken(address remoteToken) view returns(address localToken)
func (_EthereumBridge *EthereumBridgeSession) RemoteToLocalToken(remoteToken common.Address) (common.Address, error) {
	return _EthereumBridge.Contract.RemoteToLocalToken(&_EthereumBridge.CallOpts, remoteToken)
}

// RemoteToLocalToken is a free data retrieval call binding the contract method 0x008d48e3.
//
// Solidity: function remoteToLocalToken(address remoteToken) view returns(address localToken)
func (_EthereumBridge *EthereumBridgeCallerSession) RemoteToLocalToken(remoteToken common.Address) (common.Address, error) {
	return _EthereumBridge.Contract.RemoteToLocalToken(&_EthereumBridge.CallOpts, remoteToken)
}

// ValueTransferFee is a free data retrieval call binding the contract method 0x6a175390.
//
// Solidity: function valueTransferFee() view returns(uint256)
func (_EthereumBridge *EthereumBridgeCaller) ValueTransferFee(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _EthereumBridge.contract.Call(opts, &out, "valueTransferFee")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// ValueTransferFee is a free data retrieval call binding the contract method 0x6a175390.
//
// Solidity: function valueTransferFee() view returns(uint256)
func (_EthereumBridge *EthereumBridgeSession) ValueTransferFee() (*big.Int, error) {
	return _EthereumBridge.Contract.ValueTransferFee(&_EthereumBridge.CallOpts)
}

// ValueTransferFee is a free data retrieval call binding the contract method 0x6a175390.
//
// Solidity: function valueTransferFee() view returns(uint256)
func (_EthereumBridge *EthereumBridgeCallerSession) ValueTransferFee() (*big.Int, error) {
	return _EthereumBridge.Contract.ValueTransferFee(&_EthereumBridge.CallOpts)
}

// WrappedTokens is a free data retrieval call binding the contract method 0xd5c6b504.
//
// Solidity: function wrappedTokens(address localToken) view returns(address wrappedToken)
func (_EthereumBridge *EthereumBridgeCaller) WrappedTokens(opts *bind.CallOpts, localToken common.Address) (common.Address, error) {
	var out []interface{}
	err := _EthereumBridge.contract.Call(opts, &out, "wrappedTokens", localToken)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// WrappedTokens is a free data retrieval call binding the contract method 0xd5c6b504.
//
// Solidity: function wrappedTokens(address localToken) view returns(address wrappedToken)
func (_EthereumBridge *EthereumBridgeSession) WrappedTokens(localToken common.Address) (common.Address, error) {
	return _EthereumBridge.Contract.WrappedTokens(&_EthereumBridge.CallOpts, localToken)
}

// WrappedTokens is a free data retrieval call binding the contract method 0xd5c6b504.
//
// Solidity: function wrappedTokens(address localToken) view returns(address wrappedToken)
func (_EthereumBridge *EthereumBridgeCallerSession) WrappedTokens(localToken common.Address) (common.Address, error) {
	return _EthereumBridge.Contract.WrappedTokens(&_EthereumBridge.CallOpts, localToken)
}

// Initialize is a paid mutator transaction binding the contract method 0x485cc955.
//
// Solidity: function initialize(address messenger, address remoteBridge) returns()
func (_EthereumBridge *EthereumBridgeTransactor) Initialize(opts *bind.TransactOpts, messenger common.Address, remoteBridge common.Address) (*types.Transaction, error) {
	return _EthereumBridge.contract.Transact(opts, "initialize", messenger, remoteBridge)
}

// Initialize is a paid mutator transaction binding the contract method 0x485cc955.
//
// Solidity: function initialize(address messenger, address remoteBridge) returns()
func (_EthereumBridge *EthereumBridgeSession) Initialize(messenger common.Address, remoteBridge common.Address) (*types.Transaction, error) {
	return _EthereumBridge.Contract.Initialize(&_EthereumBridge.TransactOpts, messenger, remoteBridge)
}

// Initialize is a paid mutator transaction binding the contract method 0x485cc955.
//
// Solidity: function initialize(address messenger, address remoteBridge) returns()
func (_EthereumBridge *EthereumBridgeTransactorSession) Initialize(messenger common.Address, remoteBridge common.Address) (*types.Transaction, error) {
	return _EthereumBridge.Contract.Initialize(&_EthereumBridge.TransactOpts, messenger, remoteBridge)
}

// OnCreateTokenCommand is a paid mutator transaction binding the contract method 0x458ffd63.
//
// Solidity: function onCreateTokenCommand(address crossChainAddress, string name, string symbol) returns()
func (_EthereumBridge *EthereumBridgeTransactor) OnCreateTokenCommand(opts *bind.TransactOpts, crossChainAddress common.Address, name string, symbol string) (*types.Transaction, error) {
	return _EthereumBridge.contract.Transact(opts, "onCreateTokenCommand", crossChainAddress, name, symbol)
}

// OnCreateTokenCommand is a paid mutator transaction binding the contract method 0x458ffd63.
//
// Solidity: function onCreateTokenCommand(address crossChainAddress, string name, string symbol) returns()
func (_EthereumBridge *EthereumBridgeSession) OnCreateTokenCommand(crossChainAddress common.Address, name string, symbol string) (*types.Transaction, error) {
	return _EthereumBridge.Contract.OnCreateTokenCommand(&_EthereumBridge.TransactOpts, crossChainAddress, name, symbol)
}

// OnCreateTokenCommand is a paid mutator transaction binding the contract method 0x458ffd63.
//
// Solidity: function onCreateTokenCommand(address crossChainAddress, string name, string symbol) returns()
func (_EthereumBridge *EthereumBridgeTransactorSession) OnCreateTokenCommand(crossChainAddress common.Address, name string, symbol string) (*types.Transaction, error) {
	return _EthereumBridge.Contract.OnCreateTokenCommand(&_EthereumBridge.TransactOpts, crossChainAddress, name, symbol)
}

// ReceiveAssets is a paid mutator transaction binding the contract method 0x83bece4d.
//
// Solidity: function receiveAssets(address asset, uint256 amount, address receiver) returns()
func (_EthereumBridge *EthereumBridgeTransactor) ReceiveAssets(opts *bind.TransactOpts, asset common.Address, amount *big.Int, receiver common.Address) (*types.Transaction, error) {
	return _EthereumBridge.contract.Transact(opts, "receiveAssets", asset, amount, receiver)
}

// ReceiveAssets is a paid mutator transaction binding the contract method 0x83bece4d.
//
// Solidity: function receiveAssets(address asset, uint256 amount, address receiver) returns()
func (_EthereumBridge *EthereumBridgeSession) ReceiveAssets(asset common.Address, amount *big.Int, receiver common.Address) (*types.Transaction, error) {
	return _EthereumBridge.Contract.ReceiveAssets(&_EthereumBridge.TransactOpts, asset, amount, receiver)
}

// ReceiveAssets is a paid mutator transaction binding the contract method 0x83bece4d.
//
// Solidity: function receiveAssets(address asset, uint256 amount, address receiver) returns()
func (_EthereumBridge *EthereumBridgeTransactorSession) ReceiveAssets(asset common.Address, amount *big.Int, receiver common.Address) (*types.Transaction, error) {
	return _EthereumBridge.Contract.ReceiveAssets(&_EthereumBridge.TransactOpts, asset, amount, receiver)
}

// SendERC20 is a paid mutator transaction binding the contract method 0xa381c8e2.
//
// Solidity: function sendERC20(address asset, uint256 amount, address receiver) payable returns()
func (_EthereumBridge *EthereumBridgeTransactor) SendERC20(opts *bind.TransactOpts, asset common.Address, amount *big.Int, receiver common.Address) (*types.Transaction, error) {
	return _EthereumBridge.contract.Transact(opts, "sendERC20", asset, amount, receiver)
}

// SendERC20 is a paid mutator transaction binding the contract method 0xa381c8e2.
//
// Solidity: function sendERC20(address asset, uint256 amount, address receiver) payable returns()
func (_EthereumBridge *EthereumBridgeSession) SendERC20(asset common.Address, amount *big.Int, receiver common.Address) (*types.Transaction, error) {
	return _EthereumBridge.Contract.SendERC20(&_EthereumBridge.TransactOpts, asset, amount, receiver)
}

// SendERC20 is a paid mutator transaction binding the contract method 0xa381c8e2.
//
// Solidity: function sendERC20(address asset, uint256 amount, address receiver) payable returns()
func (_EthereumBridge *EthereumBridgeTransactorSession) SendERC20(asset common.Address, amount *big.Int, receiver common.Address) (*types.Transaction, error) {
	return _EthereumBridge.Contract.SendERC20(&_EthereumBridge.TransactOpts, asset, amount, receiver)
}

// SendNative is a paid mutator transaction binding the contract method 0x1888d712.
//
// Solidity: function sendNative(address receiver) payable returns()
func (_EthereumBridge *EthereumBridgeTransactor) SendNative(opts *bind.TransactOpts, receiver common.Address) (*types.Transaction, error) {
	return _EthereumBridge.contract.Transact(opts, "sendNative", receiver)
}

// SendNative is a paid mutator transaction binding the contract method 0x1888d712.
//
// Solidity: function sendNative(address receiver) payable returns()
func (_EthereumBridge *EthereumBridgeSession) SendNative(receiver common.Address) (*types.Transaction, error) {
	return _EthereumBridge.Contract.SendNative(&_EthereumBridge.TransactOpts, receiver)
}

// SendNative is a paid mutator transaction binding the contract method 0x1888d712.
//
// Solidity: function sendNative(address receiver) payable returns()
func (_EthereumBridge *EthereumBridgeTransactorSession) SendNative(receiver common.Address) (*types.Transaction, error) {
	return _EthereumBridge.Contract.SendNative(&_EthereumBridge.TransactOpts, receiver)
}

// Fallback is a paid mutator transaction binding the contract fallback function.
//
// Solidity: fallback() payable returns()
func (_EthereumBridge *EthereumBridgeTransactor) Fallback(opts *bind.TransactOpts, calldata []byte) (*types.Transaction, error) {
	return _EthereumBridge.contract.RawTransact(opts, calldata)
}

// Fallback is a paid mutator transaction binding the contract fallback function.
//
// Solidity: fallback() payable returns()
func (_EthereumBridge *EthereumBridgeSession) Fallback(calldata []byte) (*types.Transaction, error) {
	return _EthereumBridge.Contract.Fallback(&_EthereumBridge.TransactOpts, calldata)
}

// Fallback is a paid mutator transaction binding the contract fallback function.
//
// Solidity: fallback() payable returns()
func (_EthereumBridge *EthereumBridgeTransactorSession) Fallback(calldata []byte) (*types.Transaction, error) {
	return _EthereumBridge.Contract.Fallback(&_EthereumBridge.TransactOpts, calldata)
}

// Receive is a paid mutator transaction binding the contract receive function.
//
// Solidity: receive() payable returns()
func (_EthereumBridge *EthereumBridgeTransactor) Receive(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _EthereumBridge.contract.RawTransact(opts, nil) // calldata is disallowed for receive function
}

// Receive is a paid mutator transaction binding the contract receive function.
//
// Solidity: receive() payable returns()
func (_EthereumBridge *EthereumBridgeSession) Receive() (*types.Transaction, error) {
	return _EthereumBridge.Contract.Receive(&_EthereumBridge.TransactOpts)
}

// Receive is a paid mutator transaction binding the contract receive function.
//
// Solidity: receive() payable returns()
func (_EthereumBridge *EthereumBridgeTransactorSession) Receive() (*types.Transaction, error) {
	return _EthereumBridge.Contract.Receive(&_EthereumBridge.TransactOpts)
}

// EthereumBridgeCreatedWrappedTokenIterator is returned from FilterCreatedWrappedToken and is used to iterate over the raw logs and unpacked data for CreatedWrappedToken events raised by the EthereumBridge contract.
type EthereumBridgeCreatedWrappedTokenIterator struct {
	Event *EthereumBridgeCreatedWrappedToken // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *EthereumBridgeCreatedWrappedTokenIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(EthereumBridgeCreatedWrappedToken)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(EthereumBridgeCreatedWrappedToken)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *EthereumBridgeCreatedWrappedTokenIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *EthereumBridgeCreatedWrappedTokenIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// EthereumBridgeCreatedWrappedToken represents a CreatedWrappedToken event raised by the EthereumBridge contract.
type EthereumBridgeCreatedWrappedToken struct {
	RemoteAddress common.Address
	LocalAddress  common.Address
	Name          string
	Symbol        string
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterCreatedWrappedToken is a free log retrieval operation binding the contract event 0x30c05779f384e0ae9d43bbf7ec4417f28bdc53d02a35551b6eb270a9c4c71dca.
//
// Solidity: event CreatedWrappedToken(address remoteAddress, address localAddress, string name, string symbol)
func (_EthereumBridge *EthereumBridgeFilterer) FilterCreatedWrappedToken(opts *bind.FilterOpts) (*EthereumBridgeCreatedWrappedTokenIterator, error) {

	logs, sub, err := _EthereumBridge.contract.FilterLogs(opts, "CreatedWrappedToken")
	if err != nil {
		return nil, err
	}
	return &EthereumBridgeCreatedWrappedTokenIterator{contract: _EthereumBridge.contract, event: "CreatedWrappedToken", logs: logs, sub: sub}, nil
}

// WatchCreatedWrappedToken is a free log subscription operation binding the contract event 0x30c05779f384e0ae9d43bbf7ec4417f28bdc53d02a35551b6eb270a9c4c71dca.
//
// Solidity: event CreatedWrappedToken(address remoteAddress, address localAddress, string name, string symbol)
func (_EthereumBridge *EthereumBridgeFilterer) WatchCreatedWrappedToken(opts *bind.WatchOpts, sink chan<- *EthereumBridgeCreatedWrappedToken) (event.Subscription, error) {

	logs, sub, err := _EthereumBridge.contract.WatchLogs(opts, "CreatedWrappedToken")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(EthereumBridgeCreatedWrappedToken)
				if err := _EthereumBridge.contract.UnpackLog(event, "CreatedWrappedToken", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseCreatedWrappedToken is a log parse operation binding the contract event 0x30c05779f384e0ae9d43bbf7ec4417f28bdc53d02a35551b6eb270a9c4c71dca.
//
// Solidity: event CreatedWrappedToken(address remoteAddress, address localAddress, string name, string symbol)
func (_EthereumBridge *EthereumBridgeFilterer) ParseCreatedWrappedToken(log types.Log) (*EthereumBridgeCreatedWrappedToken, error) {
	event := new(EthereumBridgeCreatedWrappedToken)
	if err := _EthereumBridge.contract.UnpackLog(event, "CreatedWrappedToken", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// EthereumBridgeInitializedIterator is returned from FilterInitialized and is used to iterate over the raw logs and unpacked data for Initialized events raised by the EthereumBridge contract.
type EthereumBridgeInitializedIterator struct {
	Event *EthereumBridgeInitialized // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *EthereumBridgeInitializedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(EthereumBridgeInitialized)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(EthereumBridgeInitialized)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *EthereumBridgeInitializedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *EthereumBridgeInitializedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// EthereumBridgeInitialized represents a Initialized event raised by the EthereumBridge contract.
type EthereumBridgeInitialized struct {
	Version uint64
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterInitialized is a free log retrieval operation binding the contract event 0xc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d2.
//
// Solidity: event Initialized(uint64 version)
func (_EthereumBridge *EthereumBridgeFilterer) FilterInitialized(opts *bind.FilterOpts) (*EthereumBridgeInitializedIterator, error) {

	logs, sub, err := _EthereumBridge.contract.FilterLogs(opts, "Initialized")
	if err != nil {
		return nil, err
	}
	return &EthereumBridgeInitializedIterator{contract: _EthereumBridge.contract, event: "Initialized", logs: logs, sub: sub}, nil
}

// WatchInitialized is a free log subscription operation binding the contract event 0xc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d2.
//
// Solidity: event Initialized(uint64 version)
func (_EthereumBridge *EthereumBridgeFilterer) WatchInitialized(opts *bind.WatchOpts, sink chan<- *EthereumBridgeInitialized) (event.Subscription, error) {

	logs, sub, err := _EthereumBridge.contract.WatchLogs(opts, "Initialized")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(EthereumBridgeInitialized)
				if err := _EthereumBridge.contract.UnpackLog(event, "Initialized", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseInitialized is a log parse operation binding the contract event 0xc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d2.
//
// Solidity: event Initialized(uint64 version)
func (_EthereumBridge *EthereumBridgeFilterer) ParseInitialized(log types.Log) (*EthereumBridgeInitialized, error) {
	event := new(EthereumBridgeInitialized)
	if err := _EthereumBridge.contract.UnpackLog(event, "Initialized", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
