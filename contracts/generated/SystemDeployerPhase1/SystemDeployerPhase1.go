// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package SystemDeployerPhase1

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
	_ = abi.ConvertType
)

// SystemDeployerPhase1MetaData contains all meta data concerning the SystemDeployerPhase1 contract.
var SystemDeployerPhase1MetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"eoaAdmin\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"}],\"name\":\"SystemContractDeployed\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"deployedContracts\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"transactionPostProcessor\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"fees\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"publicCallbacks\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]",
	Bin: "0x608060405234801561000f575f5ffd5b50604051614ae5380380614ae583398101604081905261002e91610383565b6001600160a01b03811661005d5760405162461bcd60e51b8152600401610054906103db565b60405180910390fd5b610066816100df565b5f80546001600160a01b0319166001600160a01b0392909216919091178155610090908290610198565b600180546001600160a01b0319166001600160a01b03929092169190911790556100b981610256565b600280546001600160a01b0319166001600160a01b039290921691909117905550610549565b5f5f6040516100ed9061031e565b604051809103905ff080158015610106573d5f5f3e3d5ffd5b5090505f63c4d66de860e01b8460405160240161012391906103fa565b604051602081830303815290604052906001600160e01b0319166020820180516001600160e01b03838183161783525050505090505f61016a8386846102de60201b60201c565b90505f516020614ac55f395f51905f5281604051610188919061043a565b60405180910390a1949350505050565b5f5f6040516101a69061032b565b604051809103905ff0801580156101bf573d5f5f3e3d5ffd5b5090505f63da35a26f60e01b84866040516024016101de92919061045f565b604051602081830303815290604052906001600160e01b0319166020820180516001600160e01b03838183161783525050505090505f6102258387846102de60201b60201c565b90505f516020614ac55f395f51905f52816040516102439190610493565b60405180910390a1925050505b92915050565b5f5f60405161026490610338565b604051809103905ff08015801561027d573d5f5f3e3d5ffd5b506040805160048152602481019091526020810180516001600160e01b0390811663204a7f0760e21b17909152919250905f906102c0908490879085906102de16565b90505f516020614ac55f395f51905f528160405161018891906104c7565b5f5f8484846040516102ef90610345565b6102fb93929190610513565b604051809103905ff080158015610314573d5f5f3e3d5ffd5b5095945050505050565b6112e78061061883390190565b610aa1806118ff83390190565b611551806123a083390190565b6111d4806138f183390190565b5f6001600160a01b038216610250565b61036b81610352565b8114610375575f5ffd5b50565b805161025081610362565b5f60208284031215610396576103965f5ffd5b6103a08383610378565b9392505050565b60198152602081017f496e76616c696420454f412061646d696e206164647265737300000000000000815290505b60200190565b60208082528101610250816103a7565b6103f481610352565b82525050565b6020810161025082846103eb565b60198152602081017f5472616e73616374696f6e73506f737450726f636573736f7200000000000000815290506103d5565b6040808252810161044a81610408565b905061025060208301846103eb565b806103f4565b6040810161046d8285610459565b6103a060208301846103eb565b6004815260208101634665657360e01b815290506103d5565b6040808252810161044a8161047a565b600f8152602081016e5075626c696343616c6c6261636b7360881b815290506103d5565b6040808252810161044a816104a3565b8281835e505f910152565b5f6104eb825190565b8084526020840193506105028185602086016104d7565b601f01601f19169290920192915050565b6060810161052182866103eb565b61052e60208301856103eb565b818103604083015261054081846104e2565b95945050505050565b60c3806105555f395ff3fe6080604052348015600e575f5ffd5b50600436106026575f3560e01c8063c54a958814602a575b5f5ffd5b5f5460015460025460559273ffffffffffffffffffffffffffffffffffffffff908116928116911683565b6040805173ffffffffffffffffffffffffffffffffffffffff9485168152928416602084015292168183015290519081900360600190f3fea2646970667358221220ba89dd668b4d7507efd1e483bed0e27f7f4c825396f3b60d880583f6ceba90d164736f6c634300081c00336080604052348015600e575f5ffd5b506112cb8061001c5f395ff3fe608060405234801561000f575f5ffd5b50600436106100da575f3560e01c80635100f2ad11610088578063a217fddf11610063578063a217fddf14610241578063c4d66de814610248578063d547741f1461025b578063ee546fd81461026e575f5ffd5b80635100f2ad146101c457806364c55a9d146101d757806391d14854146101ea575f5ffd5b806336568abe116100b857806336568abe1461016a5780634d4a73c41461017d578063508a50f41461019d575f5ffd5b806301ffc9a7146100de578063248a9ca3146101075780632f2ff15d14610155575b5f5ffd5b6100f16100ec366004610bc9565b610281565b6040516100fe9190610bf7565b60405180910390f35b610148610115366004610c16565b5f9081527f02dd7bc7dec4dceedda775e58dd541e08a116c6c53815c0bd028192f7b626800602052604090206001015490565b6040516100fe9190610c39565b610168610163366004610c6b565b610319565b005b610168610178366004610c6b565b610362565b61019061018b366004610c16565b6103b3565b6040516100fe9190610cbe565b6101487ff16bb8781ef1311f8fe06747bcbe481e695502acdcb0cb8c03aa03899e39a59881565b6101686101d2366004610ccc565b6103da565b6101686101e5366004610d37565b610558565b6100f16101f8366004610c6b565b5f9182527f02dd7bc7dec4dceedda775e58dd541e08a116c6c53815c0bd028192f7b626800602090815260408084206001600160a01b0393909316845291905290205460ff1690565b6101485f81565b610168610256366004610ccc565b61065b565b610168610269366004610c6b565b6107bb565b61016861027c366004610ccc565b6107fe565b5f7fffffffff0000000000000000000000000000000000000000000000000000000082167f7965db0b00000000000000000000000000000000000000000000000000000000148061031357507f01ffc9a7000000000000000000000000000000000000000000000000000000007fffffffff000000000000000000000000000000000000000000000000000000008316145b92915050565b5f8281527f02dd7bc7dec4dceedda775e58dd541e08a116c6c53815c0bd028192f7b626800602052604090206001015461035281610907565b61035c8383610914565b50505050565b6001600160a01b03811633146103a4576040517f6697b23200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6103ae82826109e0565b505050565b5f81815481106103c1575f80fd5b5f918252602090912001546001600160a01b0316905081565b7ff16bb8781ef1311f8fe06747bcbe481e695502acdcb0cb8c03aa03899e39a59861040481610907565b6001600160a01b0382166104335760405162461bcd60e51b815260040161042a90610db0565b60405180910390fd5b5f8054905b8181101561053b57836001600160a01b03165f828154811061045c5761045c610dc0565b5f918252602090912001546001600160a01b031603610533575f610481600184610de8565b8154811061049157610491610dc0565b5f91825260208220015481546001600160a01b039091169190839081106104ba576104ba610dc0565b5f9182526020822001805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0393909316929092179091558054806104fe576104fe610dfb565b5f8281526020902081015f19908101805473ffffffffffffffffffffffffffffffffffffffff19169055019055506105549050565b600101610438565b5060405162461bcd60e51b815260040161042a90610e41565b5050565b5f610564600130610e51565b9050336001600160a01b0382161461058e5760405162461bcd60e51b815260040161042a90610ea6565b5f8290036105ae5760405162461bcd60e51b815260040161042a90610ee8565b5f5b5f5481101561035c575f5f82815481106105cc576105cc610dc0565b5f918252602090912001546040517f9f9976af0000000000000000000000000000000000000000000000000000000081526001600160a01b0390911691508190639f9976af9061062290889088906004016111c9565b5f604051808303815f87803b158015610639575f5ffd5b505af115801561064b573d5f5f3e3d5ffd5b50505050508060010190506105b0565b5f610664610a84565b805490915060ff68010000000000000000820416159067ffffffffffffffff165f811580156106905750825b90505f8267ffffffffffffffff1660011480156106ac5750303b155b9050811580156106ba575080155b156106f1576040517ff92ee8a900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b845467ffffffffffffffff19166001178555831561072557845468ff00000000000000001916680100000000000000001785555b61072d610aac565b6107375f87610914565b506107627ff16bb8781ef1311f8fe06747bcbe481e695502acdcb0cb8c03aa03899e39a59887610914565b5083156107b357845468ff0000000000000000191685556040517fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d2906107aa906001906111fd565b60405180910390a15b505050505050565b5f8281527f02dd7bc7dec4dceedda775e58dd541e08a116c6c53815c0bd028192f7b62680060205260409020600101546107f481610907565b61035c83836109e0565b7ff16bb8781ef1311f8fe06747bcbe481e695502acdcb0cb8c03aa03899e39a59861082881610907565b6001600160a01b03821661084e5760405162461bcd60e51b815260040161042a90610db0565b5f826001600160a01b03163b116108775760405162461bcd60e51b815260040161042a9061120b565b5f80546001810182559080527f290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e56301805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0384161790556040517f3206984d30c94bcf064cb1df53d334a1fe97a7931023e3c1ea98fa76a973cc80906108fb90849061126c565b60405180910390a15050565b6109118133610ab6565b50565b5f8281527f02dd7bc7dec4dceedda775e58dd541e08a116c6c53815c0bd028192f7b626800602081815260408084206001600160a01b038616855290915282205460ff166109d7575f848152602082815260408083206001600160a01b03871684529091529020805460ff1916600117905561098d3390565b6001600160a01b0316836001600160a01b0316857f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a46001915050610313565b5f915050610313565b5f8281527f02dd7bc7dec4dceedda775e58dd541e08a116c6c53815c0bd028192f7b626800602081815260408084206001600160a01b038616855290915282205460ff16156109d7575f848152602082815260408083206001600160a01b0387168085529252808320805460ff1916905551339287917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a46001915050610313565b5f807ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00610313565b610ab4610b34565b565b5f8281527f02dd7bc7dec4dceedda775e58dd541e08a116c6c53815c0bd028192f7b626800602090815260408083206001600160a01b038516845290915290205460ff166105545780826040517fe2517d3f00000000000000000000000000000000000000000000000000000000815260040161042a92919061127a565b610b3c610b72565b610ab4576040517fd7e6bcf800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5f610b7b610a84565b5468010000000000000000900460ff16919050565b7fffffffff0000000000000000000000000000000000000000000000000000000081165b8114610911575f5ffd5b803561031381610b90565b5f60208284031215610bdc57610bdc5f5ffd5b610be68383610bbe565b9392505050565b8015155b82525050565b602081016103138284610bed565b80610bb4565b803561031381610c05565b5f60208284031215610c2957610c295f5ffd5b610be68383610c0b565b80610bf1565b602081016103138284610c33565b5f6001600160a01b038216610313565b610bb481610c47565b803561031381610c57565b5f5f60408385031215610c7f57610c7f5f5ffd5b610c898484610c0b565b9150610c988460208501610c60565b90509250929050565b5f61031382610c47565b5f61031382610ca1565b610bf181610cab565b602081016103138284610cb5565b5f60208284031215610cdf57610cdf5f5ffd5b610be68383610c60565b5f5f83601f840112610cfc57610cfc5f5ffd5b50813567ffffffffffffffff811115610d1657610d165f5ffd5b602083019150836020820283011115610d3057610d305f5ffd5b9250929050565b5f5f60208385031215610d4b57610d4b5f5ffd5b823567ffffffffffffffff811115610d6457610d645f5ffd5b610d7085828601610ce9565b92509250509250929050565b60188152602081017f496e76616c69642063616c6c6261636b20616464726573730000000000000000815290505b60200190565b6020808252810161031381610d7c565b634e487b7160e01b5f52603260045260245ffd5b634e487b7160e01b5f52601160045260245ffd5b8181038181111561031357610313610dd4565b634e487b7160e01b5f52603160045260245ffd5b60128152602081017f43616c6c6261636b206e6f7420666f756e64000000000000000000000000000081529050610daa565b6020808252810161031381610e0f565b6001600160a01b0391821691908116908282039081111561031357610313610dd4565b60088152602081017f4e6f742073656c6600000000000000000000000000000000000000000000000081529050610daa565b6020808252810161031381610e74565b601a8152602081017f4e6f207472616e73616374696f6e7320746f20636f6e7665727400000000000081529050610daa565b6020808252810161031381610eb6565b60ff8116610bb4565b803561031381610ef8565b505f6103136020830183610f01565b60ff8116610bf1565b505f6103136020830183610c0b565b505f6103136020830183610c60565b610bf181610c47565b5f808335601e1936859003018112610f6457610f645f5ffd5b830160208101925035905067ffffffffffffffff811115610f8657610f865f5ffd5b36819003821315610d3057610d305f5ffd5b82818337505f910152565b818352602083019250610fb7828483610f98565b50601f01601f19160190565b801515610bb4565b803561031381610fc3565b505f6103136020830183610fcb565b67ffffffffffffffff8116610bb4565b803561031381610fe5565b505f6103136020830183610ff5565b67ffffffffffffffff8116610bf1565b5f610140830161102f8380610f0c565b6110398582610f1b565b506110476020840184610f24565b6110546020860182610c33565b506110626040840184610f24565b61106f6040860182610c33565b5061107d6060840184610f24565b61108a6060860182610c33565b506110986080840184610f33565b6110a56080860182610f42565b506110b360a0840184610f24565b6110c060a0860182610c33565b506110ce60c0840184610f4b565b85830360c08701526110e1838284610fa3565b925050506110f260e0840184610f33565b6110ff60e0860182610f42565b5061110e610100840184610fd6565b61111c610100860182610bed565b5061112b610120840184611000565b61113961012086018261100f565b509392505050565b5f610be6838361101f565b5f823561013e1936849003018112611165576111655f5ffd5b90910192915050565b8183526020830192505f8360208402810183805f5b878110156111bc57848403895261119a828461114c565b6111a48582611141565b94505060208201602099909901989150600101611183565b5091979650505050505050565b602080825281016111db81848661116e565b949350505050565b5f67ffffffffffffffff8216610313565b610bf1816111e3565b6020810161031382846111f4565b6020808252810161031381602381527f43616c6c6261636b2061646472657373206d757374206265206120636f6e747260208201527f6163740000000000000000000000000000000000000000000000000000000000604082015260600190565b602081016103138284610f42565b604081016112888285610f42565b610be66020830184610c3356fea264697066735822122064379b19e0bc504747b3d3e6fbd250d5d3c7ae9a8d6cc5d96d3591f30e13a86a64736f6c634300081c0033608060405234801561000f575f5ffd5b50610018610025565b610020610025565b610104565b5f61002e6100c5565b805490915068010000000000000000900460ff16156100605760405163f92ee8a960e01b815260040160405180910390fd5b80546001600160401b03908116146100c25780546001600160401b0319166001600160401b0390811782556040517fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d2916100b9916100ef565b60405180910390a15b50565b5f807ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a005b92915050565b6001600160401b0382168152602081016100e9565b610990806101115f395ff3fe6080604052600436106100b0575f3560e01c80639003adfe11610066578063da35a26f1161004c578063da35a26f14610170578063e30c39781461018f578063f2fde38b146101a3575f5ffd5b80639003adfe1461014a578063afe997ea1461015c575f5ffd5b8063715018a611610096578063715018a61461010157806379ba5097146101155780638da5cb5b14610129575f5ffd5b80631a90a219146100bb57806323aa2a9d146100e0575f5ffd5b366100b757005b5f5ffd5b3480156100c6575f5ffd5b505f545b6040516100d7919061077f565b60405180910390f35b3480156100eb575f5ffd5b506100ff6100fa3660046107a4565b6101c2565b005b34801561010c575f5ffd5b506100ff61020f565b348015610120575f5ffd5b506100ff610238565b348015610134575f5ffd5b5061013d610277565b6040516100d791906107e1565b348015610155575f5ffd5b50476100ca565b348015610167575f5ffd5b506100ff6102ab565b34801561017b575f5ffd5b506100ff61018a366004610803565b610359565b34801561019a575f5ffd5b5061013d6104c1565b3480156101ae575f5ffd5b506100ff6101bd366004610839565b6104e9565b6101ca61057b565b5f8054908290556040517f5fc463da23c1b063e66f9e352006a7fbe8db7223c455dc429e881a2dfe2f94f1906102039083908590610856565b60405180910390a15050565b61021761057b565b60405162461bcd60e51b815260040161022f90610871565b60405180910390fd5b33806102426104c1565b6001600160a01b03161461026b578060405163118cdaa760e01b815260040161022f91906107e1565b610274816105af565b50565b5f807f9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c1993005b546001600160a01b031692915050565b6102b361057b565b475f6102bd610277565b6001600160a01b0316826040515f6040518083038185875af1925050503d805f8114610304576040519150601f19603f3d011682016040523d82523d5f602084013e610309565b606091505b505090508061032a5760405162461bcd60e51b815260040161022f906108d2565b7fb7eeacba6b133788365610e83d3f130d07b6ef6e78877961f25b3f61fcba075282604051610203919061077f565b5f6103626105f8565b805490915060ff68010000000000000000820416159067ffffffffffffffff165f8115801561038e5750825b90505f8267ffffffffffffffff1660011480156103aa5750303b155b9050811580156103b8575080155b156103ef576040517ff92ee8a900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b845467ffffffffffffffff19166001178555831561042357845468ff00000000000000001916680100000000000000001785555b61042c86610622565b5f8781556040517f5fc463da23c1b063e66f9e352006a7fbe8db7223c455dc429e881a2dfe2f94f191610460918a90610924565b60405180910390a183156104b857845468ff0000000000000000191685556040517fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d2906104af9060019061094c565b60405180910390a15b50505050505050565b5f807f237e158222e3e6968b72b9db0d8043aacf074ad9f650f0d1606b4d82ee432c0061029b565b6104f161057b565b7f237e158222e3e6968b72b9db0d8043aacf074ad9f650f0d1606b4d82ee432c00805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0383169081178255610542610277565b6001600160a01b03167f38d16b8cac22d99fc7c124b9cd0de2d3fa1faef420bfe791d8c362d765e2270060405160405180910390a35050565b33610584610277565b6001600160a01b0316146105ad573360405163118cdaa760e01b815260040161022f91906107e1565b565b7f237e158222e3e6968b72b9db0d8043aacf074ad9f650f0d1606b4d82ee432c00805473ffffffffffffffffffffffffffffffffffffffff191681556105f48261063b565b5050565b5f807ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a005b92915050565b61062a6106b8565b610633816106f6565b610274610707565b7f9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c199300805473ffffffffffffffffffffffffffffffffffffffff1981166001600160a01b03848116918217845560405192169182907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0905f90a3505050565b6106c061070f565b6105ad576040517fd7e6bcf800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6106fe6106b8565b6102748161072d565b6105ad6106b8565b5f6107186105f8565b5468010000000000000000900460ff16919050565b6107356106b8565b6001600160a01b03811661026b575f6040517f1e4fbdf700000000000000000000000000000000000000000000000000000000815260040161022f91906107e1565b805b82525050565b6020810161061c8284610777565b805b8114610274575f5ffd5b803561061c8161078d565b5f602082840312156107b7576107b75f5ffd5b6107c18383610799565b9392505050565b5f6001600160a01b03821661061c565b610779816107c8565b6020810161061c82846107d8565b61078f816107c8565b803561061c816107ef565b5f5f60408385031215610817576108175f5ffd5b6108218484610799565b915061083084602085016107f8565b90509250929050565b5f6020828403121561084c5761084c5f5ffd5b6107c183836107f8565b604081016108648285610777565b6107c16020830184610777565b6020808252810161061c81603481527f556e72656e6f756e6361626c654f776e61626c6532537465703a2063616e6e6f60208201527f742072656e6f756e6365206f776e657273686970000000000000000000000000604082015260600190565b6020808252810161061c81601481527f4661696c656420746f2073656e64204574686572000000000000000000000000602082015260400190565b5f61061c6109188381565b90565b6107798161090d565b60408101610864828561091b565b5f67ffffffffffffffff821661061c565b61077981610932565b6020810161061c828461094356fea2646970667358221220d725f5f5350eaf1424b55fca23d010c2b94bd499618b61bea500d6e8cfa18c0c64736f6c634300081c0033608060405234801561000f575f5ffd5b5061001861001d565b6100fc565b5f6100266100bd565b805490915068010000000000000000900460ff16156100585760405163f92ee8a960e01b815260040160405180910390fd5b80546001600160401b03908116146100ba5780546001600160401b0319166001600160401b0390811782556040517fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d2916100b1916100e7565b60405180910390a15b50565b5f807ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a005b92915050565b6001600160401b0382168152602081016100e1565b611448806101095f395ff3fe60806040526004361061006d575f3560e01c8063929d34e91161004c578063929d34e9146100e05780639fb56ad2146100ff578063a67e17601461011e578063d98c616914610132575f5ffd5b8062e0d3b5146100715780638129fc1c146100aa57806382fbdc9c146100c0575b5f5ffd5b34801561007c575f5ffd5b5061009061008b366004610db1565b61015d565b6040516100a1959493929190610e2f565b60405180910390f35b3480156100b5575f5ffd5b506100be610226565b005b6100d36100ce366004610ed0565b610347565b6040516100a19190610f15565b3480156100eb575f5ffd5b506100be6100fa366004610db1565b6103ae565b34801561010a575f5ffd5b506100be610119366004610db1565b6105f0565b348015610129575f5ffd5b506100be61075a565b34801561013d575f5ffd5b506100d361014c366004610db1565b60036020525f908152604090205481565b5f60208190529081526040902080546001820180546001600160a01b03909216929161018890610f37565b80601f01602080910402602001604051908101604052809291908181526020018280546101b490610f37565b80156101ff5780601f106101d6576101008083540402835291602001916101ff565b820191905f5260205f20905b8154815290600101906020018083116101e257829003601f168201915b5050505060028301546003840154600490940154929390929091506001600160a01b031685565b5f61022f6107ab565b805490915060ff68010000000000000000820416159067ffffffffffffffff165f8115801561025b5750825b90505f8267ffffffffffffffff1660011480156102775750303b155b905081158015610285575080155b156102bc576040517ff92ee8a900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b845467ffffffffffffffff1916600117855583156102f057845468ff00000000000000001916680100000000000000001785555b831561034057845468ff0000000000000000191685556040517fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d29061033790600190610f86565b60405180910390a15b5050505050565b5f5f34116103705760405162461bcd60e51b815260040161036790610fc8565b60405180910390fd5b61520861037c346107d3565b116103995760405162461bcd60e51b815260040161036790611032565b6103a5338484346107de565b90505b92915050565b5f81815260036020526040902054819043116103dc5760405162461bcd60e51b81526004016103679061109a565b5f82815260208181526040808320815160a0810190925280546001600160a01b03168252600181018054929391929184019161041790610f37565b80601f016020809104026020016040519081016040528092919081815260200182805461044390610f37565b801561048e5780601f106104655761010080835404028352916020019161048e565b820191905f5260205f20905b81548152906001019060200180831161047157829003601f168201915b505050918352505060028201546020820152600382015460408201526004909101546001600160a01b039081166060909201919091528151919250166104e65760405162461bcd60e51b8152600401610367906110dc565b60808101516001600160a01b031633146105125760405162461bcd60e51b81526004016103679061111e565b805160208201516040515f926001600160a01b0316916105319161114f565b5f604051808303815f865af19150503d805f811461056a576040519150601f19603f3d011682016040523d82523d5f602084013e61056f565b606091505b50509050806105905760405162461bcd60e51b81526004016103679061118b565b5f84815260208190526040812080546001600160a01b0319168155906105b96001830182610d60565b505f600282018190556003808301829055600490920180546001600160a01b03191690559485526020525050604082209190915550565b5f81815260208181526040808320815160a0810190925280546001600160a01b03168252600181018054929391929184019161062b90610f37565b80601f016020809104026020016040519081016040528092919081815260200182805461065790610f37565b80156106a25780601f10610679576101008083540402835291602001916106a2565b820191905f5260205f20905b81548152906001019060200180831161068557829003601f168201915b505050918352505060028201546020820152600382015460408201526004909101546001600160a01b0390811660609092019190915260808201519192501633146106ff5760405162461bcd60e51b81526004016103679061111e565b5f82815260208190526040812080546001600160a01b0319168155906107286001830182610d60565b505f600282018190556003808301829055600490920180546001600160a01b0319169055928352602052506040812055565b5f6107666001306111af565b9050336001600160a01b038216146107905760405162461bcd60e51b815260040161036790611204565b600254600154146107a8576107a3610931565b610790565b50565b5f807ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a006103a8565b5f6103a84883611228565b5f60015490506040518060a00160405280866001600160a01b0316815260200185858080601f0160208091040260200160405190810160405280939291908181526020018383808284375f92018290525093855250505060208201859052486040830152336060909201919091526001805482918261085c8361123b565b9091555081526020808201929092526040015f20825181546001600160a01b0319166001600160a01b0390911617815590820151600182019061089f90826112fc565b5060408281015160028301556060830151600380840191909155608090930151600490920180546001600160a01b0319166001600160a01b03909316929092179091555f83815260209290925290819020439055517f3dcab49ed22ae75e876805945c8ebd2a1b325e5e8c4a1f0bc0959e62e18cc9c490610921908390610f15565b60405180910390a1949350505050565b6002546001540361093e57565b5f5f610948610a89565b915091505f826060015190505f8184604001516109659190611228565b90505f5a90505f855f01516001600160a01b031683876020015160405161098c919061114f565b5f604051808303815f8787f1925050503d805f81146109c6576040519150601f19603f3d011682016040523d82523d5f602084013e6109cb565b606091505b505090505f5a90505f6109de82856113b8565b90505f81861115610a0157866109f483886113b8565b6109fe91906113cb565b90505b5f818a60400151610a1291906113b8565b8a519091508515610a2557610a25610bbd565b610a2d610c1e565b610a3883828c610c34565b610a4182610d0e565b7f79867de645e468e8c09d74e8be7ed5d3ffcb800407d63d145988787eb329c9b28a8887604051610a74939291906113e2565b60405180910390a15050505050505050505050565b610ac96040518060a001604052805f6001600160a01b03168152602001606081526020015f81526020015f81526020015f6001600160a01b031681525090565b6002545f81815260208181526040808320815160a0810190925280546001600160a01b0316825260018101805494959194919385929084019190610b0c90610f37565b80601f0160208091040260200160405190810160405280929190818152602001828054610b3890610f37565b8015610b835780601f10610b5a57610100808354040283529160200191610b83565b820191905f5260205f20905b815481529060010190602001808311610b6657829003601f168201915b505050918352505060028201546020820152600382015460408201526004909101546001600160a01b031660609091015294909350915050565b6002545f90815260208190526040812080546001600160a01b031916815590610be96001830182610d60565b505f60028281018290556003808401839055600490930180546001600160a01b03191690555481526020919091526040812055565b60028054905f610c2d8361123b565b9190505550565b5f81604051602401610c469190610f15565b60408051601f198184030181529181526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f5ea3955800000000000000000000000000000000000000000000000000000000179052519091505f906001600160a01b0385169061afc8908790610cc090869061114f565b5f60405180830381858888f193505050503d805f8114610cfb576040519150601f19603f3d011682016040523d82523d5f602084013e610d00565b606091505b505090508061034057610340855b805f03610d185750565b604051419082905f81818185875af1925050503d805f8114610d55576040519150601f19603f3d011682016040523d82523d5f602084013e610d5a565b606091505b50505050565b508054610d6c90610f37565b5f825580601f10610d7b575050565b601f0160209004905f5260205f20908101906107a891905b80821115610da6575f8155600101610d93565b5090565b80356103a8565b5f60208284031215610dc457610dc45f5ffd5b6103a58383610daa565b5f6001600160a01b0382166103a8565b610de781610dce565b82525050565b8281835e505f910152565b5f610e01825190565b808452602084019350610e18818560208601610ded565b601f01601f19169290920192915050565b80610de7565b60a08101610e3d8288610dde565b8181036020830152610e4f8187610df8565b9050610e5e6040830186610e29565b610e6b6060830185610e29565b610e786080830184610dde565b9695505050505050565b5f5f83601f840112610e9557610e955f5ffd5b50813567ffffffffffffffff811115610eaf57610eaf5f5ffd5b602083019150836001820283011115610ec957610ec95f5ffd5b9250929050565b5f5f60208385031215610ee457610ee45f5ffd5b823567ffffffffffffffff811115610efd57610efd5f5ffd5b610f0985828601610e82565b92509250509250929050565b602081016103a88284610e29565b634e487b7160e01b5f52602260045260245ffd5b600281046001821680610f4b57607f821691505b602082108103610f5d57610f5d610f23565b50919050565b5f6103a882610f70565b90565b67ffffffffffffffff1690565b610de781610f63565b602081016103a88284610f7d565b600d8152602081017f4e6f2076616c75652073656e7400000000000000000000000000000000000000815290505b60200190565b602080825281016103a881610f94565b60248152602081017f47617320746f6f206c6f7720636f6d706172656420746f20636f7374206f662081527f63616c6c00000000000000000000000000000000000000000000000000000000602082015290505b60400190565b602080825281016103a881610fd8565b60228152602081017f43616c6c6261636b2063616e6e6f74206265207265617474656d70746564207981527f65740000000000000000000000000000000000000000000000000000000000006020820152905061102c565b602080825281016103a881611042565b60178152602081017f43616c6c6261636b20646f6573206e6f7420657869737400000000000000000081529050610fc2565b602080825281016103a8816110aa565b60098152602081017f4e6f74206f776e6572000000000000000000000000000000000000000000000081529050610fc2565b602080825281016103a8816110ec565b5f611137825190565b611145818560208601610ded565b9290920192915050565b6103a8818361112e565b60198152602081017f43616c6c6261636b20657865637574696f6e206661696c65640000000000000081529050610fc2565b602080825281016103a881611159565b634e487b7160e01b5f52601160045260245ffd5b6001600160a01b039182169190811690828203908111156103a8576103a861119b565b60088152602081017f4e6f742073656c6600000000000000000000000000000000000000000000000081529050610fc2565b602080825281016103a8816111d2565b634e487b7160e01b5f52601260045260245ffd5b5f8261123657611236611214565b500490565b5f6001820161124c5761124c61119b565b5060010190565b634e487b7160e01b5f52604160045260245ffd5b5f6103a8610f6d8381565b61127b83611267565b81545f1960089490940293841b1916921b91909117905550565b5f6112a1818484611272565b505050565b818110156112c0576112b85f82611295565b6001016112a6565b5050565b601f8211156112a1575f818152602090206020601f850104810160208510156112ea5750805b6103406020601f8601048301826112a6565b815167ffffffffffffffff81111561131657611316611253565b6113208254610f37565b61132b8282856112c4565b506020601f82116001811461135e575f83156113475750848201515b5f19600885021c1981166002850217855550610340565b5f84815260208120601f198516915b8281101561138d578785015182556020948501946001909201910161136d565b50848210156113a957838701515f19601f87166008021c191681555b50505050600202600101905550565b818103818111156103a8576103a861119b565b81810281158282048414176103a8576103a861119b565b606081016113f08286610e29565b6113fd6020830185610e29565b61140a6040830184610e29565b94935050505056fea2646970667358221220e6f48eb886e8fa15fc1d04a159da53c83a1d8a1851d791d720b9b68cf50ffc5c64736f6c634300081c003360a06040526040516111d43803806111d48339810160408190526100229161043b565b828161002e8282610086565b50508160405161003d90610311565b61004791906104ac565b604051809103905ff080158015610060573d5f5f3e3d5ffd5b506001600160a01b031660805261007e61007960805190565b6100e4565b505050610500565b61008f82610146565b6040516001600160a01b038316907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b905f90a28051156100d8576100d382826101bf565b505050565b6100e0610234565b5050565b7f7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f6101235f5160206111b45f395f51905f52546001600160a01b031690565b826040516101329291906104ba565b60405180910390a161014381610255565b50565b806001600160a01b03163b5f0361017b5780604051634c9c8ce360e01b815260040161017291906104ac565b60405180910390fd5b807f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc5b80546001600160a01b0319166001600160a01b039290921691909117905550565b60605f5f846001600160a01b0316846040516101db91906104f6565b5f60405180830381855af49150503d805f8114610213576040519150601f19603f3d011682016040523d82523d5f602084013e610218565b606091505b509092509050610229858383610292565b925050505b92915050565b34156102535760405163b398979f60e01b815260040160405180910390fd5b565b6001600160a01b03811661027e575f604051633173bdd160e11b815260040161017291906104ac565b805f5160206111b45f395f51905f5261019e565b6060826102a7576102a2826102e8565b6102e1565b81511580156102be57506001600160a01b0384163b155b156102de5783604051639996b31560e01b815260040161017291906104ac565b50805b9392505050565b8051156102f85780518082602001fd5b60405163d6bda27560e01b815260040160405180910390fd5b6106a680610b0e83390190565b5f6001600160a01b03821661022e565b6103378161031e565b8114610143575f5ffd5b805161022e8161032e565b634e487b7160e01b5f52604160045260245ffd5b601f19601f83011681016001600160401b03811182821017156103855761038561034c565b6040525050565b5f61039660405190565b90506103a28282610360565b919050565b5f6001600160401b038211156103bf576103bf61034c565b601f19601f83011660200192915050565b8281835e505f910152565b5f6103ed6103e8846103a7565b61038c565b9050828152838383011115610403576104035f5ffd5b6102e18360208301846103d0565b5f82601f830112610423576104235f5ffd5b81516104338482602086016103db565b949350505050565b5f5f5f60608486031215610450576104505f5ffd5b61045a8585610341565b92506104698560208601610341565b60408501519092506001600160401b03811115610487576104875f5ffd5b61049386828701610411565b9150509250925092565b6104a68161031e565b82525050565b6020810161022e828461049d565b604081016104c8828561049d565b6102e1602083018461049d565b5f6104de825190565b6104ec8185602086016103d0565b9290920192915050565b61022e81836104d5565b6080516105f76105175f395f601001526105f75ff3fe608060405261000c61000e565b005b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031633036100c4575f357fffffffff00000000000000000000000000000000000000000000000000000000167f4f1ef28600000000000000000000000000000000000000000000000000000000146100ba576040517fd2b576ec00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6100c26100cc565b565b6100c26100fa565b5f806100db36600481846103c0565b8101906100e8919061051c565b915091506100f6828261010a565b5050565b6100c2610105610164565b61019b565b610113826101b9565b6040516001600160a01b038316907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b905f90a280511561015c576101578282610260565b505050565b6100f66102d4565b5f6101967f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc546001600160a01b031690565b905090565b365f5f375f5f365f845af43d5f5f3e8080156101b5573d5ff35b3d5ffd5b806001600160a01b03163b5f0361020757806040517f4c9c8ce30000000000000000000000000000000000000000000000000000000081526004016101fe919061057d565b60405180910390fd5b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc80547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b0392909216919091179055565b60605f5f846001600160a01b03168460405161027c91906105b7565b5f60405180830381855af49150503d805f81146102b4576040519150601f19603f3d011682016040523d82523d5f602084013e6102b9565b606091505b50915091506102c985838361030c565b925050505b92915050565b34156100c2576040517fb398979f00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6060826103215761031c8261037b565b610374565b815115801561033857506001600160a01b0384163b155b1561037157836040517f9996b3150000000000000000000000000000000000000000000000000000000081526004016101fe919061057d565b50805b9392505050565b80511561038b5780518082602001fd5b6040517fd6bda27500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b50565b5f5f858511156103d1576103d15f5ffd5b838611156103e0576103e05f5ffd5b5050820193919092039150565b5f6001600160a01b0382166102ce565b610406816103ed565b81146103bd575f5ffd5b80356102ce816103fd565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b601f19601f830116810181811067ffffffffffffffff8211171561046e5761046e61041b565b6040525050565b5f61047f60405190565b905061048b8282610448565b919050565b5f67ffffffffffffffff8211156104a9576104a961041b565b601f19601f83011660200192915050565b82818337505f910152565b5f6104d76104d284610490565b610475565b90508281528383830111156104ed576104ed5f5ffd5b6103748360208301846104ba565b5f82601f83011261050d5761050d5f5ffd5b610374838335602085016104c5565b5f5f60408385031215610530576105305f5ffd5b61053a8484610410565b9150602083013567ffffffffffffffff811115610558576105585f5ffd5b610564858286016104fb565b9150509250929050565b610577816103ed565b82525050565b602081016102ce828461056e565b8281835e505f910152565b5f61059f825190565b6105ad81856020860161058b565b9290920192915050565b6102ce818361059656fea26469706673582212201cedf6524dec6aa4b1c8bfa7c9f2a82fd0ab4dd8a93113aec84110724f387fe364736f6c634300081c0033608060405234801561000f575f5ffd5b506040516106a63803806106a683398101604081905261002e916100f3565b806001600160a01b038116610061575f604051631e4fbdf760e01b81526004016100589190610126565b60405180910390fd5b61006a81610071565b5050610134565b5f80546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b5f6001600160a01b0382165b92915050565b6100db816100c0565b81146100e5575f5ffd5b50565b80516100cc816100d2565b5f60208284031215610106576101065f5ffd5b61011083836100e8565b9392505050565b610120816100c0565b82525050565b602081016100cc8284610117565b610565806101415f395ff3fe608060405260043610610058575f3560e01c80639623609d116100415780639623609d1461009f578063ad3cb1cc146100b2578063f2fde38b14610107575f5ffd5b8063715018a61461005c5780638da5cb5b14610072575b5f5ffd5b348015610067575f5ffd5b50610070610126565b005b34801561007d575f5ffd5b505f546001600160a01b031660405161009691906102e9565b60405180910390f35b6100706100ad36600461043b565b610139565b3480156100bd575f5ffd5b506100fa6040518060400160405280600581526020017f352e302e3000000000000000000000000000000000000000000000000000000081525081565b60405161009691906104d9565b348015610112575f5ffd5b506100706101213660046104ea565b6101bd565b61012e61021c565b6101375f610261565b565b61014161021c565b6040517f4f1ef2860000000000000000000000000000000000000000000000000000000081526001600160a01b03841690634f1ef28690349061018a9086908690600401610507565b5f604051808303818588803b1580156101a1575f5ffd5b505af11580156101b3573d5f5f3e3d5ffd5b5050505050505050565b6101c561021c565b6001600160a01b038116610210575f6040517f1e4fbdf700000000000000000000000000000000000000000000000000000000815260040161020791906102e9565b60405180910390fd5b61021981610261565b50565b5f546001600160a01b0316331461013757336040517f118cdaa700000000000000000000000000000000000000000000000000000000815260040161020791906102e9565b5f80546001600160a01b038381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b5f6001600160a01b0382165b92915050565b6102e3816102c8565b82525050565b602081016102d482846102da565b5f6102d4826102c8565b61030a816102f7565b8114610219575f5ffd5b80356102d481610301565b61030a816102c8565b80356102d48161031f565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b601f19601f830116810181811067ffffffffffffffff8211171561038657610386610333565b6040525050565b5f61039760405190565b90506103a38282610360565b919050565b5f67ffffffffffffffff8211156103c1576103c1610333565b601f19601f83011660200192915050565b82818337505f910152565b5f6103ef6103ea846103a8565b61038d565b9050828152838383011115610405576104055f5ffd5b6104138360208301846103d2565b9392505050565b5f82601f83011261042c5761042c5f5ffd5b610413838335602085016103dd565b5f5f5f60608486031215610450576104505f5ffd5b61045a8585610314565b92506104698560208601610328565b9150604084013567ffffffffffffffff811115610487576104875f5ffd5b6104938682870161041a565b9150509250925092565b8281835e505f910152565b5f6104b1825190565b8084526020840193506104c881856020860161049d565b601f01601f19169290920192915050565b6020808252810161041381846104a8565b5f602082840312156104fd576104fd5f5ffd5b6104138383610328565b6040810161051582856102da565b818103602083015261052781846104a8565b94935050505056fea2646970667358221220a75fd2ab36f24ab4aa217b7ce41624c9aa24760a040e91c069e895b5347fd5d864736f6c634300081c0033b53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103bd64e14789a915ea657e42f2dbf0b973227708fa64b58766287637985d1ade69",
}

// SystemDeployerPhase1ABI is the input ABI used to generate the binding from.
// Deprecated: Use SystemDeployerPhase1MetaData.ABI instead.
var SystemDeployerPhase1ABI = SystemDeployerPhase1MetaData.ABI

// SystemDeployerPhase1Bin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use SystemDeployerPhase1MetaData.Bin instead.
var SystemDeployerPhase1Bin = SystemDeployerPhase1MetaData.Bin

// DeploySystemDeployerPhase1 deploys a new Ethereum contract, binding an instance of SystemDeployerPhase1 to it.
func DeploySystemDeployerPhase1(auth *bind.TransactOpts, backend bind.ContractBackend, eoaAdmin common.Address) (common.Address, *types.Transaction, *SystemDeployerPhase1, error) {
	parsed, err := SystemDeployerPhase1MetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(SystemDeployerPhase1Bin), backend, eoaAdmin)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &SystemDeployerPhase1{SystemDeployerPhase1Caller: SystemDeployerPhase1Caller{contract: contract}, SystemDeployerPhase1Transactor: SystemDeployerPhase1Transactor{contract: contract}, SystemDeployerPhase1Filterer: SystemDeployerPhase1Filterer{contract: contract}}, nil
}

// SystemDeployerPhase1 is an auto generated Go binding around an Ethereum contract.
type SystemDeployerPhase1 struct {
	SystemDeployerPhase1Caller     // Read-only binding to the contract
	SystemDeployerPhase1Transactor // Write-only binding to the contract
	SystemDeployerPhase1Filterer   // Log filterer for contract events
}

// SystemDeployerPhase1Caller is an auto generated read-only Go binding around an Ethereum contract.
type SystemDeployerPhase1Caller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// SystemDeployerPhase1Transactor is an auto generated write-only Go binding around an Ethereum contract.
type SystemDeployerPhase1Transactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// SystemDeployerPhase1Filterer is an auto generated log filtering Go binding around an Ethereum contract events.
type SystemDeployerPhase1Filterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// SystemDeployerPhase1Session is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type SystemDeployerPhase1Session struct {
	Contract     *SystemDeployerPhase1 // Generic contract binding to set the session for
	CallOpts     bind.CallOpts         // Call options to use throughout this session
	TransactOpts bind.TransactOpts     // Transaction auth options to use throughout this session
}

// SystemDeployerPhase1CallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type SystemDeployerPhase1CallerSession struct {
	Contract *SystemDeployerPhase1Caller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts               // Call options to use throughout this session
}

// SystemDeployerPhase1TransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type SystemDeployerPhase1TransactorSession struct {
	Contract     *SystemDeployerPhase1Transactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts               // Transaction auth options to use throughout this session
}

// SystemDeployerPhase1Raw is an auto generated low-level Go binding around an Ethereum contract.
type SystemDeployerPhase1Raw struct {
	Contract *SystemDeployerPhase1 // Generic contract binding to access the raw methods on
}

// SystemDeployerPhase1CallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type SystemDeployerPhase1CallerRaw struct {
	Contract *SystemDeployerPhase1Caller // Generic read-only contract binding to access the raw methods on
}

// SystemDeployerPhase1TransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type SystemDeployerPhase1TransactorRaw struct {
	Contract *SystemDeployerPhase1Transactor // Generic write-only contract binding to access the raw methods on
}

// NewSystemDeployerPhase1 creates a new instance of SystemDeployerPhase1, bound to a specific deployed contract.
func NewSystemDeployerPhase1(address common.Address, backend bind.ContractBackend) (*SystemDeployerPhase1, error) {
	contract, err := bindSystemDeployerPhase1(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &SystemDeployerPhase1{SystemDeployerPhase1Caller: SystemDeployerPhase1Caller{contract: contract}, SystemDeployerPhase1Transactor: SystemDeployerPhase1Transactor{contract: contract}, SystemDeployerPhase1Filterer: SystemDeployerPhase1Filterer{contract: contract}}, nil
}

// NewSystemDeployerPhase1Caller creates a new read-only instance of SystemDeployerPhase1, bound to a specific deployed contract.
func NewSystemDeployerPhase1Caller(address common.Address, caller bind.ContractCaller) (*SystemDeployerPhase1Caller, error) {
	contract, err := bindSystemDeployerPhase1(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &SystemDeployerPhase1Caller{contract: contract}, nil
}

// NewSystemDeployerPhase1Transactor creates a new write-only instance of SystemDeployerPhase1, bound to a specific deployed contract.
func NewSystemDeployerPhase1Transactor(address common.Address, transactor bind.ContractTransactor) (*SystemDeployerPhase1Transactor, error) {
	contract, err := bindSystemDeployerPhase1(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &SystemDeployerPhase1Transactor{contract: contract}, nil
}

// NewSystemDeployerPhase1Filterer creates a new log filterer instance of SystemDeployerPhase1, bound to a specific deployed contract.
func NewSystemDeployerPhase1Filterer(address common.Address, filterer bind.ContractFilterer) (*SystemDeployerPhase1Filterer, error) {
	contract, err := bindSystemDeployerPhase1(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &SystemDeployerPhase1Filterer{contract: contract}, nil
}

// bindSystemDeployerPhase1 binds a generic wrapper to an already deployed contract.
func bindSystemDeployerPhase1(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := SystemDeployerPhase1MetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_SystemDeployerPhase1 *SystemDeployerPhase1Raw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _SystemDeployerPhase1.Contract.SystemDeployerPhase1Caller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_SystemDeployerPhase1 *SystemDeployerPhase1Raw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _SystemDeployerPhase1.Contract.SystemDeployerPhase1Transactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_SystemDeployerPhase1 *SystemDeployerPhase1Raw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _SystemDeployerPhase1.Contract.SystemDeployerPhase1Transactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_SystemDeployerPhase1 *SystemDeployerPhase1CallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _SystemDeployerPhase1.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_SystemDeployerPhase1 *SystemDeployerPhase1TransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _SystemDeployerPhase1.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_SystemDeployerPhase1 *SystemDeployerPhase1TransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _SystemDeployerPhase1.Contract.contract.Transact(opts, method, params...)
}

// DeployedContracts is a free data retrieval call binding the contract method 0xc54a9588.
//
// Solidity: function deployedContracts() view returns(address transactionPostProcessor, address fees, address publicCallbacks)
func (_SystemDeployerPhase1 *SystemDeployerPhase1Caller) DeployedContracts(opts *bind.CallOpts) (struct {
	TransactionPostProcessor common.Address
	Fees                     common.Address
	PublicCallbacks          common.Address
}, error) {
	var out []interface{}
	err := _SystemDeployerPhase1.contract.Call(opts, &out, "deployedContracts")

	outstruct := new(struct {
		TransactionPostProcessor common.Address
		Fees                     common.Address
		PublicCallbacks          common.Address
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.TransactionPostProcessor = *abi.ConvertType(out[0], new(common.Address)).(*common.Address)
	outstruct.Fees = *abi.ConvertType(out[1], new(common.Address)).(*common.Address)
	outstruct.PublicCallbacks = *abi.ConvertType(out[2], new(common.Address)).(*common.Address)

	return *outstruct, err

}

// DeployedContracts is a free data retrieval call binding the contract method 0xc54a9588.
//
// Solidity: function deployedContracts() view returns(address transactionPostProcessor, address fees, address publicCallbacks)
func (_SystemDeployerPhase1 *SystemDeployerPhase1Session) DeployedContracts() (struct {
	TransactionPostProcessor common.Address
	Fees                     common.Address
	PublicCallbacks          common.Address
}, error) {
	return _SystemDeployerPhase1.Contract.DeployedContracts(&_SystemDeployerPhase1.CallOpts)
}

// DeployedContracts is a free data retrieval call binding the contract method 0xc54a9588.
//
// Solidity: function deployedContracts() view returns(address transactionPostProcessor, address fees, address publicCallbacks)
func (_SystemDeployerPhase1 *SystemDeployerPhase1CallerSession) DeployedContracts() (struct {
	TransactionPostProcessor common.Address
	Fees                     common.Address
	PublicCallbacks          common.Address
}, error) {
	return _SystemDeployerPhase1.Contract.DeployedContracts(&_SystemDeployerPhase1.CallOpts)
}

// SystemDeployerPhase1SystemContractDeployedIterator is returned from FilterSystemContractDeployed and is used to iterate over the raw logs and unpacked data for SystemContractDeployed events raised by the SystemDeployerPhase1 contract.
type SystemDeployerPhase1SystemContractDeployedIterator struct {
	Event *SystemDeployerPhase1SystemContractDeployed // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *SystemDeployerPhase1SystemContractDeployedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(SystemDeployerPhase1SystemContractDeployed)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(SystemDeployerPhase1SystemContractDeployed)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *SystemDeployerPhase1SystemContractDeployedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *SystemDeployerPhase1SystemContractDeployedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// SystemDeployerPhase1SystemContractDeployed represents a SystemContractDeployed event raised by the SystemDeployerPhase1 contract.
type SystemDeployerPhase1SystemContractDeployed struct {
	Name            string
	ContractAddress common.Address
	Raw             types.Log // Blockchain specific contextual infos
}

// FilterSystemContractDeployed is a free log retrieval operation binding the contract event 0xbd64e14789a915ea657e42f2dbf0b973227708fa64b58766287637985d1ade69.
//
// Solidity: event SystemContractDeployed(string name, address contractAddress)
func (_SystemDeployerPhase1 *SystemDeployerPhase1Filterer) FilterSystemContractDeployed(opts *bind.FilterOpts) (*SystemDeployerPhase1SystemContractDeployedIterator, error) {

	logs, sub, err := _SystemDeployerPhase1.contract.FilterLogs(opts, "SystemContractDeployed")
	if err != nil {
		return nil, err
	}
	return &SystemDeployerPhase1SystemContractDeployedIterator{contract: _SystemDeployerPhase1.contract, event: "SystemContractDeployed", logs: logs, sub: sub}, nil
}

// WatchSystemContractDeployed is a free log subscription operation binding the contract event 0xbd64e14789a915ea657e42f2dbf0b973227708fa64b58766287637985d1ade69.
//
// Solidity: event SystemContractDeployed(string name, address contractAddress)
func (_SystemDeployerPhase1 *SystemDeployerPhase1Filterer) WatchSystemContractDeployed(opts *bind.WatchOpts, sink chan<- *SystemDeployerPhase1SystemContractDeployed) (event.Subscription, error) {

	logs, sub, err := _SystemDeployerPhase1.contract.WatchLogs(opts, "SystemContractDeployed")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(SystemDeployerPhase1SystemContractDeployed)
				if err := _SystemDeployerPhase1.contract.UnpackLog(event, "SystemContractDeployed", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseSystemContractDeployed is a log parse operation binding the contract event 0xbd64e14789a915ea657e42f2dbf0b973227708fa64b58766287637985d1ade69.
//
// Solidity: event SystemContractDeployed(string name, address contractAddress)
func (_SystemDeployerPhase1 *SystemDeployerPhase1Filterer) ParseSystemContractDeployed(log types.Log) (*SystemDeployerPhase1SystemContractDeployed, error) {
	event := new(SystemDeployerPhase1SystemContractDeployed)
	if err := _SystemDeployerPhase1.contract.UnpackLog(event, "SystemContractDeployed", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
