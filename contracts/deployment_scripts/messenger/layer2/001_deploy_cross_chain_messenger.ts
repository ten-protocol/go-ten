import {HardhatRuntimeEnvironment} from 'hardhat/types';
import {DeployFunction} from 'hardhat-deploy/types';

/* 
    This script deploys the L2 side of the cross chain messenger.
    It requires the address of the message bus on the L2 side, which is generated by the enclave
    on genesis. 
*/


const func: DeployFunction = async function (hre: HardhatRuntimeEnvironment) {
    const { 
        deployments, 
        getNamedAccounts,
        companionNetworks,
    } = hre;
    // Use the contract addresses from the network config contract deployment.
    var networkConfigAddress = process.env.NETWORK_CONFIG_ADDR!!
    if (networkConfigAddress === undefined) {
        const networkConfig : any = await hre.network.provider.request({method: 'net_config'});
        networkConfigAddress = networkConfig.NetworkConfig;
        console.log(`Fallback read of management contract address = ${networkConfigAddress}`);
    }

    // Get the prefunded L2 deployer account to use for deploying.
    const {deployer} = await getNamedAccounts();
    const l1Accounts = await companionNetworks.layer1.getNamedAccounts();

    console.log(`Script: 001_deploy_cross_chain_messenger.ts - address used: ${deployer}`);

    const networkConfig : any = await hre.network.provider.request({method: 'net_config'});
    console.log(`L2 MessageBus = ${networkConfig.L2MessageBus}`);
    var l2MessageBus = networkConfig.L2MessageBus;

    const messageBusAddress = hre.ethers.getAddress(l2MessageBus);
    console.log(`Deploying l2 cross chain messenger.`)
    // Deploy the L2 Cross chain messenger and use the L2 bus for validation
    const crossChainDeployment = await deployments.deploy('CrossChainMessenger', {
        from: deployer,
        log: true,
        proxy: {
            proxyContract: "OpenZeppelinTransparentProxy",
            execute: {
                init: {
                    methodName: "initialize",
                    args: [ messageBusAddress ]
                }
            }
        }
    });
    console.log(`Setting L2 Cross chain messenger`)
    // get L1 network config contract and write the cross chain messenger address to it
    const networkConfigContract = (await hre.ethers.getContractFactory('NetworkConfig')).attach(networkConfigAddress);
    const tx = await networkConfigContract.getFunction("setL2CrossChainMessengerAddress").populateTransaction(crossChainDeployment.address);
    const receipt = await companionNetworks.layer1.deployments.rawTx({
        from: l1Accounts.deployer,
        to: networkConfigAddress,
        data: tx.data,
        log: true,
        waitConfirmations: 1,
    });
    if (receipt.events?.length === 0) {
        console.log(`Failed to set L2CrossChainMessenger=${crossChainDeployment.address} on network config contract.`);
    } else {
        console.log(`L2CrossChainMessenger=${crossChainDeployment.address}`);
    }
};

export default func;
func.dependencies = ['NetworkConfig'];
func.tags = ['CrossChainMessenger', 'CrossChainMessenger_deploy'];
